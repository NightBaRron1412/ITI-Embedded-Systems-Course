
Smart_Home_Slave.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003092  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000015e  00800060  00003092  00003126  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000024  008001be  008001be  00003284  2**0
                  ALLOC
  3 .stab         00002a54  00000000  00000000  00003284  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000014a7  00000000  00000000  00005cd8  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 000001a0  00000000  00000000  0000717f  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 000001f2  00000000  00000000  0000731f  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   0000240b  00000000  00000000  00007511  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001386  00000000  00000000  0000991c  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   000011d6  00000000  00000000  0000aca2  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  000001c0  00000000  00000000  0000be78  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002f6  00000000  00000000  0000c038  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000096e  00000000  00000000  0000c32e  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000cc9c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 ea 0f 	jmp	0x1fd4	; 0x1fd4 <__vector_4>
      14:	0c 94 b7 0e 	jmp	0x1d6e	; 0x1d6e <__vector_5>
      18:	0c 94 7f 0d 	jmp	0x1afe	; 0x1afe <__vector_6>
      1c:	0c 94 54 0f 	jmp	0x1ea8	; 0x1ea8 <__vector_7>
      20:	0c 94 9f 0f 	jmp	0x1f3e	; 0x1f3e <__vector_8>
      24:	0c 94 5c 0e 	jmp	0x1cb8	; 0x1cb8 <__vector_9>
      28:	0c 94 09 0f 	jmp	0x1e12	; 0x1e12 <__vector_10>
      2c:	0c 94 0a 0e 	jmp	0x1c14	; 0x1c14 <__vector_11>
      30:	0c 94 ad 0b 	jmp	0x175a	; 0x175a <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e2 e9       	ldi	r30, 0x92	; 146
      68:	f0 e3       	ldi	r31, 0x30	; 48
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ae 3b       	cpi	r26, 0xBE	; 190
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	ae eb       	ldi	r26, 0xBE	; 190
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a2 3e       	cpi	r26, 0xE2	; 226
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 4c 16 	call	0x2c98	; 0x2c98 <main>
      8a:	0c 94 47 18 	jmp	0x308e	; 0x308e <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	ac ea       	ldi	r26, 0xAC	; 172
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 07 18 	jmp	0x300e	; 0x300e <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 07 18 	jmp	0x300e	; 0x300e <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 df 17 	jmp	0x2fbe	; 0x2fbe <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	8c ea       	ldi	r24, 0xAC	; 172
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 fb 17 	jmp	0x2ff6	; 0x2ff6 <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	6c ea       	ldi	r22, 0xAC	; 172
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 07 18 	jmp	0x300e	; 0x300e <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 07 18 	jmp	0x300e	; 0x300e <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 eb 17 	jmp	0x2fd6	; 0x2fd6 <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 be 06 	call	0xd7c	; 0xd7c <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 07 18 	jmp	0x300e	; 0x300e <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 ef 17 	jmp	0x2fde	; 0x2fde <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 46 06 	call	0xc8c	; 0xc8c <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 0b 18 	jmp	0x3016	; 0x3016 <__epilogue_restores__+0x20>

00000952 <__floatunsisf>:
     952:	a8 e0       	ldi	r26, 0x08	; 8
     954:	b0 e0       	ldi	r27, 0x00	; 0
     956:	ef ea       	ldi	r30, 0xAF	; 175
     958:	f4 e0       	ldi	r31, 0x04	; 4
     95a:	0c 94 e7 17 	jmp	0x2fce	; 0x2fce <__prologue_saves__+0x10>
     95e:	7b 01       	movw	r14, r22
     960:	8c 01       	movw	r16, r24
     962:	61 15       	cp	r22, r1
     964:	71 05       	cpc	r23, r1
     966:	81 05       	cpc	r24, r1
     968:	91 05       	cpc	r25, r1
     96a:	19 f4       	brne	.+6      	; 0x972 <__floatunsisf+0x20>
     96c:	82 e0       	ldi	r24, 0x02	; 2
     96e:	89 83       	std	Y+1, r24	; 0x01
     970:	60 c0       	rjmp	.+192    	; 0xa32 <__floatunsisf+0xe0>
     972:	83 e0       	ldi	r24, 0x03	; 3
     974:	89 83       	std	Y+1, r24	; 0x01
     976:	8e e1       	ldi	r24, 0x1E	; 30
     978:	c8 2e       	mov	r12, r24
     97a:	d1 2c       	mov	r13, r1
     97c:	dc 82       	std	Y+4, r13	; 0x04
     97e:	cb 82       	std	Y+3, r12	; 0x03
     980:	ed 82       	std	Y+5, r14	; 0x05
     982:	fe 82       	std	Y+6, r15	; 0x06
     984:	0f 83       	std	Y+7, r16	; 0x07
     986:	18 87       	std	Y+8, r17	; 0x08
     988:	c8 01       	movw	r24, r16
     98a:	b7 01       	movw	r22, r14
     98c:	0e 94 22 05 	call	0xa44	; 0xa44 <__clzsi2>
     990:	fc 01       	movw	r30, r24
     992:	31 97       	sbiw	r30, 0x01	; 1
     994:	f7 ff       	sbrs	r31, 7
     996:	3b c0       	rjmp	.+118    	; 0xa0e <__floatunsisf+0xbc>
     998:	22 27       	eor	r18, r18
     99a:	33 27       	eor	r19, r19
     99c:	2e 1b       	sub	r18, r30
     99e:	3f 0b       	sbc	r19, r31
     9a0:	57 01       	movw	r10, r14
     9a2:	68 01       	movw	r12, r16
     9a4:	02 2e       	mov	r0, r18
     9a6:	04 c0       	rjmp	.+8      	; 0x9b0 <__floatunsisf+0x5e>
     9a8:	d6 94       	lsr	r13
     9aa:	c7 94       	ror	r12
     9ac:	b7 94       	ror	r11
     9ae:	a7 94       	ror	r10
     9b0:	0a 94       	dec	r0
     9b2:	d2 f7       	brpl	.-12     	; 0x9a8 <__floatunsisf+0x56>
     9b4:	40 e0       	ldi	r20, 0x00	; 0
     9b6:	50 e0       	ldi	r21, 0x00	; 0
     9b8:	60 e0       	ldi	r22, 0x00	; 0
     9ba:	70 e0       	ldi	r23, 0x00	; 0
     9bc:	81 e0       	ldi	r24, 0x01	; 1
     9be:	90 e0       	ldi	r25, 0x00	; 0
     9c0:	a0 e0       	ldi	r26, 0x00	; 0
     9c2:	b0 e0       	ldi	r27, 0x00	; 0
     9c4:	04 c0       	rjmp	.+8      	; 0x9ce <__floatunsisf+0x7c>
     9c6:	88 0f       	add	r24, r24
     9c8:	99 1f       	adc	r25, r25
     9ca:	aa 1f       	adc	r26, r26
     9cc:	bb 1f       	adc	r27, r27
     9ce:	2a 95       	dec	r18
     9d0:	d2 f7       	brpl	.-12     	; 0x9c6 <__floatunsisf+0x74>
     9d2:	01 97       	sbiw	r24, 0x01	; 1
     9d4:	a1 09       	sbc	r26, r1
     9d6:	b1 09       	sbc	r27, r1
     9d8:	8e 21       	and	r24, r14
     9da:	9f 21       	and	r25, r15
     9dc:	a0 23       	and	r26, r16
     9de:	b1 23       	and	r27, r17
     9e0:	00 97       	sbiw	r24, 0x00	; 0
     9e2:	a1 05       	cpc	r26, r1
     9e4:	b1 05       	cpc	r27, r1
     9e6:	21 f0       	breq	.+8      	; 0x9f0 <__floatunsisf+0x9e>
     9e8:	41 e0       	ldi	r20, 0x01	; 1
     9ea:	50 e0       	ldi	r21, 0x00	; 0
     9ec:	60 e0       	ldi	r22, 0x00	; 0
     9ee:	70 e0       	ldi	r23, 0x00	; 0
     9f0:	4a 29       	or	r20, r10
     9f2:	5b 29       	or	r21, r11
     9f4:	6c 29       	or	r22, r12
     9f6:	7d 29       	or	r23, r13
     9f8:	4d 83       	std	Y+5, r20	; 0x05
     9fa:	5e 83       	std	Y+6, r21	; 0x06
     9fc:	6f 83       	std	Y+7, r22	; 0x07
     9fe:	78 87       	std	Y+8, r23	; 0x08
     a00:	8e e1       	ldi	r24, 0x1E	; 30
     a02:	90 e0       	ldi	r25, 0x00	; 0
     a04:	8e 1b       	sub	r24, r30
     a06:	9f 0b       	sbc	r25, r31
     a08:	9c 83       	std	Y+4, r25	; 0x04
     a0a:	8b 83       	std	Y+3, r24	; 0x03
     a0c:	12 c0       	rjmp	.+36     	; 0xa32 <__floatunsisf+0xe0>
     a0e:	30 97       	sbiw	r30, 0x00	; 0
     a10:	81 f0       	breq	.+32     	; 0xa32 <__floatunsisf+0xe0>
     a12:	0e 2e       	mov	r0, r30
     a14:	04 c0       	rjmp	.+8      	; 0xa1e <__floatunsisf+0xcc>
     a16:	ee 0c       	add	r14, r14
     a18:	ff 1c       	adc	r15, r15
     a1a:	00 1f       	adc	r16, r16
     a1c:	11 1f       	adc	r17, r17
     a1e:	0a 94       	dec	r0
     a20:	d2 f7       	brpl	.-12     	; 0xa16 <__floatunsisf+0xc4>
     a22:	ed 82       	std	Y+5, r14	; 0x05
     a24:	fe 82       	std	Y+6, r15	; 0x06
     a26:	0f 83       	std	Y+7, r16	; 0x07
     a28:	18 87       	std	Y+8, r17	; 0x08
     a2a:	ce 1a       	sub	r12, r30
     a2c:	df 0a       	sbc	r13, r31
     a2e:	dc 82       	std	Y+4, r13	; 0x04
     a30:	cb 82       	std	Y+3, r12	; 0x03
     a32:	1a 82       	std	Y+2, r1	; 0x02
     a34:	ce 01       	movw	r24, r28
     a36:	01 96       	adiw	r24, 0x01	; 1
     a38:	0e 94 71 05 	call	0xae2	; 0xae2 <__pack_f>
     a3c:	28 96       	adiw	r28, 0x08	; 8
     a3e:	ea e0       	ldi	r30, 0x0A	; 10
     a40:	0c 94 03 18 	jmp	0x3006	; 0x3006 <__epilogue_restores__+0x10>

00000a44 <__clzsi2>:
     a44:	ef 92       	push	r14
     a46:	ff 92       	push	r15
     a48:	0f 93       	push	r16
     a4a:	1f 93       	push	r17
     a4c:	7b 01       	movw	r14, r22
     a4e:	8c 01       	movw	r16, r24
     a50:	80 e0       	ldi	r24, 0x00	; 0
     a52:	e8 16       	cp	r14, r24
     a54:	80 e0       	ldi	r24, 0x00	; 0
     a56:	f8 06       	cpc	r15, r24
     a58:	81 e0       	ldi	r24, 0x01	; 1
     a5a:	08 07       	cpc	r16, r24
     a5c:	80 e0       	ldi	r24, 0x00	; 0
     a5e:	18 07       	cpc	r17, r24
     a60:	88 f4       	brcc	.+34     	; 0xa84 <__clzsi2+0x40>
     a62:	8f ef       	ldi	r24, 0xFF	; 255
     a64:	e8 16       	cp	r14, r24
     a66:	f1 04       	cpc	r15, r1
     a68:	01 05       	cpc	r16, r1
     a6a:	11 05       	cpc	r17, r1
     a6c:	31 f0       	breq	.+12     	; 0xa7a <__clzsi2+0x36>
     a6e:	28 f0       	brcs	.+10     	; 0xa7a <__clzsi2+0x36>
     a70:	88 e0       	ldi	r24, 0x08	; 8
     a72:	90 e0       	ldi	r25, 0x00	; 0
     a74:	a0 e0       	ldi	r26, 0x00	; 0
     a76:	b0 e0       	ldi	r27, 0x00	; 0
     a78:	17 c0       	rjmp	.+46     	; 0xaa8 <__clzsi2+0x64>
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e0       	ldi	r26, 0x00	; 0
     a80:	b0 e0       	ldi	r27, 0x00	; 0
     a82:	12 c0       	rjmp	.+36     	; 0xaa8 <__clzsi2+0x64>
     a84:	80 e0       	ldi	r24, 0x00	; 0
     a86:	e8 16       	cp	r14, r24
     a88:	80 e0       	ldi	r24, 0x00	; 0
     a8a:	f8 06       	cpc	r15, r24
     a8c:	80 e0       	ldi	r24, 0x00	; 0
     a8e:	08 07       	cpc	r16, r24
     a90:	81 e0       	ldi	r24, 0x01	; 1
     a92:	18 07       	cpc	r17, r24
     a94:	28 f0       	brcs	.+10     	; 0xaa0 <__clzsi2+0x5c>
     a96:	88 e1       	ldi	r24, 0x18	; 24
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	04 c0       	rjmp	.+8      	; 0xaa8 <__clzsi2+0x64>
     aa0:	80 e1       	ldi	r24, 0x10	; 16
     aa2:	90 e0       	ldi	r25, 0x00	; 0
     aa4:	a0 e0       	ldi	r26, 0x00	; 0
     aa6:	b0 e0       	ldi	r27, 0x00	; 0
     aa8:	20 e2       	ldi	r18, 0x20	; 32
     aaa:	30 e0       	ldi	r19, 0x00	; 0
     aac:	40 e0       	ldi	r20, 0x00	; 0
     aae:	50 e0       	ldi	r21, 0x00	; 0
     ab0:	28 1b       	sub	r18, r24
     ab2:	39 0b       	sbc	r19, r25
     ab4:	4a 0b       	sbc	r20, r26
     ab6:	5b 0b       	sbc	r21, r27
     ab8:	04 c0       	rjmp	.+8      	; 0xac2 <__clzsi2+0x7e>
     aba:	16 95       	lsr	r17
     abc:	07 95       	ror	r16
     abe:	f7 94       	ror	r15
     ac0:	e7 94       	ror	r14
     ac2:	8a 95       	dec	r24
     ac4:	d2 f7       	brpl	.-12     	; 0xaba <__clzsi2+0x76>
     ac6:	f7 01       	movw	r30, r14
     ac8:	ec 54       	subi	r30, 0x4C	; 76
     aca:	ff 4f       	sbci	r31, 0xFF	; 255
     acc:	80 81       	ld	r24, Z
     ace:	28 1b       	sub	r18, r24
     ad0:	31 09       	sbc	r19, r1
     ad2:	41 09       	sbc	r20, r1
     ad4:	51 09       	sbc	r21, r1
     ad6:	c9 01       	movw	r24, r18
     ad8:	1f 91       	pop	r17
     ada:	0f 91       	pop	r16
     adc:	ff 90       	pop	r15
     ade:	ef 90       	pop	r14
     ae0:	08 95       	ret

00000ae2 <__pack_f>:
     ae2:	df 92       	push	r13
     ae4:	ef 92       	push	r14
     ae6:	ff 92       	push	r15
     ae8:	0f 93       	push	r16
     aea:	1f 93       	push	r17
     aec:	fc 01       	movw	r30, r24
     aee:	e4 80       	ldd	r14, Z+4	; 0x04
     af0:	f5 80       	ldd	r15, Z+5	; 0x05
     af2:	06 81       	ldd	r16, Z+6	; 0x06
     af4:	17 81       	ldd	r17, Z+7	; 0x07
     af6:	d1 80       	ldd	r13, Z+1	; 0x01
     af8:	80 81       	ld	r24, Z
     afa:	82 30       	cpi	r24, 0x02	; 2
     afc:	48 f4       	brcc	.+18     	; 0xb10 <__pack_f+0x2e>
     afe:	80 e0       	ldi	r24, 0x00	; 0
     b00:	90 e0       	ldi	r25, 0x00	; 0
     b02:	a0 e1       	ldi	r26, 0x10	; 16
     b04:	b0 e0       	ldi	r27, 0x00	; 0
     b06:	e8 2a       	or	r14, r24
     b08:	f9 2a       	or	r15, r25
     b0a:	0a 2b       	or	r16, r26
     b0c:	1b 2b       	or	r17, r27
     b0e:	a5 c0       	rjmp	.+330    	; 0xc5a <__pack_f+0x178>
     b10:	84 30       	cpi	r24, 0x04	; 4
     b12:	09 f4       	brne	.+2      	; 0xb16 <__pack_f+0x34>
     b14:	9f c0       	rjmp	.+318    	; 0xc54 <__pack_f+0x172>
     b16:	82 30       	cpi	r24, 0x02	; 2
     b18:	21 f4       	brne	.+8      	; 0xb22 <__pack_f+0x40>
     b1a:	ee 24       	eor	r14, r14
     b1c:	ff 24       	eor	r15, r15
     b1e:	87 01       	movw	r16, r14
     b20:	05 c0       	rjmp	.+10     	; 0xb2c <__pack_f+0x4a>
     b22:	e1 14       	cp	r14, r1
     b24:	f1 04       	cpc	r15, r1
     b26:	01 05       	cpc	r16, r1
     b28:	11 05       	cpc	r17, r1
     b2a:	19 f4       	brne	.+6      	; 0xb32 <__pack_f+0x50>
     b2c:	e0 e0       	ldi	r30, 0x00	; 0
     b2e:	f0 e0       	ldi	r31, 0x00	; 0
     b30:	96 c0       	rjmp	.+300    	; 0xc5e <__pack_f+0x17c>
     b32:	62 81       	ldd	r22, Z+2	; 0x02
     b34:	73 81       	ldd	r23, Z+3	; 0x03
     b36:	9f ef       	ldi	r25, 0xFF	; 255
     b38:	62 38       	cpi	r22, 0x82	; 130
     b3a:	79 07       	cpc	r23, r25
     b3c:	0c f0       	brlt	.+2      	; 0xb40 <__pack_f+0x5e>
     b3e:	5b c0       	rjmp	.+182    	; 0xbf6 <__pack_f+0x114>
     b40:	22 e8       	ldi	r18, 0x82	; 130
     b42:	3f ef       	ldi	r19, 0xFF	; 255
     b44:	26 1b       	sub	r18, r22
     b46:	37 0b       	sbc	r19, r23
     b48:	2a 31       	cpi	r18, 0x1A	; 26
     b4a:	31 05       	cpc	r19, r1
     b4c:	2c f0       	brlt	.+10     	; 0xb58 <__pack_f+0x76>
     b4e:	20 e0       	ldi	r18, 0x00	; 0
     b50:	30 e0       	ldi	r19, 0x00	; 0
     b52:	40 e0       	ldi	r20, 0x00	; 0
     b54:	50 e0       	ldi	r21, 0x00	; 0
     b56:	2a c0       	rjmp	.+84     	; 0xbac <__pack_f+0xca>
     b58:	b8 01       	movw	r22, r16
     b5a:	a7 01       	movw	r20, r14
     b5c:	02 2e       	mov	r0, r18
     b5e:	04 c0       	rjmp	.+8      	; 0xb68 <__pack_f+0x86>
     b60:	76 95       	lsr	r23
     b62:	67 95       	ror	r22
     b64:	57 95       	ror	r21
     b66:	47 95       	ror	r20
     b68:	0a 94       	dec	r0
     b6a:	d2 f7       	brpl	.-12     	; 0xb60 <__pack_f+0x7e>
     b6c:	81 e0       	ldi	r24, 0x01	; 1
     b6e:	90 e0       	ldi	r25, 0x00	; 0
     b70:	a0 e0       	ldi	r26, 0x00	; 0
     b72:	b0 e0       	ldi	r27, 0x00	; 0
     b74:	04 c0       	rjmp	.+8      	; 0xb7e <__pack_f+0x9c>
     b76:	88 0f       	add	r24, r24
     b78:	99 1f       	adc	r25, r25
     b7a:	aa 1f       	adc	r26, r26
     b7c:	bb 1f       	adc	r27, r27
     b7e:	2a 95       	dec	r18
     b80:	d2 f7       	brpl	.-12     	; 0xb76 <__pack_f+0x94>
     b82:	01 97       	sbiw	r24, 0x01	; 1
     b84:	a1 09       	sbc	r26, r1
     b86:	b1 09       	sbc	r27, r1
     b88:	8e 21       	and	r24, r14
     b8a:	9f 21       	and	r25, r15
     b8c:	a0 23       	and	r26, r16
     b8e:	b1 23       	and	r27, r17
     b90:	00 97       	sbiw	r24, 0x00	; 0
     b92:	a1 05       	cpc	r26, r1
     b94:	b1 05       	cpc	r27, r1
     b96:	21 f0       	breq	.+8      	; 0xba0 <__pack_f+0xbe>
     b98:	81 e0       	ldi	r24, 0x01	; 1
     b9a:	90 e0       	ldi	r25, 0x00	; 0
     b9c:	a0 e0       	ldi	r26, 0x00	; 0
     b9e:	b0 e0       	ldi	r27, 0x00	; 0
     ba0:	9a 01       	movw	r18, r20
     ba2:	ab 01       	movw	r20, r22
     ba4:	28 2b       	or	r18, r24
     ba6:	39 2b       	or	r19, r25
     ba8:	4a 2b       	or	r20, r26
     baa:	5b 2b       	or	r21, r27
     bac:	da 01       	movw	r26, r20
     bae:	c9 01       	movw	r24, r18
     bb0:	8f 77       	andi	r24, 0x7F	; 127
     bb2:	90 70       	andi	r25, 0x00	; 0
     bb4:	a0 70       	andi	r26, 0x00	; 0
     bb6:	b0 70       	andi	r27, 0x00	; 0
     bb8:	80 34       	cpi	r24, 0x40	; 64
     bba:	91 05       	cpc	r25, r1
     bbc:	a1 05       	cpc	r26, r1
     bbe:	b1 05       	cpc	r27, r1
     bc0:	39 f4       	brne	.+14     	; 0xbd0 <__pack_f+0xee>
     bc2:	27 ff       	sbrs	r18, 7
     bc4:	09 c0       	rjmp	.+18     	; 0xbd8 <__pack_f+0xf6>
     bc6:	20 5c       	subi	r18, 0xC0	; 192
     bc8:	3f 4f       	sbci	r19, 0xFF	; 255
     bca:	4f 4f       	sbci	r20, 0xFF	; 255
     bcc:	5f 4f       	sbci	r21, 0xFF	; 255
     bce:	04 c0       	rjmp	.+8      	; 0xbd8 <__pack_f+0xf6>
     bd0:	21 5c       	subi	r18, 0xC1	; 193
     bd2:	3f 4f       	sbci	r19, 0xFF	; 255
     bd4:	4f 4f       	sbci	r20, 0xFF	; 255
     bd6:	5f 4f       	sbci	r21, 0xFF	; 255
     bd8:	e0 e0       	ldi	r30, 0x00	; 0
     bda:	f0 e0       	ldi	r31, 0x00	; 0
     bdc:	20 30       	cpi	r18, 0x00	; 0
     bde:	a0 e0       	ldi	r26, 0x00	; 0
     be0:	3a 07       	cpc	r19, r26
     be2:	a0 e0       	ldi	r26, 0x00	; 0
     be4:	4a 07       	cpc	r20, r26
     be6:	a0 e4       	ldi	r26, 0x40	; 64
     be8:	5a 07       	cpc	r21, r26
     bea:	10 f0       	brcs	.+4      	; 0xbf0 <__pack_f+0x10e>
     bec:	e1 e0       	ldi	r30, 0x01	; 1
     bee:	f0 e0       	ldi	r31, 0x00	; 0
     bf0:	79 01       	movw	r14, r18
     bf2:	8a 01       	movw	r16, r20
     bf4:	27 c0       	rjmp	.+78     	; 0xc44 <__pack_f+0x162>
     bf6:	60 38       	cpi	r22, 0x80	; 128
     bf8:	71 05       	cpc	r23, r1
     bfa:	64 f5       	brge	.+88     	; 0xc54 <__pack_f+0x172>
     bfc:	fb 01       	movw	r30, r22
     bfe:	e1 58       	subi	r30, 0x81	; 129
     c00:	ff 4f       	sbci	r31, 0xFF	; 255
     c02:	d8 01       	movw	r26, r16
     c04:	c7 01       	movw	r24, r14
     c06:	8f 77       	andi	r24, 0x7F	; 127
     c08:	90 70       	andi	r25, 0x00	; 0
     c0a:	a0 70       	andi	r26, 0x00	; 0
     c0c:	b0 70       	andi	r27, 0x00	; 0
     c0e:	80 34       	cpi	r24, 0x40	; 64
     c10:	91 05       	cpc	r25, r1
     c12:	a1 05       	cpc	r26, r1
     c14:	b1 05       	cpc	r27, r1
     c16:	39 f4       	brne	.+14     	; 0xc26 <__pack_f+0x144>
     c18:	e7 fe       	sbrs	r14, 7
     c1a:	0d c0       	rjmp	.+26     	; 0xc36 <__pack_f+0x154>
     c1c:	80 e4       	ldi	r24, 0x40	; 64
     c1e:	90 e0       	ldi	r25, 0x00	; 0
     c20:	a0 e0       	ldi	r26, 0x00	; 0
     c22:	b0 e0       	ldi	r27, 0x00	; 0
     c24:	04 c0       	rjmp	.+8      	; 0xc2e <__pack_f+0x14c>
     c26:	8f e3       	ldi	r24, 0x3F	; 63
     c28:	90 e0       	ldi	r25, 0x00	; 0
     c2a:	a0 e0       	ldi	r26, 0x00	; 0
     c2c:	b0 e0       	ldi	r27, 0x00	; 0
     c2e:	e8 0e       	add	r14, r24
     c30:	f9 1e       	adc	r15, r25
     c32:	0a 1f       	adc	r16, r26
     c34:	1b 1f       	adc	r17, r27
     c36:	17 ff       	sbrs	r17, 7
     c38:	05 c0       	rjmp	.+10     	; 0xc44 <__pack_f+0x162>
     c3a:	16 95       	lsr	r17
     c3c:	07 95       	ror	r16
     c3e:	f7 94       	ror	r15
     c40:	e7 94       	ror	r14
     c42:	31 96       	adiw	r30, 0x01	; 1
     c44:	87 e0       	ldi	r24, 0x07	; 7
     c46:	16 95       	lsr	r17
     c48:	07 95       	ror	r16
     c4a:	f7 94       	ror	r15
     c4c:	e7 94       	ror	r14
     c4e:	8a 95       	dec	r24
     c50:	d1 f7       	brne	.-12     	; 0xc46 <__pack_f+0x164>
     c52:	05 c0       	rjmp	.+10     	; 0xc5e <__pack_f+0x17c>
     c54:	ee 24       	eor	r14, r14
     c56:	ff 24       	eor	r15, r15
     c58:	87 01       	movw	r16, r14
     c5a:	ef ef       	ldi	r30, 0xFF	; 255
     c5c:	f0 e0       	ldi	r31, 0x00	; 0
     c5e:	6e 2f       	mov	r22, r30
     c60:	67 95       	ror	r22
     c62:	66 27       	eor	r22, r22
     c64:	67 95       	ror	r22
     c66:	90 2f       	mov	r25, r16
     c68:	9f 77       	andi	r25, 0x7F	; 127
     c6a:	d7 94       	ror	r13
     c6c:	dd 24       	eor	r13, r13
     c6e:	d7 94       	ror	r13
     c70:	8e 2f       	mov	r24, r30
     c72:	86 95       	lsr	r24
     c74:	49 2f       	mov	r20, r25
     c76:	46 2b       	or	r20, r22
     c78:	58 2f       	mov	r21, r24
     c7a:	5d 29       	or	r21, r13
     c7c:	b7 01       	movw	r22, r14
     c7e:	ca 01       	movw	r24, r20
     c80:	1f 91       	pop	r17
     c82:	0f 91       	pop	r16
     c84:	ff 90       	pop	r15
     c86:	ef 90       	pop	r14
     c88:	df 90       	pop	r13
     c8a:	08 95       	ret

00000c8c <__unpack_f>:
     c8c:	fc 01       	movw	r30, r24
     c8e:	db 01       	movw	r26, r22
     c90:	40 81       	ld	r20, Z
     c92:	51 81       	ldd	r21, Z+1	; 0x01
     c94:	22 81       	ldd	r18, Z+2	; 0x02
     c96:	62 2f       	mov	r22, r18
     c98:	6f 77       	andi	r22, 0x7F	; 127
     c9a:	70 e0       	ldi	r23, 0x00	; 0
     c9c:	22 1f       	adc	r18, r18
     c9e:	22 27       	eor	r18, r18
     ca0:	22 1f       	adc	r18, r18
     ca2:	93 81       	ldd	r25, Z+3	; 0x03
     ca4:	89 2f       	mov	r24, r25
     ca6:	88 0f       	add	r24, r24
     ca8:	82 2b       	or	r24, r18
     caa:	28 2f       	mov	r18, r24
     cac:	30 e0       	ldi	r19, 0x00	; 0
     cae:	99 1f       	adc	r25, r25
     cb0:	99 27       	eor	r25, r25
     cb2:	99 1f       	adc	r25, r25
     cb4:	11 96       	adiw	r26, 0x01	; 1
     cb6:	9c 93       	st	X, r25
     cb8:	11 97       	sbiw	r26, 0x01	; 1
     cba:	21 15       	cp	r18, r1
     cbc:	31 05       	cpc	r19, r1
     cbe:	a9 f5       	brne	.+106    	; 0xd2a <__unpack_f+0x9e>
     cc0:	41 15       	cp	r20, r1
     cc2:	51 05       	cpc	r21, r1
     cc4:	61 05       	cpc	r22, r1
     cc6:	71 05       	cpc	r23, r1
     cc8:	11 f4       	brne	.+4      	; 0xcce <__unpack_f+0x42>
     cca:	82 e0       	ldi	r24, 0x02	; 2
     ccc:	37 c0       	rjmp	.+110    	; 0xd3c <__unpack_f+0xb0>
     cce:	82 e8       	ldi	r24, 0x82	; 130
     cd0:	9f ef       	ldi	r25, 0xFF	; 255
     cd2:	13 96       	adiw	r26, 0x03	; 3
     cd4:	9c 93       	st	X, r25
     cd6:	8e 93       	st	-X, r24
     cd8:	12 97       	sbiw	r26, 0x02	; 2
     cda:	9a 01       	movw	r18, r20
     cdc:	ab 01       	movw	r20, r22
     cde:	67 e0       	ldi	r22, 0x07	; 7
     ce0:	22 0f       	add	r18, r18
     ce2:	33 1f       	adc	r19, r19
     ce4:	44 1f       	adc	r20, r20
     ce6:	55 1f       	adc	r21, r21
     ce8:	6a 95       	dec	r22
     cea:	d1 f7       	brne	.-12     	; 0xce0 <__unpack_f+0x54>
     cec:	83 e0       	ldi	r24, 0x03	; 3
     cee:	8c 93       	st	X, r24
     cf0:	0d c0       	rjmp	.+26     	; 0xd0c <__unpack_f+0x80>
     cf2:	22 0f       	add	r18, r18
     cf4:	33 1f       	adc	r19, r19
     cf6:	44 1f       	adc	r20, r20
     cf8:	55 1f       	adc	r21, r21
     cfa:	12 96       	adiw	r26, 0x02	; 2
     cfc:	8d 91       	ld	r24, X+
     cfe:	9c 91       	ld	r25, X
     d00:	13 97       	sbiw	r26, 0x03	; 3
     d02:	01 97       	sbiw	r24, 0x01	; 1
     d04:	13 96       	adiw	r26, 0x03	; 3
     d06:	9c 93       	st	X, r25
     d08:	8e 93       	st	-X, r24
     d0a:	12 97       	sbiw	r26, 0x02	; 2
     d0c:	20 30       	cpi	r18, 0x00	; 0
     d0e:	80 e0       	ldi	r24, 0x00	; 0
     d10:	38 07       	cpc	r19, r24
     d12:	80 e0       	ldi	r24, 0x00	; 0
     d14:	48 07       	cpc	r20, r24
     d16:	80 e4       	ldi	r24, 0x40	; 64
     d18:	58 07       	cpc	r21, r24
     d1a:	58 f3       	brcs	.-42     	; 0xcf2 <__unpack_f+0x66>
     d1c:	14 96       	adiw	r26, 0x04	; 4
     d1e:	2d 93       	st	X+, r18
     d20:	3d 93       	st	X+, r19
     d22:	4d 93       	st	X+, r20
     d24:	5c 93       	st	X, r21
     d26:	17 97       	sbiw	r26, 0x07	; 7
     d28:	08 95       	ret
     d2a:	2f 3f       	cpi	r18, 0xFF	; 255
     d2c:	31 05       	cpc	r19, r1
     d2e:	79 f4       	brne	.+30     	; 0xd4e <__unpack_f+0xc2>
     d30:	41 15       	cp	r20, r1
     d32:	51 05       	cpc	r21, r1
     d34:	61 05       	cpc	r22, r1
     d36:	71 05       	cpc	r23, r1
     d38:	19 f4       	brne	.+6      	; 0xd40 <__unpack_f+0xb4>
     d3a:	84 e0       	ldi	r24, 0x04	; 4
     d3c:	8c 93       	st	X, r24
     d3e:	08 95       	ret
     d40:	64 ff       	sbrs	r22, 4
     d42:	03 c0       	rjmp	.+6      	; 0xd4a <__unpack_f+0xbe>
     d44:	81 e0       	ldi	r24, 0x01	; 1
     d46:	8c 93       	st	X, r24
     d48:	12 c0       	rjmp	.+36     	; 0xd6e <__unpack_f+0xe2>
     d4a:	1c 92       	st	X, r1
     d4c:	10 c0       	rjmp	.+32     	; 0xd6e <__unpack_f+0xe2>
     d4e:	2f 57       	subi	r18, 0x7F	; 127
     d50:	30 40       	sbci	r19, 0x00	; 0
     d52:	13 96       	adiw	r26, 0x03	; 3
     d54:	3c 93       	st	X, r19
     d56:	2e 93       	st	-X, r18
     d58:	12 97       	sbiw	r26, 0x02	; 2
     d5a:	83 e0       	ldi	r24, 0x03	; 3
     d5c:	8c 93       	st	X, r24
     d5e:	87 e0       	ldi	r24, 0x07	; 7
     d60:	44 0f       	add	r20, r20
     d62:	55 1f       	adc	r21, r21
     d64:	66 1f       	adc	r22, r22
     d66:	77 1f       	adc	r23, r23
     d68:	8a 95       	dec	r24
     d6a:	d1 f7       	brne	.-12     	; 0xd60 <__unpack_f+0xd4>
     d6c:	70 64       	ori	r23, 0x40	; 64
     d6e:	14 96       	adiw	r26, 0x04	; 4
     d70:	4d 93       	st	X+, r20
     d72:	5d 93       	st	X+, r21
     d74:	6d 93       	st	X+, r22
     d76:	7c 93       	st	X, r23
     d78:	17 97       	sbiw	r26, 0x07	; 7
     d7a:	08 95       	ret

00000d7c <__fpcmp_parts_f>:
     d7c:	1f 93       	push	r17
     d7e:	dc 01       	movw	r26, r24
     d80:	fb 01       	movw	r30, r22
     d82:	9c 91       	ld	r25, X
     d84:	92 30       	cpi	r25, 0x02	; 2
     d86:	08 f4       	brcc	.+2      	; 0xd8a <__fpcmp_parts_f+0xe>
     d88:	47 c0       	rjmp	.+142    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d8a:	80 81       	ld	r24, Z
     d8c:	82 30       	cpi	r24, 0x02	; 2
     d8e:	08 f4       	brcc	.+2      	; 0xd92 <__fpcmp_parts_f+0x16>
     d90:	43 c0       	rjmp	.+134    	; 0xe18 <__fpcmp_parts_f+0x9c>
     d92:	94 30       	cpi	r25, 0x04	; 4
     d94:	51 f4       	brne	.+20     	; 0xdaa <__fpcmp_parts_f+0x2e>
     d96:	11 96       	adiw	r26, 0x01	; 1
     d98:	1c 91       	ld	r17, X
     d9a:	84 30       	cpi	r24, 0x04	; 4
     d9c:	99 f5       	brne	.+102    	; 0xe04 <__fpcmp_parts_f+0x88>
     d9e:	81 81       	ldd	r24, Z+1	; 0x01
     da0:	68 2f       	mov	r22, r24
     da2:	70 e0       	ldi	r23, 0x00	; 0
     da4:	61 1b       	sub	r22, r17
     da6:	71 09       	sbc	r23, r1
     da8:	3f c0       	rjmp	.+126    	; 0xe28 <__fpcmp_parts_f+0xac>
     daa:	84 30       	cpi	r24, 0x04	; 4
     dac:	21 f0       	breq	.+8      	; 0xdb6 <__fpcmp_parts_f+0x3a>
     dae:	92 30       	cpi	r25, 0x02	; 2
     db0:	31 f4       	brne	.+12     	; 0xdbe <__fpcmp_parts_f+0x42>
     db2:	82 30       	cpi	r24, 0x02	; 2
     db4:	b9 f1       	breq	.+110    	; 0xe24 <__fpcmp_parts_f+0xa8>
     db6:	81 81       	ldd	r24, Z+1	; 0x01
     db8:	88 23       	and	r24, r24
     dba:	89 f1       	breq	.+98     	; 0xe1e <__fpcmp_parts_f+0xa2>
     dbc:	2d c0       	rjmp	.+90     	; 0xe18 <__fpcmp_parts_f+0x9c>
     dbe:	11 96       	adiw	r26, 0x01	; 1
     dc0:	1c 91       	ld	r17, X
     dc2:	11 97       	sbiw	r26, 0x01	; 1
     dc4:	82 30       	cpi	r24, 0x02	; 2
     dc6:	f1 f0       	breq	.+60     	; 0xe04 <__fpcmp_parts_f+0x88>
     dc8:	81 81       	ldd	r24, Z+1	; 0x01
     dca:	18 17       	cp	r17, r24
     dcc:	d9 f4       	brne	.+54     	; 0xe04 <__fpcmp_parts_f+0x88>
     dce:	12 96       	adiw	r26, 0x02	; 2
     dd0:	2d 91       	ld	r18, X+
     dd2:	3c 91       	ld	r19, X
     dd4:	13 97       	sbiw	r26, 0x03	; 3
     dd6:	82 81       	ldd	r24, Z+2	; 0x02
     dd8:	93 81       	ldd	r25, Z+3	; 0x03
     dda:	82 17       	cp	r24, r18
     ddc:	93 07       	cpc	r25, r19
     dde:	94 f0       	brlt	.+36     	; 0xe04 <__fpcmp_parts_f+0x88>
     de0:	28 17       	cp	r18, r24
     de2:	39 07       	cpc	r19, r25
     de4:	bc f0       	brlt	.+46     	; 0xe14 <__fpcmp_parts_f+0x98>
     de6:	14 96       	adiw	r26, 0x04	; 4
     de8:	8d 91       	ld	r24, X+
     dea:	9d 91       	ld	r25, X+
     dec:	0d 90       	ld	r0, X+
     dee:	bc 91       	ld	r27, X
     df0:	a0 2d       	mov	r26, r0
     df2:	24 81       	ldd	r18, Z+4	; 0x04
     df4:	35 81       	ldd	r19, Z+5	; 0x05
     df6:	46 81       	ldd	r20, Z+6	; 0x06
     df8:	57 81       	ldd	r21, Z+7	; 0x07
     dfa:	28 17       	cp	r18, r24
     dfc:	39 07       	cpc	r19, r25
     dfe:	4a 07       	cpc	r20, r26
     e00:	5b 07       	cpc	r21, r27
     e02:	18 f4       	brcc	.+6      	; 0xe0a <__fpcmp_parts_f+0x8e>
     e04:	11 23       	and	r17, r17
     e06:	41 f0       	breq	.+16     	; 0xe18 <__fpcmp_parts_f+0x9c>
     e08:	0a c0       	rjmp	.+20     	; 0xe1e <__fpcmp_parts_f+0xa2>
     e0a:	82 17       	cp	r24, r18
     e0c:	93 07       	cpc	r25, r19
     e0e:	a4 07       	cpc	r26, r20
     e10:	b5 07       	cpc	r27, r21
     e12:	40 f4       	brcc	.+16     	; 0xe24 <__fpcmp_parts_f+0xa8>
     e14:	11 23       	and	r17, r17
     e16:	19 f0       	breq	.+6      	; 0xe1e <__fpcmp_parts_f+0xa2>
     e18:	61 e0       	ldi	r22, 0x01	; 1
     e1a:	70 e0       	ldi	r23, 0x00	; 0
     e1c:	05 c0       	rjmp	.+10     	; 0xe28 <__fpcmp_parts_f+0xac>
     e1e:	6f ef       	ldi	r22, 0xFF	; 255
     e20:	7f ef       	ldi	r23, 0xFF	; 255
     e22:	02 c0       	rjmp	.+4      	; 0xe28 <__fpcmp_parts_f+0xac>
     e24:	60 e0       	ldi	r22, 0x00	; 0
     e26:	70 e0       	ldi	r23, 0x00	; 0
     e28:	cb 01       	movw	r24, r22
     e2a:	1f 91       	pop	r17
     e2c:	08 95       	ret

00000e2e <ADC_VidInit>:
#include "ADC_interface.h"
#include "ADC_private.h"
#include "ADC_config.h"

void ADC_VidInit(void)
{
     e2e:	df 93       	push	r29
     e30:	cf 93       	push	r28
     e32:	cd b7       	in	r28, 0x3d	; 61
     e34:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(ADMUX, ADMUX_REFS0);
    CLR_BIT(ADMUX, ADMUX_REFS1);

#elif ADC_REFRENCE_SELECTION == ADC_AVCC_EXTCAP_AREF

    SET_BIT(ADMUX, ADMUX_REFS0);
     e36:	a7 e2       	ldi	r26, 0x27	; 39
     e38:	b0 e0       	ldi	r27, 0x00	; 0
     e3a:	e7 e2       	ldi	r30, 0x27	; 39
     e3c:	f0 e0       	ldi	r31, 0x00	; 0
     e3e:	80 81       	ld	r24, Z
     e40:	80 64       	ori	r24, 0x40	; 64
     e42:	8c 93       	st	X, r24
    CLR_BIT(ADMUX, ADMUX_REFS1);
     e44:	a7 e2       	ldi	r26, 0x27	; 39
     e46:	b0 e0       	ldi	r27, 0x00	; 0
     e48:	e7 e2       	ldi	r30, 0x27	; 39
     e4a:	f0 e0       	ldi	r31, 0x00	; 0
     e4c:	80 81       	ld	r24, Z
     e4e:	8f 77       	andi	r24, 0x7F	; 127
     e50:	8c 93       	st	X, r24

    //Resolution selection

#if ADC_READING_RESOLUTION == ADC_10_BIT

    CLR_BIT(ADMUX, ADMUX_ADLAR);
     e52:	a7 e2       	ldi	r26, 0x27	; 39
     e54:	b0 e0       	ldi	r27, 0x00	; 0
     e56:	e7 e2       	ldi	r30, 0x27	; 39
     e58:	f0 e0       	ldi	r31, 0x00	; 0
     e5a:	80 81       	ld	r24, Z
     e5c:	8f 7d       	andi	r24, 0xDF	; 223
     e5e:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS1);
    SET_BIT(ADCSRA, ADCSRA_ADPS2);

#elif ADC_PRESCALER == ADC_PRESCALER_128

    SET_BIT(ADCSRA, ADCSRA_ADPS0);
     e60:	a6 e2       	ldi	r26, 0x26	; 38
     e62:	b0 e0       	ldi	r27, 0x00	; 0
     e64:	e6 e2       	ldi	r30, 0x26	; 38
     e66:	f0 e0       	ldi	r31, 0x00	; 0
     e68:	80 81       	ld	r24, Z
     e6a:	81 60       	ori	r24, 0x01	; 1
     e6c:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS1);
     e6e:	a6 e2       	ldi	r26, 0x26	; 38
     e70:	b0 e0       	ldi	r27, 0x00	; 0
     e72:	e6 e2       	ldi	r30, 0x26	; 38
     e74:	f0 e0       	ldi	r31, 0x00	; 0
     e76:	80 81       	ld	r24, Z
     e78:	82 60       	ori	r24, 0x02	; 2
     e7a:	8c 93       	st	X, r24
    SET_BIT(ADCSRA, ADCSRA_ADPS2);
     e7c:	a6 e2       	ldi	r26, 0x26	; 38
     e7e:	b0 e0       	ldi	r27, 0x00	; 0
     e80:	e6 e2       	ldi	r30, 0x26	; 38
     e82:	f0 e0       	ldi	r31, 0x00	; 0
     e84:	80 81       	ld	r24, Z
     e86:	84 60       	ori	r24, 0x04	; 4
     e88:	8c 93       	st	X, r24
#error No prescalar selected, kindly take a look at Config File.

#endif

    //Enable ADC
    SET_BIT(ADCSRA, ADCSRA_ADEN);
     e8a:	a6 e2       	ldi	r26, 0x26	; 38
     e8c:	b0 e0       	ldi	r27, 0x00	; 0
     e8e:	e6 e2       	ldi	r30, 0x26	; 38
     e90:	f0 e0       	ldi	r31, 0x00	; 0
     e92:	80 81       	ld	r24, Z
     e94:	80 68       	ori	r24, 0x80	; 128
     e96:	8c 93       	st	X, r24

    //Clear Interrupt Flag
    SET_BIT(ADCSRA, ADCSRA_ADIF);
     e98:	a6 e2       	ldi	r26, 0x26	; 38
     e9a:	b0 e0       	ldi	r27, 0x00	; 0
     e9c:	e6 e2       	ldi	r30, 0x26	; 38
     e9e:	f0 e0       	ldi	r31, 0x00	; 0
     ea0:	80 81       	ld	r24, Z
     ea2:	80 61       	ori	r24, 0x10	; 16
     ea4:	8c 93       	st	X, r24
}
     ea6:	cf 91       	pop	r28
     ea8:	df 91       	pop	r29
     eaa:	08 95       	ret

00000eac <ADC_u16Read>:

u16 ADC_u16Read(u8 Copy_u8Channel)
{
     eac:	df 93       	push	r29
     eae:	cf 93       	push	r28
     eb0:	00 d0       	rcall	.+0      	; 0xeb2 <ADC_u16Read+0x6>
     eb2:	00 d0       	rcall	.+0      	; 0xeb4 <ADC_u16Read+0x8>
     eb4:	0f 92       	push	r0
     eb6:	cd b7       	in	r28, 0x3d	; 61
     eb8:	de b7       	in	r29, 0x3e	; 62
     eba:	8d 83       	std	Y+5, r24	; 0x05
    ADMUX &= 0b11110000;
     ebc:	a7 e2       	ldi	r26, 0x27	; 39
     ebe:	b0 e0       	ldi	r27, 0x00	; 0
     ec0:	e7 e2       	ldi	r30, 0x27	; 39
     ec2:	f0 e0       	ldi	r31, 0x00	; 0
     ec4:	80 81       	ld	r24, Z
     ec6:	80 7f       	andi	r24, 0xF0	; 240
     ec8:	8c 93       	st	X, r24
    ADMUX = ADMUX | Copy_u8Channel;
     eca:	a7 e2       	ldi	r26, 0x27	; 39
     ecc:	b0 e0       	ldi	r27, 0x00	; 0
     ece:	e7 e2       	ldi	r30, 0x27	; 39
     ed0:	f0 e0       	ldi	r31, 0x00	; 0
     ed2:	90 81       	ld	r25, Z
     ed4:	8d 81       	ldd	r24, Y+5	; 0x05
     ed6:	89 2b       	or	r24, r25
     ed8:	8c 93       	st	X, r24
    //Start conversion
    SET_BIT(ADCSRA, ADCSRA_ADSC);
     eda:	a6 e2       	ldi	r26, 0x26	; 38
     edc:	b0 e0       	ldi	r27, 0x00	; 0
     ede:	e6 e2       	ldi	r30, 0x26	; 38
     ee0:	f0 e0       	ldi	r31, 0x00	; 0
     ee2:	80 81       	ld	r24, Z
     ee4:	80 64       	ori	r24, 0x40	; 64
     ee6:	8c 93       	st	X, r24

    //Poll the ADC until the value is ready
    while (GET_BIT(ADCSRA, ADCSRA_ADIF) == low)
     ee8:	e6 e2       	ldi	r30, 0x26	; 38
     eea:	f0 e0       	ldi	r31, 0x00	; 0
     eec:	80 81       	ld	r24, Z
     eee:	82 95       	swap	r24
     ef0:	8f 70       	andi	r24, 0x0F	; 15
     ef2:	88 2f       	mov	r24, r24
     ef4:	90 e0       	ldi	r25, 0x00	; 0
     ef6:	81 70       	andi	r24, 0x01	; 1
     ef8:	90 70       	andi	r25, 0x00	; 0
     efa:	00 97       	sbiw	r24, 0x00	; 0
     efc:	a9 f3       	breq	.-22     	; 0xee8 <ADC_u16Read+0x3c>
        ;

    //Clear interrupt flag
    SET_BIT(ADCSRA, ADCSRA_ADIF);
     efe:	a6 e2       	ldi	r26, 0x26	; 38
     f00:	b0 e0       	ldi	r27, 0x00	; 0
     f02:	e6 e2       	ldi	r30, 0x26	; 38
     f04:	f0 e0       	ldi	r31, 0x00	; 0
     f06:	80 81       	ld	r24, Z
     f08:	80 61       	ori	r24, 0x10	; 16
     f0a:	8c 93       	st	X, r24

#if ADC_READING_RESOLUTION == ADC_10_BIT

    u16 lowerbyte, result;

    lowerbyte = ADCL;
     f0c:	e4 e2       	ldi	r30, 0x24	; 36
     f0e:	f0 e0       	ldi	r31, 0x00	; 0
     f10:	80 81       	ld	r24, Z
     f12:	88 2f       	mov	r24, r24
     f14:	90 e0       	ldi	r25, 0x00	; 0
     f16:	9c 83       	std	Y+4, r25	; 0x04
     f18:	8b 83       	std	Y+3, r24	; 0x03
    result = ADCH * 256;
     f1a:	e5 e2       	ldi	r30, 0x25	; 37
     f1c:	f0 e0       	ldi	r31, 0x00	; 0
     f1e:	80 81       	ld	r24, Z
     f20:	88 2f       	mov	r24, r24
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	98 2f       	mov	r25, r24
     f26:	88 27       	eor	r24, r24
     f28:	9a 83       	std	Y+2, r25	; 0x02
     f2a:	89 83       	std	Y+1, r24	; 0x01
    result += lowerbyte;
     f2c:	29 81       	ldd	r18, Y+1	; 0x01
     f2e:	3a 81       	ldd	r19, Y+2	; 0x02
     f30:	8b 81       	ldd	r24, Y+3	; 0x03
     f32:	9c 81       	ldd	r25, Y+4	; 0x04
     f34:	82 0f       	add	r24, r18
     f36:	93 1f       	adc	r25, r19
     f38:	9a 83       	std	Y+2, r25	; 0x02
     f3a:	89 83       	std	Y+1, r24	; 0x01
    return (result);
     f3c:	89 81       	ldd	r24, Y+1	; 0x01
     f3e:	9a 81       	ldd	r25, Y+2	; 0x02
#else

#error No Resolution selected, kindly take a look at Config File.

#endif
     f40:	0f 90       	pop	r0
     f42:	0f 90       	pop	r0
     f44:	0f 90       	pop	r0
     f46:	0f 90       	pop	r0
     f48:	0f 90       	pop	r0
     f4a:	cf 91       	pop	r28
     f4c:	df 91       	pop	r29
     f4e:	08 95       	ret

00000f50 <DIO_VidSetPinValue>:
#include "DIO_interface.h"

/*------------------------------------Pins functions------------------------------------------------*/

void DIO_VidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value) //Setting pin value to High or Low
{
     f50:	df 93       	push	r29
     f52:	cf 93       	push	r28
     f54:	cd b7       	in	r28, 0x3d	; 61
     f56:	de b7       	in	r29, 0x3e	; 62
     f58:	27 97       	sbiw	r28, 0x07	; 7
     f5a:	0f b6       	in	r0, 0x3f	; 63
     f5c:	f8 94       	cli
     f5e:	de bf       	out	0x3e, r29	; 62
     f60:	0f be       	out	0x3f, r0	; 63
     f62:	cd bf       	out	0x3d, r28	; 61
     f64:	89 83       	std	Y+1, r24	; 0x01
     f66:	6a 83       	std	Y+2, r22	; 0x02
     f68:	4b 83       	std	Y+3, r20	; 0x03
    if (Copy_u8Value == high)
     f6a:	8b 81       	ldd	r24, Y+3	; 0x03
     f6c:	81 30       	cpi	r24, 0x01	; 1
     f6e:	09 f0       	breq	.+2      	; 0xf72 <DIO_VidSetPinValue+0x22>
     f70:	70 c0       	rjmp	.+224    	; 0x1052 <DIO_VidSetPinValue+0x102>
    {
        switch (Copy_u8Port)
     f72:	89 81       	ldd	r24, Y+1	; 0x01
     f74:	28 2f       	mov	r18, r24
     f76:	30 e0       	ldi	r19, 0x00	; 0
     f78:	3f 83       	std	Y+7, r19	; 0x07
     f7a:	2e 83       	std	Y+6, r18	; 0x06
     f7c:	8e 81       	ldd	r24, Y+6	; 0x06
     f7e:	9f 81       	ldd	r25, Y+7	; 0x07
     f80:	82 30       	cpi	r24, 0x02	; 2
     f82:	91 05       	cpc	r25, r1
     f84:	51 f1       	breq	.+84     	; 0xfda <DIO_VidSetPinValue+0x8a>
     f86:	2e 81       	ldd	r18, Y+6	; 0x06
     f88:	3f 81       	ldd	r19, Y+7	; 0x07
     f8a:	23 30       	cpi	r18, 0x03	; 3
     f8c:	31 05       	cpc	r19, r1
     f8e:	34 f4       	brge	.+12     	; 0xf9c <DIO_VidSetPinValue+0x4c>
     f90:	8e 81       	ldd	r24, Y+6	; 0x06
     f92:	9f 81       	ldd	r25, Y+7	; 0x07
     f94:	81 30       	cpi	r24, 0x01	; 1
     f96:	91 05       	cpc	r25, r1
     f98:	61 f0       	breq	.+24     	; 0xfb2 <DIO_VidSetPinValue+0x62>
     f9a:	d3 c0       	rjmp	.+422    	; 0x1142 <DIO_VidSetPinValue+0x1f2>
     f9c:	2e 81       	ldd	r18, Y+6	; 0x06
     f9e:	3f 81       	ldd	r19, Y+7	; 0x07
     fa0:	23 30       	cpi	r18, 0x03	; 3
     fa2:	31 05       	cpc	r19, r1
     fa4:	71 f1       	breq	.+92     	; 0x1002 <DIO_VidSetPinValue+0xb2>
     fa6:	8e 81       	ldd	r24, Y+6	; 0x06
     fa8:	9f 81       	ldd	r25, Y+7	; 0x07
     faa:	84 30       	cpi	r24, 0x04	; 4
     fac:	91 05       	cpc	r25, r1
     fae:	e9 f1       	breq	.+122    	; 0x102a <DIO_VidSetPinValue+0xda>
     fb0:	c8 c0       	rjmp	.+400    	; 0x1142 <DIO_VidSetPinValue+0x1f2>
        {

        case (Port_A):
            SET_BIT(PORTA, Copy_u8Pin);
     fb2:	ab e3       	ldi	r26, 0x3B	; 59
     fb4:	b0 e0       	ldi	r27, 0x00	; 0
     fb6:	eb e3       	ldi	r30, 0x3B	; 59
     fb8:	f0 e0       	ldi	r31, 0x00	; 0
     fba:	80 81       	ld	r24, Z
     fbc:	48 2f       	mov	r20, r24
     fbe:	8a 81       	ldd	r24, Y+2	; 0x02
     fc0:	28 2f       	mov	r18, r24
     fc2:	30 e0       	ldi	r19, 0x00	; 0
     fc4:	81 e0       	ldi	r24, 0x01	; 1
     fc6:	90 e0       	ldi	r25, 0x00	; 0
     fc8:	02 2e       	mov	r0, r18
     fca:	02 c0       	rjmp	.+4      	; 0xfd0 <DIO_VidSetPinValue+0x80>
     fcc:	88 0f       	add	r24, r24
     fce:	99 1f       	adc	r25, r25
     fd0:	0a 94       	dec	r0
     fd2:	e2 f7       	brpl	.-8      	; 0xfcc <DIO_VidSetPinValue+0x7c>
     fd4:	84 2b       	or	r24, r20
     fd6:	8c 93       	st	X, r24
     fd8:	b4 c0       	rjmp	.+360    	; 0x1142 <DIO_VidSetPinValue+0x1f2>
            break;
        case (Port_B):
            SET_BIT(PORTB, Copy_u8Pin);
     fda:	a8 e3       	ldi	r26, 0x38	; 56
     fdc:	b0 e0       	ldi	r27, 0x00	; 0
     fde:	e8 e3       	ldi	r30, 0x38	; 56
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	48 2f       	mov	r20, r24
     fe6:	8a 81       	ldd	r24, Y+2	; 0x02
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	81 e0       	ldi	r24, 0x01	; 1
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	02 2e       	mov	r0, r18
     ff2:	02 c0       	rjmp	.+4      	; 0xff8 <DIO_VidSetPinValue+0xa8>
     ff4:	88 0f       	add	r24, r24
     ff6:	99 1f       	adc	r25, r25
     ff8:	0a 94       	dec	r0
     ffa:	e2 f7       	brpl	.-8      	; 0xff4 <DIO_VidSetPinValue+0xa4>
     ffc:	84 2b       	or	r24, r20
     ffe:	8c 93       	st	X, r24
    1000:	a0 c0       	rjmp	.+320    	; 0x1142 <DIO_VidSetPinValue+0x1f2>
            break;
        case (Port_C):
            SET_BIT(PORTC, Copy_u8Pin);
    1002:	a5 e3       	ldi	r26, 0x35	; 53
    1004:	b0 e0       	ldi	r27, 0x00	; 0
    1006:	e5 e3       	ldi	r30, 0x35	; 53
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	48 2f       	mov	r20, r24
    100e:	8a 81       	ldd	r24, Y+2	; 0x02
    1010:	28 2f       	mov	r18, r24
    1012:	30 e0       	ldi	r19, 0x00	; 0
    1014:	81 e0       	ldi	r24, 0x01	; 1
    1016:	90 e0       	ldi	r25, 0x00	; 0
    1018:	02 2e       	mov	r0, r18
    101a:	02 c0       	rjmp	.+4      	; 0x1020 <DIO_VidSetPinValue+0xd0>
    101c:	88 0f       	add	r24, r24
    101e:	99 1f       	adc	r25, r25
    1020:	0a 94       	dec	r0
    1022:	e2 f7       	brpl	.-8      	; 0x101c <DIO_VidSetPinValue+0xcc>
    1024:	84 2b       	or	r24, r20
    1026:	8c 93       	st	X, r24
    1028:	8c c0       	rjmp	.+280    	; 0x1142 <DIO_VidSetPinValue+0x1f2>
            break;
        case (Port_D):
            SET_BIT(PORTD, Copy_u8Pin);
    102a:	a2 e3       	ldi	r26, 0x32	; 50
    102c:	b0 e0       	ldi	r27, 0x00	; 0
    102e:	e2 e3       	ldi	r30, 0x32	; 50
    1030:	f0 e0       	ldi	r31, 0x00	; 0
    1032:	80 81       	ld	r24, Z
    1034:	48 2f       	mov	r20, r24
    1036:	8a 81       	ldd	r24, Y+2	; 0x02
    1038:	28 2f       	mov	r18, r24
    103a:	30 e0       	ldi	r19, 0x00	; 0
    103c:	81 e0       	ldi	r24, 0x01	; 1
    103e:	90 e0       	ldi	r25, 0x00	; 0
    1040:	02 2e       	mov	r0, r18
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <DIO_VidSetPinValue+0xf8>
    1044:	88 0f       	add	r24, r24
    1046:	99 1f       	adc	r25, r25
    1048:	0a 94       	dec	r0
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <DIO_VidSetPinValue+0xf4>
    104c:	84 2b       	or	r24, r20
    104e:	8c 93       	st	X, r24
    1050:	78 c0       	rjmp	.+240    	; 0x1142 <DIO_VidSetPinValue+0x1f2>
            break;
        }
    }

    else if (Copy_u8Value == low)
    1052:	8b 81       	ldd	r24, Y+3	; 0x03
    1054:	88 23       	and	r24, r24
    1056:	09 f0       	breq	.+2      	; 0x105a <DIO_VidSetPinValue+0x10a>
    1058:	74 c0       	rjmp	.+232    	; 0x1142 <DIO_VidSetPinValue+0x1f2>
    {
        switch (Copy_u8Port)
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	28 2f       	mov	r18, r24
    105e:	30 e0       	ldi	r19, 0x00	; 0
    1060:	3d 83       	std	Y+5, r19	; 0x05
    1062:	2c 83       	std	Y+4, r18	; 0x04
    1064:	8c 81       	ldd	r24, Y+4	; 0x04
    1066:	9d 81       	ldd	r25, Y+5	; 0x05
    1068:	82 30       	cpi	r24, 0x02	; 2
    106a:	91 05       	cpc	r25, r1
    106c:	61 f1       	breq	.+88     	; 0x10c6 <DIO_VidSetPinValue+0x176>
    106e:	2c 81       	ldd	r18, Y+4	; 0x04
    1070:	3d 81       	ldd	r19, Y+5	; 0x05
    1072:	23 30       	cpi	r18, 0x03	; 3
    1074:	31 05       	cpc	r19, r1
    1076:	34 f4       	brge	.+12     	; 0x1084 <DIO_VidSetPinValue+0x134>
    1078:	8c 81       	ldd	r24, Y+4	; 0x04
    107a:	9d 81       	ldd	r25, Y+5	; 0x05
    107c:	81 30       	cpi	r24, 0x01	; 1
    107e:	91 05       	cpc	r25, r1
    1080:	69 f0       	breq	.+26     	; 0x109c <DIO_VidSetPinValue+0x14c>
    1082:	5f c0       	rjmp	.+190    	; 0x1142 <DIO_VidSetPinValue+0x1f2>
    1084:	2c 81       	ldd	r18, Y+4	; 0x04
    1086:	3d 81       	ldd	r19, Y+5	; 0x05
    1088:	23 30       	cpi	r18, 0x03	; 3
    108a:	31 05       	cpc	r19, r1
    108c:	89 f1       	breq	.+98     	; 0x10f0 <DIO_VidSetPinValue+0x1a0>
    108e:	8c 81       	ldd	r24, Y+4	; 0x04
    1090:	9d 81       	ldd	r25, Y+5	; 0x05
    1092:	84 30       	cpi	r24, 0x04	; 4
    1094:	91 05       	cpc	r25, r1
    1096:	09 f4       	brne	.+2      	; 0x109a <DIO_VidSetPinValue+0x14a>
    1098:	40 c0       	rjmp	.+128    	; 0x111a <DIO_VidSetPinValue+0x1ca>
    109a:	53 c0       	rjmp	.+166    	; 0x1142 <DIO_VidSetPinValue+0x1f2>
        {

        case (Port_A):
            CLR_BIT(PORTA, Copy_u8Pin);
    109c:	ab e3       	ldi	r26, 0x3B	; 59
    109e:	b0 e0       	ldi	r27, 0x00	; 0
    10a0:	eb e3       	ldi	r30, 0x3B	; 59
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	80 81       	ld	r24, Z
    10a6:	48 2f       	mov	r20, r24
    10a8:	8a 81       	ldd	r24, Y+2	; 0x02
    10aa:	28 2f       	mov	r18, r24
    10ac:	30 e0       	ldi	r19, 0x00	; 0
    10ae:	81 e0       	ldi	r24, 0x01	; 1
    10b0:	90 e0       	ldi	r25, 0x00	; 0
    10b2:	02 2e       	mov	r0, r18
    10b4:	02 c0       	rjmp	.+4      	; 0x10ba <DIO_VidSetPinValue+0x16a>
    10b6:	88 0f       	add	r24, r24
    10b8:	99 1f       	adc	r25, r25
    10ba:	0a 94       	dec	r0
    10bc:	e2 f7       	brpl	.-8      	; 0x10b6 <DIO_VidSetPinValue+0x166>
    10be:	80 95       	com	r24
    10c0:	84 23       	and	r24, r20
    10c2:	8c 93       	st	X, r24
    10c4:	3e c0       	rjmp	.+124    	; 0x1142 <DIO_VidSetPinValue+0x1f2>
            break;
        case (Port_B):
            CLR_BIT(PORTB, Copy_u8Pin);
    10c6:	a8 e3       	ldi	r26, 0x38	; 56
    10c8:	b0 e0       	ldi	r27, 0x00	; 0
    10ca:	e8 e3       	ldi	r30, 0x38	; 56
    10cc:	f0 e0       	ldi	r31, 0x00	; 0
    10ce:	80 81       	ld	r24, Z
    10d0:	48 2f       	mov	r20, r24
    10d2:	8a 81       	ldd	r24, Y+2	; 0x02
    10d4:	28 2f       	mov	r18, r24
    10d6:	30 e0       	ldi	r19, 0x00	; 0
    10d8:	81 e0       	ldi	r24, 0x01	; 1
    10da:	90 e0       	ldi	r25, 0x00	; 0
    10dc:	02 2e       	mov	r0, r18
    10de:	02 c0       	rjmp	.+4      	; 0x10e4 <DIO_VidSetPinValue+0x194>
    10e0:	88 0f       	add	r24, r24
    10e2:	99 1f       	adc	r25, r25
    10e4:	0a 94       	dec	r0
    10e6:	e2 f7       	brpl	.-8      	; 0x10e0 <DIO_VidSetPinValue+0x190>
    10e8:	80 95       	com	r24
    10ea:	84 23       	and	r24, r20
    10ec:	8c 93       	st	X, r24
    10ee:	29 c0       	rjmp	.+82     	; 0x1142 <DIO_VidSetPinValue+0x1f2>
            break;
        case (Port_C):
            CLR_BIT(PORTC, Copy_u8Pin);
    10f0:	a5 e3       	ldi	r26, 0x35	; 53
    10f2:	b0 e0       	ldi	r27, 0x00	; 0
    10f4:	e5 e3       	ldi	r30, 0x35	; 53
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	80 81       	ld	r24, Z
    10fa:	48 2f       	mov	r20, r24
    10fc:	8a 81       	ldd	r24, Y+2	; 0x02
    10fe:	28 2f       	mov	r18, r24
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	81 e0       	ldi	r24, 0x01	; 1
    1104:	90 e0       	ldi	r25, 0x00	; 0
    1106:	02 2e       	mov	r0, r18
    1108:	02 c0       	rjmp	.+4      	; 0x110e <DIO_VidSetPinValue+0x1be>
    110a:	88 0f       	add	r24, r24
    110c:	99 1f       	adc	r25, r25
    110e:	0a 94       	dec	r0
    1110:	e2 f7       	brpl	.-8      	; 0x110a <DIO_VidSetPinValue+0x1ba>
    1112:	80 95       	com	r24
    1114:	84 23       	and	r24, r20
    1116:	8c 93       	st	X, r24
    1118:	14 c0       	rjmp	.+40     	; 0x1142 <DIO_VidSetPinValue+0x1f2>
            break;
        case (Port_D):
            CLR_BIT(PORTD, Copy_u8Pin);
    111a:	a2 e3       	ldi	r26, 0x32	; 50
    111c:	b0 e0       	ldi	r27, 0x00	; 0
    111e:	e2 e3       	ldi	r30, 0x32	; 50
    1120:	f0 e0       	ldi	r31, 0x00	; 0
    1122:	80 81       	ld	r24, Z
    1124:	48 2f       	mov	r20, r24
    1126:	8a 81       	ldd	r24, Y+2	; 0x02
    1128:	28 2f       	mov	r18, r24
    112a:	30 e0       	ldi	r19, 0x00	; 0
    112c:	81 e0       	ldi	r24, 0x01	; 1
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	02 2e       	mov	r0, r18
    1132:	02 c0       	rjmp	.+4      	; 0x1138 <DIO_VidSetPinValue+0x1e8>
    1134:	88 0f       	add	r24, r24
    1136:	99 1f       	adc	r25, r25
    1138:	0a 94       	dec	r0
    113a:	e2 f7       	brpl	.-8      	; 0x1134 <DIO_VidSetPinValue+0x1e4>
    113c:	80 95       	com	r24
    113e:	84 23       	and	r24, r20
    1140:	8c 93       	st	X, r24
            break;
        }
    }
}
    1142:	27 96       	adiw	r28, 0x07	; 7
    1144:	0f b6       	in	r0, 0x3f	; 63
    1146:	f8 94       	cli
    1148:	de bf       	out	0x3e, r29	; 62
    114a:	0f be       	out	0x3f, r0	; 63
    114c:	cd bf       	out	0x3d, r28	; 61
    114e:	cf 91       	pop	r28
    1150:	df 91       	pop	r29
    1152:	08 95       	ret

00001154 <DIO_VidSetPinMode>:

void DIO_VidSetPinMode(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Mode) //Setting pin mode to Input or Output
{
    1154:	df 93       	push	r29
    1156:	cf 93       	push	r28
    1158:	cd b7       	in	r28, 0x3d	; 61
    115a:	de b7       	in	r29, 0x3e	; 62
    115c:	27 97       	sbiw	r28, 0x07	; 7
    115e:	0f b6       	in	r0, 0x3f	; 63
    1160:	f8 94       	cli
    1162:	de bf       	out	0x3e, r29	; 62
    1164:	0f be       	out	0x3f, r0	; 63
    1166:	cd bf       	out	0x3d, r28	; 61
    1168:	89 83       	std	Y+1, r24	; 0x01
    116a:	6a 83       	std	Y+2, r22	; 0x02
    116c:	4b 83       	std	Y+3, r20	; 0x03
    //Check for input mode 0 for input
    if (Copy_u8Mode == input)
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	88 23       	and	r24, r24
    1172:	09 f0       	breq	.+2      	; 0x1176 <DIO_VidSetPinMode+0x22>
    1174:	75 c0       	rjmp	.+234    	; 0x1260 <DIO_VidSetPinMode+0x10c>
    {
        //Set pin as input
        switch (Copy_u8Port)
    1176:	89 81       	ldd	r24, Y+1	; 0x01
    1178:	28 2f       	mov	r18, r24
    117a:	30 e0       	ldi	r19, 0x00	; 0
    117c:	3f 83       	std	Y+7, r19	; 0x07
    117e:	2e 83       	std	Y+6, r18	; 0x06
    1180:	8e 81       	ldd	r24, Y+6	; 0x06
    1182:	9f 81       	ldd	r25, Y+7	; 0x07
    1184:	82 30       	cpi	r24, 0x02	; 2
    1186:	91 05       	cpc	r25, r1
    1188:	61 f1       	breq	.+88     	; 0x11e2 <DIO_VidSetPinMode+0x8e>
    118a:	2e 81       	ldd	r18, Y+6	; 0x06
    118c:	3f 81       	ldd	r19, Y+7	; 0x07
    118e:	23 30       	cpi	r18, 0x03	; 3
    1190:	31 05       	cpc	r19, r1
    1192:	34 f4       	brge	.+12     	; 0x11a0 <DIO_VidSetPinMode+0x4c>
    1194:	8e 81       	ldd	r24, Y+6	; 0x06
    1196:	9f 81       	ldd	r25, Y+7	; 0x07
    1198:	81 30       	cpi	r24, 0x01	; 1
    119a:	91 05       	cpc	r25, r1
    119c:	69 f0       	breq	.+26     	; 0x11b8 <DIO_VidSetPinMode+0x64>
    119e:	d3 c0       	rjmp	.+422    	; 0x1346 <DIO_VidSetPinMode+0x1f2>
    11a0:	2e 81       	ldd	r18, Y+6	; 0x06
    11a2:	3f 81       	ldd	r19, Y+7	; 0x07
    11a4:	23 30       	cpi	r18, 0x03	; 3
    11a6:	31 05       	cpc	r19, r1
    11a8:	89 f1       	breq	.+98     	; 0x120c <DIO_VidSetPinMode+0xb8>
    11aa:	8e 81       	ldd	r24, Y+6	; 0x06
    11ac:	9f 81       	ldd	r25, Y+7	; 0x07
    11ae:	84 30       	cpi	r24, 0x04	; 4
    11b0:	91 05       	cpc	r25, r1
    11b2:	09 f4       	brne	.+2      	; 0x11b6 <DIO_VidSetPinMode+0x62>
    11b4:	40 c0       	rjmp	.+128    	; 0x1236 <DIO_VidSetPinMode+0xe2>
    11b6:	c7 c0       	rjmp	.+398    	; 0x1346 <DIO_VidSetPinMode+0x1f2>
        {

        case (Port_A):
            CLR_BIT(DDRA, Copy_u8Pin);
    11b8:	aa e3       	ldi	r26, 0x3A	; 58
    11ba:	b0 e0       	ldi	r27, 0x00	; 0
    11bc:	ea e3       	ldi	r30, 0x3A	; 58
    11be:	f0 e0       	ldi	r31, 0x00	; 0
    11c0:	80 81       	ld	r24, Z
    11c2:	48 2f       	mov	r20, r24
    11c4:	8a 81       	ldd	r24, Y+2	; 0x02
    11c6:	28 2f       	mov	r18, r24
    11c8:	30 e0       	ldi	r19, 0x00	; 0
    11ca:	81 e0       	ldi	r24, 0x01	; 1
    11cc:	90 e0       	ldi	r25, 0x00	; 0
    11ce:	02 2e       	mov	r0, r18
    11d0:	02 c0       	rjmp	.+4      	; 0x11d6 <DIO_VidSetPinMode+0x82>
    11d2:	88 0f       	add	r24, r24
    11d4:	99 1f       	adc	r25, r25
    11d6:	0a 94       	dec	r0
    11d8:	e2 f7       	brpl	.-8      	; 0x11d2 <DIO_VidSetPinMode+0x7e>
    11da:	80 95       	com	r24
    11dc:	84 23       	and	r24, r20
    11de:	8c 93       	st	X, r24
    11e0:	b2 c0       	rjmp	.+356    	; 0x1346 <DIO_VidSetPinMode+0x1f2>
            break;
        case (Port_B):
            CLR_BIT(DDRB, Copy_u8Pin);
    11e2:	a7 e3       	ldi	r26, 0x37	; 55
    11e4:	b0 e0       	ldi	r27, 0x00	; 0
    11e6:	e7 e3       	ldi	r30, 0x37	; 55
    11e8:	f0 e0       	ldi	r31, 0x00	; 0
    11ea:	80 81       	ld	r24, Z
    11ec:	48 2f       	mov	r20, r24
    11ee:	8a 81       	ldd	r24, Y+2	; 0x02
    11f0:	28 2f       	mov	r18, r24
    11f2:	30 e0       	ldi	r19, 0x00	; 0
    11f4:	81 e0       	ldi	r24, 0x01	; 1
    11f6:	90 e0       	ldi	r25, 0x00	; 0
    11f8:	02 2e       	mov	r0, r18
    11fa:	02 c0       	rjmp	.+4      	; 0x1200 <DIO_VidSetPinMode+0xac>
    11fc:	88 0f       	add	r24, r24
    11fe:	99 1f       	adc	r25, r25
    1200:	0a 94       	dec	r0
    1202:	e2 f7       	brpl	.-8      	; 0x11fc <DIO_VidSetPinMode+0xa8>
    1204:	80 95       	com	r24
    1206:	84 23       	and	r24, r20
    1208:	8c 93       	st	X, r24
    120a:	9d c0       	rjmp	.+314    	; 0x1346 <DIO_VidSetPinMode+0x1f2>
            break;
        case (Port_C):
            CLR_BIT(DDRC, Copy_u8Pin);
    120c:	a4 e3       	ldi	r26, 0x34	; 52
    120e:	b0 e0       	ldi	r27, 0x00	; 0
    1210:	e4 e3       	ldi	r30, 0x34	; 52
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	48 2f       	mov	r20, r24
    1218:	8a 81       	ldd	r24, Y+2	; 0x02
    121a:	28 2f       	mov	r18, r24
    121c:	30 e0       	ldi	r19, 0x00	; 0
    121e:	81 e0       	ldi	r24, 0x01	; 1
    1220:	90 e0       	ldi	r25, 0x00	; 0
    1222:	02 2e       	mov	r0, r18
    1224:	02 c0       	rjmp	.+4      	; 0x122a <DIO_VidSetPinMode+0xd6>
    1226:	88 0f       	add	r24, r24
    1228:	99 1f       	adc	r25, r25
    122a:	0a 94       	dec	r0
    122c:	e2 f7       	brpl	.-8      	; 0x1226 <DIO_VidSetPinMode+0xd2>
    122e:	80 95       	com	r24
    1230:	84 23       	and	r24, r20
    1232:	8c 93       	st	X, r24
    1234:	88 c0       	rjmp	.+272    	; 0x1346 <DIO_VidSetPinMode+0x1f2>
            break;
        case (Port_D):
            CLR_BIT(DDRD, Copy_u8Pin);
    1236:	a1 e3       	ldi	r26, 0x31	; 49
    1238:	b0 e0       	ldi	r27, 0x00	; 0
    123a:	e1 e3       	ldi	r30, 0x31	; 49
    123c:	f0 e0       	ldi	r31, 0x00	; 0
    123e:	80 81       	ld	r24, Z
    1240:	48 2f       	mov	r20, r24
    1242:	8a 81       	ldd	r24, Y+2	; 0x02
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	81 e0       	ldi	r24, 0x01	; 1
    124a:	90 e0       	ldi	r25, 0x00	; 0
    124c:	02 2e       	mov	r0, r18
    124e:	02 c0       	rjmp	.+4      	; 0x1254 <DIO_VidSetPinMode+0x100>
    1250:	88 0f       	add	r24, r24
    1252:	99 1f       	adc	r25, r25
    1254:	0a 94       	dec	r0
    1256:	e2 f7       	brpl	.-8      	; 0x1250 <DIO_VidSetPinMode+0xfc>
    1258:	80 95       	com	r24
    125a:	84 23       	and	r24, r20
    125c:	8c 93       	st	X, r24
    125e:	73 c0       	rjmp	.+230    	; 0x1346 <DIO_VidSetPinMode+0x1f2>
            break;
        }
    }
    //check for mode 1 for output */

    else if (Copy_u8Mode == output)
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	81 30       	cpi	r24, 0x01	; 1
    1264:	09 f0       	breq	.+2      	; 0x1268 <DIO_VidSetPinMode+0x114>
    1266:	6f c0       	rjmp	.+222    	; 0x1346 <DIO_VidSetPinMode+0x1f2>
    {

        switch (Copy_u8Port)
    1268:	89 81       	ldd	r24, Y+1	; 0x01
    126a:	28 2f       	mov	r18, r24
    126c:	30 e0       	ldi	r19, 0x00	; 0
    126e:	3d 83       	std	Y+5, r19	; 0x05
    1270:	2c 83       	std	Y+4, r18	; 0x04
    1272:	8c 81       	ldd	r24, Y+4	; 0x04
    1274:	9d 81       	ldd	r25, Y+5	; 0x05
    1276:	82 30       	cpi	r24, 0x02	; 2
    1278:	91 05       	cpc	r25, r1
    127a:	51 f1       	breq	.+84     	; 0x12d0 <DIO_VidSetPinMode+0x17c>
    127c:	2c 81       	ldd	r18, Y+4	; 0x04
    127e:	3d 81       	ldd	r19, Y+5	; 0x05
    1280:	23 30       	cpi	r18, 0x03	; 3
    1282:	31 05       	cpc	r19, r1
    1284:	34 f4       	brge	.+12     	; 0x1292 <DIO_VidSetPinMode+0x13e>
    1286:	8c 81       	ldd	r24, Y+4	; 0x04
    1288:	9d 81       	ldd	r25, Y+5	; 0x05
    128a:	81 30       	cpi	r24, 0x01	; 1
    128c:	91 05       	cpc	r25, r1
    128e:	61 f0       	breq	.+24     	; 0x12a8 <DIO_VidSetPinMode+0x154>
    1290:	5a c0       	rjmp	.+180    	; 0x1346 <DIO_VidSetPinMode+0x1f2>
    1292:	2c 81       	ldd	r18, Y+4	; 0x04
    1294:	3d 81       	ldd	r19, Y+5	; 0x05
    1296:	23 30       	cpi	r18, 0x03	; 3
    1298:	31 05       	cpc	r19, r1
    129a:	71 f1       	breq	.+92     	; 0x12f8 <DIO_VidSetPinMode+0x1a4>
    129c:	8c 81       	ldd	r24, Y+4	; 0x04
    129e:	9d 81       	ldd	r25, Y+5	; 0x05
    12a0:	84 30       	cpi	r24, 0x04	; 4
    12a2:	91 05       	cpc	r25, r1
    12a4:	e9 f1       	breq	.+122    	; 0x1320 <DIO_VidSetPinMode+0x1cc>
    12a6:	4f c0       	rjmp	.+158    	; 0x1346 <DIO_VidSetPinMode+0x1f2>
        {
            //Set pin as output
        case (Port_A):
            SET_BIT(DDRA, Copy_u8Pin);
    12a8:	aa e3       	ldi	r26, 0x3A	; 58
    12aa:	b0 e0       	ldi	r27, 0x00	; 0
    12ac:	ea e3       	ldi	r30, 0x3A	; 58
    12ae:	f0 e0       	ldi	r31, 0x00	; 0
    12b0:	80 81       	ld	r24, Z
    12b2:	48 2f       	mov	r20, r24
    12b4:	8a 81       	ldd	r24, Y+2	; 0x02
    12b6:	28 2f       	mov	r18, r24
    12b8:	30 e0       	ldi	r19, 0x00	; 0
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	90 e0       	ldi	r25, 0x00	; 0
    12be:	02 2e       	mov	r0, r18
    12c0:	02 c0       	rjmp	.+4      	; 0x12c6 <DIO_VidSetPinMode+0x172>
    12c2:	88 0f       	add	r24, r24
    12c4:	99 1f       	adc	r25, r25
    12c6:	0a 94       	dec	r0
    12c8:	e2 f7       	brpl	.-8      	; 0x12c2 <DIO_VidSetPinMode+0x16e>
    12ca:	84 2b       	or	r24, r20
    12cc:	8c 93       	st	X, r24
    12ce:	3b c0       	rjmp	.+118    	; 0x1346 <DIO_VidSetPinMode+0x1f2>
            break;
        case (Port_B):
            SET_BIT(DDRB, Copy_u8Pin);
    12d0:	a7 e3       	ldi	r26, 0x37	; 55
    12d2:	b0 e0       	ldi	r27, 0x00	; 0
    12d4:	e7 e3       	ldi	r30, 0x37	; 55
    12d6:	f0 e0       	ldi	r31, 0x00	; 0
    12d8:	80 81       	ld	r24, Z
    12da:	48 2f       	mov	r20, r24
    12dc:	8a 81       	ldd	r24, Y+2	; 0x02
    12de:	28 2f       	mov	r18, r24
    12e0:	30 e0       	ldi	r19, 0x00	; 0
    12e2:	81 e0       	ldi	r24, 0x01	; 1
    12e4:	90 e0       	ldi	r25, 0x00	; 0
    12e6:	02 2e       	mov	r0, r18
    12e8:	02 c0       	rjmp	.+4      	; 0x12ee <DIO_VidSetPinMode+0x19a>
    12ea:	88 0f       	add	r24, r24
    12ec:	99 1f       	adc	r25, r25
    12ee:	0a 94       	dec	r0
    12f0:	e2 f7       	brpl	.-8      	; 0x12ea <DIO_VidSetPinMode+0x196>
    12f2:	84 2b       	or	r24, r20
    12f4:	8c 93       	st	X, r24
    12f6:	27 c0       	rjmp	.+78     	; 0x1346 <DIO_VidSetPinMode+0x1f2>
            break;
        case (Port_C):
            SET_BIT(DDRC, Copy_u8Pin);
    12f8:	a4 e3       	ldi	r26, 0x34	; 52
    12fa:	b0 e0       	ldi	r27, 0x00	; 0
    12fc:	e4 e3       	ldi	r30, 0x34	; 52
    12fe:	f0 e0       	ldi	r31, 0x00	; 0
    1300:	80 81       	ld	r24, Z
    1302:	48 2f       	mov	r20, r24
    1304:	8a 81       	ldd	r24, Y+2	; 0x02
    1306:	28 2f       	mov	r18, r24
    1308:	30 e0       	ldi	r19, 0x00	; 0
    130a:	81 e0       	ldi	r24, 0x01	; 1
    130c:	90 e0       	ldi	r25, 0x00	; 0
    130e:	02 2e       	mov	r0, r18
    1310:	02 c0       	rjmp	.+4      	; 0x1316 <DIO_VidSetPinMode+0x1c2>
    1312:	88 0f       	add	r24, r24
    1314:	99 1f       	adc	r25, r25
    1316:	0a 94       	dec	r0
    1318:	e2 f7       	brpl	.-8      	; 0x1312 <DIO_VidSetPinMode+0x1be>
    131a:	84 2b       	or	r24, r20
    131c:	8c 93       	st	X, r24
    131e:	13 c0       	rjmp	.+38     	; 0x1346 <DIO_VidSetPinMode+0x1f2>
            break;
        case (Port_D):
            SET_BIT(DDRD, Copy_u8Pin);
    1320:	a1 e3       	ldi	r26, 0x31	; 49
    1322:	b0 e0       	ldi	r27, 0x00	; 0
    1324:	e1 e3       	ldi	r30, 0x31	; 49
    1326:	f0 e0       	ldi	r31, 0x00	; 0
    1328:	80 81       	ld	r24, Z
    132a:	48 2f       	mov	r20, r24
    132c:	8a 81       	ldd	r24, Y+2	; 0x02
    132e:	28 2f       	mov	r18, r24
    1330:	30 e0       	ldi	r19, 0x00	; 0
    1332:	81 e0       	ldi	r24, 0x01	; 1
    1334:	90 e0       	ldi	r25, 0x00	; 0
    1336:	02 2e       	mov	r0, r18
    1338:	02 c0       	rjmp	.+4      	; 0x133e <DIO_VidSetPinMode+0x1ea>
    133a:	88 0f       	add	r24, r24
    133c:	99 1f       	adc	r25, r25
    133e:	0a 94       	dec	r0
    1340:	e2 f7       	brpl	.-8      	; 0x133a <DIO_VidSetPinMode+0x1e6>
    1342:	84 2b       	or	r24, r20
    1344:	8c 93       	st	X, r24
            break;
        }
    }
}
    1346:	27 96       	adiw	r28, 0x07	; 7
    1348:	0f b6       	in	r0, 0x3f	; 63
    134a:	f8 94       	cli
    134c:	de bf       	out	0x3e, r29	; 62
    134e:	0f be       	out	0x3f, r0	; 63
    1350:	cd bf       	out	0x3d, r28	; 61
    1352:	cf 91       	pop	r28
    1354:	df 91       	pop	r29
    1356:	08 95       	ret

00001358 <DIO_VidGetPinValue>:

void DIO_VidGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_Pu8PinValue) //Getting current pin value
{
    1358:	df 93       	push	r29
    135a:	cf 93       	push	r28
    135c:	00 d0       	rcall	.+0      	; 0x135e <DIO_VidGetPinValue+0x6>
    135e:	00 d0       	rcall	.+0      	; 0x1360 <DIO_VidGetPinValue+0x8>
    1360:	00 d0       	rcall	.+0      	; 0x1362 <DIO_VidGetPinValue+0xa>
    1362:	cd b7       	in	r28, 0x3d	; 61
    1364:	de b7       	in	r29, 0x3e	; 62
    1366:	89 83       	std	Y+1, r24	; 0x01
    1368:	6a 83       	std	Y+2, r22	; 0x02
    136a:	5c 83       	std	Y+4, r21	; 0x04
    136c:	4b 83       	std	Y+3, r20	; 0x03

    switch (Copy_u8Port)
    136e:	89 81       	ldd	r24, Y+1	; 0x01
    1370:	28 2f       	mov	r18, r24
    1372:	30 e0       	ldi	r19, 0x00	; 0
    1374:	3e 83       	std	Y+6, r19	; 0x06
    1376:	2d 83       	std	Y+5, r18	; 0x05
    1378:	4d 81       	ldd	r20, Y+5	; 0x05
    137a:	5e 81       	ldd	r21, Y+6	; 0x06
    137c:	42 30       	cpi	r20, 0x02	; 2
    137e:	51 05       	cpc	r21, r1
    1380:	59 f1       	breq	.+86     	; 0x13d8 <DIO_VidGetPinValue+0x80>
    1382:	8d 81       	ldd	r24, Y+5	; 0x05
    1384:	9e 81       	ldd	r25, Y+6	; 0x06
    1386:	83 30       	cpi	r24, 0x03	; 3
    1388:	91 05       	cpc	r25, r1
    138a:	34 f4       	brge	.+12     	; 0x1398 <DIO_VidGetPinValue+0x40>
    138c:	2d 81       	ldd	r18, Y+5	; 0x05
    138e:	3e 81       	ldd	r19, Y+6	; 0x06
    1390:	21 30       	cpi	r18, 0x01	; 1
    1392:	31 05       	cpc	r19, r1
    1394:	69 f0       	breq	.+26     	; 0x13b0 <DIO_VidGetPinValue+0x58>
    1396:	5b c0       	rjmp	.+182    	; 0x144e <DIO_VidGetPinValue+0xf6>
    1398:	4d 81       	ldd	r20, Y+5	; 0x05
    139a:	5e 81       	ldd	r21, Y+6	; 0x06
    139c:	43 30       	cpi	r20, 0x03	; 3
    139e:	51 05       	cpc	r21, r1
    13a0:	79 f1       	breq	.+94     	; 0x1400 <DIO_VidGetPinValue+0xa8>
    13a2:	8d 81       	ldd	r24, Y+5	; 0x05
    13a4:	9e 81       	ldd	r25, Y+6	; 0x06
    13a6:	84 30       	cpi	r24, 0x04	; 4
    13a8:	91 05       	cpc	r25, r1
    13aa:	09 f4       	brne	.+2      	; 0x13ae <DIO_VidGetPinValue+0x56>
    13ac:	3d c0       	rjmp	.+122    	; 0x1428 <DIO_VidGetPinValue+0xd0>
    13ae:	4f c0       	rjmp	.+158    	; 0x144e <DIO_VidGetPinValue+0xf6>
    {
        //Set pin as output
    case (Port_A):
        *Copy_Pu8PinValue = GET_BIT(PINA, Copy_u8Pin);
    13b0:	e9 e3       	ldi	r30, 0x39	; 57
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	28 2f       	mov	r18, r24
    13b8:	30 e0       	ldi	r19, 0x00	; 0
    13ba:	8a 81       	ldd	r24, Y+2	; 0x02
    13bc:	88 2f       	mov	r24, r24
    13be:	90 e0       	ldi	r25, 0x00	; 0
    13c0:	a9 01       	movw	r20, r18
    13c2:	02 c0       	rjmp	.+4      	; 0x13c8 <DIO_VidGetPinValue+0x70>
    13c4:	55 95       	asr	r21
    13c6:	47 95       	ror	r20
    13c8:	8a 95       	dec	r24
    13ca:	e2 f7       	brpl	.-8      	; 0x13c4 <DIO_VidGetPinValue+0x6c>
    13cc:	ca 01       	movw	r24, r20
    13ce:	81 70       	andi	r24, 0x01	; 1
    13d0:	eb 81       	ldd	r30, Y+3	; 0x03
    13d2:	fc 81       	ldd	r31, Y+4	; 0x04
    13d4:	80 83       	st	Z, r24
    13d6:	3b c0       	rjmp	.+118    	; 0x144e <DIO_VidGetPinValue+0xf6>
        break;
    case (Port_B):
        *Copy_Pu8PinValue = GET_BIT(PINB, Copy_u8Pin);
    13d8:	e6 e3       	ldi	r30, 0x36	; 54
    13da:	f0 e0       	ldi	r31, 0x00	; 0
    13dc:	80 81       	ld	r24, Z
    13de:	28 2f       	mov	r18, r24
    13e0:	30 e0       	ldi	r19, 0x00	; 0
    13e2:	8a 81       	ldd	r24, Y+2	; 0x02
    13e4:	88 2f       	mov	r24, r24
    13e6:	90 e0       	ldi	r25, 0x00	; 0
    13e8:	a9 01       	movw	r20, r18
    13ea:	02 c0       	rjmp	.+4      	; 0x13f0 <DIO_VidGetPinValue+0x98>
    13ec:	55 95       	asr	r21
    13ee:	47 95       	ror	r20
    13f0:	8a 95       	dec	r24
    13f2:	e2 f7       	brpl	.-8      	; 0x13ec <DIO_VidGetPinValue+0x94>
    13f4:	ca 01       	movw	r24, r20
    13f6:	81 70       	andi	r24, 0x01	; 1
    13f8:	eb 81       	ldd	r30, Y+3	; 0x03
    13fa:	fc 81       	ldd	r31, Y+4	; 0x04
    13fc:	80 83       	st	Z, r24
    13fe:	27 c0       	rjmp	.+78     	; 0x144e <DIO_VidGetPinValue+0xf6>
        break;
    case (Port_C):
        *Copy_Pu8PinValue = GET_BIT(PINC, Copy_u8Pin);
    1400:	e3 e3       	ldi	r30, 0x33	; 51
    1402:	f0 e0       	ldi	r31, 0x00	; 0
    1404:	80 81       	ld	r24, Z
    1406:	28 2f       	mov	r18, r24
    1408:	30 e0       	ldi	r19, 0x00	; 0
    140a:	8a 81       	ldd	r24, Y+2	; 0x02
    140c:	88 2f       	mov	r24, r24
    140e:	90 e0       	ldi	r25, 0x00	; 0
    1410:	a9 01       	movw	r20, r18
    1412:	02 c0       	rjmp	.+4      	; 0x1418 <DIO_VidGetPinValue+0xc0>
    1414:	55 95       	asr	r21
    1416:	47 95       	ror	r20
    1418:	8a 95       	dec	r24
    141a:	e2 f7       	brpl	.-8      	; 0x1414 <DIO_VidGetPinValue+0xbc>
    141c:	ca 01       	movw	r24, r20
    141e:	81 70       	andi	r24, 0x01	; 1
    1420:	eb 81       	ldd	r30, Y+3	; 0x03
    1422:	fc 81       	ldd	r31, Y+4	; 0x04
    1424:	80 83       	st	Z, r24
    1426:	13 c0       	rjmp	.+38     	; 0x144e <DIO_VidGetPinValue+0xf6>
        break;
    case (Port_D):
        *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
    1428:	e0 e3       	ldi	r30, 0x30	; 48
    142a:	f0 e0       	ldi	r31, 0x00	; 0
    142c:	80 81       	ld	r24, Z
    142e:	28 2f       	mov	r18, r24
    1430:	30 e0       	ldi	r19, 0x00	; 0
    1432:	8a 81       	ldd	r24, Y+2	; 0x02
    1434:	88 2f       	mov	r24, r24
    1436:	90 e0       	ldi	r25, 0x00	; 0
    1438:	a9 01       	movw	r20, r18
    143a:	02 c0       	rjmp	.+4      	; 0x1440 <DIO_VidGetPinValue+0xe8>
    143c:	55 95       	asr	r21
    143e:	47 95       	ror	r20
    1440:	8a 95       	dec	r24
    1442:	e2 f7       	brpl	.-8      	; 0x143c <DIO_VidGetPinValue+0xe4>
    1444:	ca 01       	movw	r24, r20
    1446:	81 70       	andi	r24, 0x01	; 1
    1448:	eb 81       	ldd	r30, Y+3	; 0x03
    144a:	fc 81       	ldd	r31, Y+4	; 0x04
    144c:	80 83       	st	Z, r24
        break;
    }
}
    144e:	26 96       	adiw	r28, 0x06	; 6
    1450:	0f b6       	in	r0, 0x3f	; 63
    1452:	f8 94       	cli
    1454:	de bf       	out	0x3e, r29	; 62
    1456:	0f be       	out	0x3f, r0	; 63
    1458:	cd bf       	out	0x3d, r28	; 61
    145a:	cf 91       	pop	r28
    145c:	df 91       	pop	r29
    145e:	08 95       	ret

00001460 <DIO_VidSetPortValue>:

/*------------------------------------Ports functions------------------------------------------------*/

void DIO_VidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value) //Setting all pins values on port to High or Low  
{
    1460:	df 93       	push	r29
    1462:	cf 93       	push	r28
    1464:	00 d0       	rcall	.+0      	; 0x1466 <DIO_VidSetPortValue+0x6>
    1466:	00 d0       	rcall	.+0      	; 0x1468 <DIO_VidSetPortValue+0x8>
    1468:	cd b7       	in	r28, 0x3d	; 61
    146a:	de b7       	in	r29, 0x3e	; 62
    146c:	89 83       	std	Y+1, r24	; 0x01
    146e:	6a 83       	std	Y+2, r22	; 0x02

    switch (Copy_u8Port)
    1470:	89 81       	ldd	r24, Y+1	; 0x01
    1472:	28 2f       	mov	r18, r24
    1474:	30 e0       	ldi	r19, 0x00	; 0
    1476:	3c 83       	std	Y+4, r19	; 0x04
    1478:	2b 83       	std	Y+3, r18	; 0x03
    147a:	8b 81       	ldd	r24, Y+3	; 0x03
    147c:	9c 81       	ldd	r25, Y+4	; 0x04
    147e:	82 30       	cpi	r24, 0x02	; 2
    1480:	91 05       	cpc	r25, r1
    1482:	d9 f0       	breq	.+54     	; 0x14ba <DIO_VidSetPortValue+0x5a>
    1484:	2b 81       	ldd	r18, Y+3	; 0x03
    1486:	3c 81       	ldd	r19, Y+4	; 0x04
    1488:	23 30       	cpi	r18, 0x03	; 3
    148a:	31 05       	cpc	r19, r1
    148c:	34 f4       	brge	.+12     	; 0x149a <DIO_VidSetPortValue+0x3a>
    148e:	8b 81       	ldd	r24, Y+3	; 0x03
    1490:	9c 81       	ldd	r25, Y+4	; 0x04
    1492:	81 30       	cpi	r24, 0x01	; 1
    1494:	91 05       	cpc	r25, r1
    1496:	61 f0       	breq	.+24     	; 0x14b0 <DIO_VidSetPortValue+0x50>
    1498:	1e c0       	rjmp	.+60     	; 0x14d6 <DIO_VidSetPortValue+0x76>
    149a:	2b 81       	ldd	r18, Y+3	; 0x03
    149c:	3c 81       	ldd	r19, Y+4	; 0x04
    149e:	23 30       	cpi	r18, 0x03	; 3
    14a0:	31 05       	cpc	r19, r1
    14a2:	81 f0       	breq	.+32     	; 0x14c4 <DIO_VidSetPortValue+0x64>
    14a4:	8b 81       	ldd	r24, Y+3	; 0x03
    14a6:	9c 81       	ldd	r25, Y+4	; 0x04
    14a8:	84 30       	cpi	r24, 0x04	; 4
    14aa:	91 05       	cpc	r25, r1
    14ac:	81 f0       	breq	.+32     	; 0x14ce <DIO_VidSetPortValue+0x6e>
    14ae:	13 c0       	rjmp	.+38     	; 0x14d6 <DIO_VidSetPortValue+0x76>
    {
        //Set pin as output
    case (Port_A):
        PORTA = Copy_u8Value;
    14b0:	eb e3       	ldi	r30, 0x3B	; 59
    14b2:	f0 e0       	ldi	r31, 0x00	; 0
    14b4:	8a 81       	ldd	r24, Y+2	; 0x02
    14b6:	80 83       	st	Z, r24
    14b8:	0e c0       	rjmp	.+28     	; 0x14d6 <DIO_VidSetPortValue+0x76>
        break;
    case (Port_B):
        PORTB = Copy_u8Value;
    14ba:	e8 e3       	ldi	r30, 0x38	; 56
    14bc:	f0 e0       	ldi	r31, 0x00	; 0
    14be:	8a 81       	ldd	r24, Y+2	; 0x02
    14c0:	80 83       	st	Z, r24
    14c2:	09 c0       	rjmp	.+18     	; 0x14d6 <DIO_VidSetPortValue+0x76>
        break;
    case (Port_C):
        PORTC = Copy_u8Value;
    14c4:	e5 e3       	ldi	r30, 0x35	; 53
    14c6:	f0 e0       	ldi	r31, 0x00	; 0
    14c8:	8a 81       	ldd	r24, Y+2	; 0x02
    14ca:	80 83       	st	Z, r24
    14cc:	04 c0       	rjmp	.+8      	; 0x14d6 <DIO_VidSetPortValue+0x76>
        break;
    case (Port_D):
        PORTD = Copy_u8Value;
    14ce:	e2 e3       	ldi	r30, 0x32	; 50
    14d0:	f0 e0       	ldi	r31, 0x00	; 0
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	80 83       	st	Z, r24
        break;
    }
}
    14d6:	0f 90       	pop	r0
    14d8:	0f 90       	pop	r0
    14da:	0f 90       	pop	r0
    14dc:	0f 90       	pop	r0
    14de:	cf 91       	pop	r28
    14e0:	df 91       	pop	r29
    14e2:	08 95       	ret

000014e4 <DIO_VidSetPortMode>:

void DIO_VidSetPortMode(u8 Copy_u8Port, u8 Copy_u8Mode) //Setting all pins modes on port to Input or Output
{
    14e4:	df 93       	push	r29
    14e6:	cf 93       	push	r28
    14e8:	00 d0       	rcall	.+0      	; 0x14ea <DIO_VidSetPortMode+0x6>
    14ea:	00 d0       	rcall	.+0      	; 0x14ec <DIO_VidSetPortMode+0x8>
    14ec:	cd b7       	in	r28, 0x3d	; 61
    14ee:	de b7       	in	r29, 0x3e	; 62
    14f0:	89 83       	std	Y+1, r24	; 0x01
    14f2:	6a 83       	std	Y+2, r22	; 0x02

    switch (Copy_u8Port)
    14f4:	89 81       	ldd	r24, Y+1	; 0x01
    14f6:	28 2f       	mov	r18, r24
    14f8:	30 e0       	ldi	r19, 0x00	; 0
    14fa:	3c 83       	std	Y+4, r19	; 0x04
    14fc:	2b 83       	std	Y+3, r18	; 0x03
    14fe:	8b 81       	ldd	r24, Y+3	; 0x03
    1500:	9c 81       	ldd	r25, Y+4	; 0x04
    1502:	82 30       	cpi	r24, 0x02	; 2
    1504:	91 05       	cpc	r25, r1
    1506:	d9 f0       	breq	.+54     	; 0x153e <DIO_VidSetPortMode+0x5a>
    1508:	2b 81       	ldd	r18, Y+3	; 0x03
    150a:	3c 81       	ldd	r19, Y+4	; 0x04
    150c:	23 30       	cpi	r18, 0x03	; 3
    150e:	31 05       	cpc	r19, r1
    1510:	34 f4       	brge	.+12     	; 0x151e <DIO_VidSetPortMode+0x3a>
    1512:	8b 81       	ldd	r24, Y+3	; 0x03
    1514:	9c 81       	ldd	r25, Y+4	; 0x04
    1516:	81 30       	cpi	r24, 0x01	; 1
    1518:	91 05       	cpc	r25, r1
    151a:	61 f0       	breq	.+24     	; 0x1534 <DIO_VidSetPortMode+0x50>
    151c:	1e c0       	rjmp	.+60     	; 0x155a <DIO_VidSetPortMode+0x76>
    151e:	2b 81       	ldd	r18, Y+3	; 0x03
    1520:	3c 81       	ldd	r19, Y+4	; 0x04
    1522:	23 30       	cpi	r18, 0x03	; 3
    1524:	31 05       	cpc	r19, r1
    1526:	81 f0       	breq	.+32     	; 0x1548 <DIO_VidSetPortMode+0x64>
    1528:	8b 81       	ldd	r24, Y+3	; 0x03
    152a:	9c 81       	ldd	r25, Y+4	; 0x04
    152c:	84 30       	cpi	r24, 0x04	; 4
    152e:	91 05       	cpc	r25, r1
    1530:	81 f0       	breq	.+32     	; 0x1552 <DIO_VidSetPortMode+0x6e>
    1532:	13 c0       	rjmp	.+38     	; 0x155a <DIO_VidSetPortMode+0x76>
    {
        /*Set pin as output */
    case (Port_A):
        DDRA = Copy_u8Mode;
    1534:	ea e3       	ldi	r30, 0x3A	; 58
    1536:	f0 e0       	ldi	r31, 0x00	; 0
    1538:	8a 81       	ldd	r24, Y+2	; 0x02
    153a:	80 83       	st	Z, r24
    153c:	0e c0       	rjmp	.+28     	; 0x155a <DIO_VidSetPortMode+0x76>
        break;
    case (Port_B):
        DDRB = Copy_u8Mode;
    153e:	e7 e3       	ldi	r30, 0x37	; 55
    1540:	f0 e0       	ldi	r31, 0x00	; 0
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	80 83       	st	Z, r24
    1546:	09 c0       	rjmp	.+18     	; 0x155a <DIO_VidSetPortMode+0x76>
        break;
    case (Port_C):
        DDRC = Copy_u8Mode;
    1548:	e4 e3       	ldi	r30, 0x34	; 52
    154a:	f0 e0       	ldi	r31, 0x00	; 0
    154c:	8a 81       	ldd	r24, Y+2	; 0x02
    154e:	80 83       	st	Z, r24
    1550:	04 c0       	rjmp	.+8      	; 0x155a <DIO_VidSetPortMode+0x76>
        break;
    case (Port_D):
        DDRD = Copy_u8Mode;
    1552:	e1 e3       	ldi	r30, 0x31	; 49
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	8a 81       	ldd	r24, Y+2	; 0x02
    1558:	80 83       	st	Z, r24
        break;
    }
}
    155a:	0f 90       	pop	r0
    155c:	0f 90       	pop	r0
    155e:	0f 90       	pop	r0
    1560:	0f 90       	pop	r0
    1562:	cf 91       	pop	r28
    1564:	df 91       	pop	r29
    1566:	08 95       	ret

00001568 <DIO_VidGetPortValue>:

void DIO_VidGetPortValue(u8 Copy_u8Port, u8 *Copy_Pu8PortValue) //Getting current pins values on port
{
    1568:	df 93       	push	r29
    156a:	cf 93       	push	r28
    156c:	00 d0       	rcall	.+0      	; 0x156e <DIO_VidGetPortValue+0x6>
    156e:	00 d0       	rcall	.+0      	; 0x1570 <DIO_VidGetPortValue+0x8>
    1570:	0f 92       	push	r0
    1572:	cd b7       	in	r28, 0x3d	; 61
    1574:	de b7       	in	r29, 0x3e	; 62
    1576:	89 83       	std	Y+1, r24	; 0x01
    1578:	7b 83       	std	Y+3, r23	; 0x03
    157a:	6a 83       	std	Y+2, r22	; 0x02

    switch (Copy_u8Port)
    157c:	89 81       	ldd	r24, Y+1	; 0x01
    157e:	28 2f       	mov	r18, r24
    1580:	30 e0       	ldi	r19, 0x00	; 0
    1582:	3d 83       	std	Y+5, r19	; 0x05
    1584:	2c 83       	std	Y+4, r18	; 0x04
    1586:	8c 81       	ldd	r24, Y+4	; 0x04
    1588:	9d 81       	ldd	r25, Y+5	; 0x05
    158a:	82 30       	cpi	r24, 0x02	; 2
    158c:	91 05       	cpc	r25, r1
    158e:	e9 f0       	breq	.+58     	; 0x15ca <DIO_VidGetPortValue+0x62>
    1590:	2c 81       	ldd	r18, Y+4	; 0x04
    1592:	3d 81       	ldd	r19, Y+5	; 0x05
    1594:	23 30       	cpi	r18, 0x03	; 3
    1596:	31 05       	cpc	r19, r1
    1598:	34 f4       	brge	.+12     	; 0x15a6 <DIO_VidGetPortValue+0x3e>
    159a:	8c 81       	ldd	r24, Y+4	; 0x04
    159c:	9d 81       	ldd	r25, Y+5	; 0x05
    159e:	81 30       	cpi	r24, 0x01	; 1
    15a0:	91 05       	cpc	r25, r1
    15a2:	61 f0       	breq	.+24     	; 0x15bc <DIO_VidGetPortValue+0x54>
    15a4:	26 c0       	rjmp	.+76     	; 0x15f2 <DIO_VidGetPortValue+0x8a>
    15a6:	2c 81       	ldd	r18, Y+4	; 0x04
    15a8:	3d 81       	ldd	r19, Y+5	; 0x05
    15aa:	23 30       	cpi	r18, 0x03	; 3
    15ac:	31 05       	cpc	r19, r1
    15ae:	a1 f0       	breq	.+40     	; 0x15d8 <DIO_VidGetPortValue+0x70>
    15b0:	8c 81       	ldd	r24, Y+4	; 0x04
    15b2:	9d 81       	ldd	r25, Y+5	; 0x05
    15b4:	84 30       	cpi	r24, 0x04	; 4
    15b6:	91 05       	cpc	r25, r1
    15b8:	b1 f0       	breq	.+44     	; 0x15e6 <DIO_VidGetPortValue+0x7e>
    15ba:	1b c0       	rjmp	.+54     	; 0x15f2 <DIO_VidGetPortValue+0x8a>
    {
    case (Port_A):
        *Copy_Pu8PortValue = PINA;
    15bc:	e9 e3       	ldi	r30, 0x39	; 57
    15be:	f0 e0       	ldi	r31, 0x00	; 0
    15c0:	80 81       	ld	r24, Z
    15c2:	ea 81       	ldd	r30, Y+2	; 0x02
    15c4:	fb 81       	ldd	r31, Y+3	; 0x03
    15c6:	80 83       	st	Z, r24
    15c8:	14 c0       	rjmp	.+40     	; 0x15f2 <DIO_VidGetPortValue+0x8a>
        break;
    case (Port_B):
        *Copy_Pu8PortValue = PINB;
    15ca:	e6 e3       	ldi	r30, 0x36	; 54
    15cc:	f0 e0       	ldi	r31, 0x00	; 0
    15ce:	80 81       	ld	r24, Z
    15d0:	ea 81       	ldd	r30, Y+2	; 0x02
    15d2:	fb 81       	ldd	r31, Y+3	; 0x03
    15d4:	80 83       	st	Z, r24
    15d6:	0d c0       	rjmp	.+26     	; 0x15f2 <DIO_VidGetPortValue+0x8a>
        break;
    case (Port_C):
        *Copy_Pu8PortValue = PINC;
    15d8:	e3 e3       	ldi	r30, 0x33	; 51
    15da:	f0 e0       	ldi	r31, 0x00	; 0
    15dc:	80 81       	ld	r24, Z
    15de:	ea 81       	ldd	r30, Y+2	; 0x02
    15e0:	fb 81       	ldd	r31, Y+3	; 0x03
    15e2:	80 83       	st	Z, r24
    15e4:	06 c0       	rjmp	.+12     	; 0x15f2 <DIO_VidGetPortValue+0x8a>
        break;
    case (Port_D):
        *Copy_Pu8PortValue = PIND;
    15e6:	e0 e3       	ldi	r30, 0x30	; 48
    15e8:	f0 e0       	ldi	r31, 0x00	; 0
    15ea:	80 81       	ld	r24, Z
    15ec:	ea 81       	ldd	r30, Y+2	; 0x02
    15ee:	fb 81       	ldd	r31, Y+3	; 0x03
    15f0:	80 83       	st	Z, r24
        break;
    }
}
    15f2:	0f 90       	pop	r0
    15f4:	0f 90       	pop	r0
    15f6:	0f 90       	pop	r0
    15f8:	0f 90       	pop	r0
    15fa:	0f 90       	pop	r0
    15fc:	cf 91       	pop	r28
    15fe:	df 91       	pop	r29
    1600:	08 95       	ret

00001602 <SPI_VidInit>:
#include "SPI_private.h"
#include "SPI_config.h"
#include "SPI_interface.h"

void SPI_VidInit()
{
    1602:	df 93       	push	r29
    1604:	cf 93       	push	r28
    1606:	cd b7       	in	r28, 0x3d	; 61
    1608:	de b7       	in	r29, 0x3e	; 62
    if (SPI_CLKPHASE == SPI_SETUP)
    {
        SET_BIT(SPCR, SPCR_CPHA);
    }

    SPCR |= SPI_SPRBITS;
    160a:	ad e2       	ldi	r26, 0x2D	; 45
    160c:	b0 e0       	ldi	r27, 0x00	; 0
    160e:	ed e2       	ldi	r30, 0x2D	; 45
    1610:	f0 e0       	ldi	r31, 0x00	; 0
    1612:	80 81       	ld	r24, Z
    1614:	81 60       	ori	r24, 0x01	; 1
    1616:	8c 93       	st	X, r24

    //if Double SPI Speed is selected
    if (SPI_CLKRATE > 3)
        SET_BIT(SPSR, SPSR_SPI2X);

    SET_BIT(SPCR, SPCR_SPE);
    1618:	ad e2       	ldi	r26, 0x2D	; 45
    161a:	b0 e0       	ldi	r27, 0x00	; 0
    161c:	ed e2       	ldi	r30, 0x2D	; 45
    161e:	f0 e0       	ldi	r31, 0x00	; 0
    1620:	80 81       	ld	r24, Z
    1622:	80 64       	ori	r24, 0x40	; 64
    1624:	8c 93       	st	X, r24
}
    1626:	cf 91       	pop	r28
    1628:	df 91       	pop	r29
    162a:	08 95       	ret

0000162c <SPI_VidSendByte>:

void SPI_VidSendByte(u8 Copy_u8Data)
{
    162c:	df 93       	push	r29
    162e:	cf 93       	push	r28
    1630:	0f 92       	push	r0
    1632:	cd b7       	in	r28, 0x3d	; 61
    1634:	de b7       	in	r29, 0x3e	; 62
    1636:	89 83       	std	Y+1, r24	; 0x01
    SPDR = Copy_u8Data;
    1638:	ef e2       	ldi	r30, 0x2F	; 47
    163a:	f0 e0       	ldi	r31, 0x00	; 0
    163c:	89 81       	ldd	r24, Y+1	; 0x01
    163e:	80 83       	st	Z, r24
    while (GET_BIT(SPSR, SPSR_SPIF) == 0)
    1640:	ee e2       	ldi	r30, 0x2E	; 46
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	88 23       	and	r24, r24
    1648:	dc f7       	brge	.-10     	; 0x1640 <SPI_VidSendByte+0x14>
        ;
}
    164a:	0f 90       	pop	r0
    164c:	cf 91       	pop	r28
    164e:	df 91       	pop	r29
    1650:	08 95       	ret

00001652 <SPI_u8ReceiveByte>:

u8 SPI_u8ReceiveByte()
{
    1652:	df 93       	push	r29
    1654:	cf 93       	push	r28
    1656:	cd b7       	in	r28, 0x3d	; 61
    1658:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(SPSR, SPSR_SPIF) == 0)
    165a:	ee e2       	ldi	r30, 0x2E	; 46
    165c:	f0 e0       	ldi	r31, 0x00	; 0
    165e:	80 81       	ld	r24, Z
    1660:	88 23       	and	r24, r24
    1662:	dc f7       	brge	.-10     	; 0x165a <SPI_u8ReceiveByte+0x8>
        ;
    return SPDR;
    1664:	ef e2       	ldi	r30, 0x2F	; 47
    1666:	f0 e0       	ldi	r31, 0x00	; 0
    1668:	80 81       	ld	r24, Z
}
    166a:	cf 91       	pop	r28
    166c:	df 91       	pop	r29
    166e:	08 95       	ret

00001670 <SPI_u8TranceiveByte>:

u8 SPI_u8TranceiveByte(u8 Copy_u8Data)
{
    1670:	df 93       	push	r29
    1672:	cf 93       	push	r28
    1674:	0f 92       	push	r0
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	89 83       	std	Y+1, r24	; 0x01
    SPDR = Copy_u8Data;
    167c:	ef e2       	ldi	r30, 0x2F	; 47
    167e:	f0 e0       	ldi	r31, 0x00	; 0
    1680:	89 81       	ldd	r24, Y+1	; 0x01
    1682:	80 83       	st	Z, r24
    
    while (GET_BIT(SPSR, SPSR_SPIF) == 0)
    1684:	ee e2       	ldi	r30, 0x2E	; 46
    1686:	f0 e0       	ldi	r31, 0x00	; 0
    1688:	80 81       	ld	r24, Z
    168a:	88 23       	and	r24, r24
    168c:	dc f7       	brge	.-10     	; 0x1684 <SPI_u8TranceiveByte+0x14>
        ;

    return SPDR;
    168e:	ef e2       	ldi	r30, 0x2F	; 47
    1690:	f0 e0       	ldi	r31, 0x00	; 0
    1692:	80 81       	ld	r24, Z
}
    1694:	0f 90       	pop	r0
    1696:	cf 91       	pop	r28
    1698:	df 91       	pop	r29
    169a:	08 95       	ret

0000169c <SPI_VidSendString>:

void SPI_VidSendString(u8 *Copy_String)
{
    169c:	df 93       	push	r29
    169e:	cf 93       	push	r28
    16a0:	00 d0       	rcall	.+0      	; 0x16a2 <SPI_VidSendString+0x6>
    16a2:	cd b7       	in	r28, 0x3d	; 61
    16a4:	de b7       	in	r29, 0x3e	; 62
    16a6:	9a 83       	std	Y+2, r25	; 0x02
    16a8:	89 83       	std	Y+1, r24	; 0x01
    16aa:	0a c0       	rjmp	.+20     	; 0x16c0 <SPI_VidSendString+0x24>
    while (*Copy_String)
    {
        SPI_VidSendByte(*Copy_String);
    16ac:	e9 81       	ldd	r30, Y+1	; 0x01
    16ae:	fa 81       	ldd	r31, Y+2	; 0x02
    16b0:	80 81       	ld	r24, Z
    16b2:	0e 94 16 0b 	call	0x162c	; 0x162c <SPI_VidSendByte>
        Copy_String++;
    16b6:	89 81       	ldd	r24, Y+1	; 0x01
    16b8:	9a 81       	ldd	r25, Y+2	; 0x02
    16ba:	01 96       	adiw	r24, 0x01	; 1
    16bc:	9a 83       	std	Y+2, r25	; 0x02
    16be:	89 83       	std	Y+1, r24	; 0x01
    return SPDR;
}

void SPI_VidSendString(u8 *Copy_String)
{
    while (*Copy_String)
    16c0:	e9 81       	ldd	r30, Y+1	; 0x01
    16c2:	fa 81       	ldd	r31, Y+2	; 0x02
    16c4:	80 81       	ld	r24, Z
    16c6:	88 23       	and	r24, r24
    16c8:	89 f7       	brne	.-30     	; 0x16ac <SPI_VidSendString+0x10>
    {
        SPI_VidSendByte(*Copy_String);
        Copy_String++;
    }
}
    16ca:	0f 90       	pop	r0
    16cc:	0f 90       	pop	r0
    16ce:	cf 91       	pop	r28
    16d0:	df 91       	pop	r29
    16d2:	08 95       	ret

000016d4 <SPI_VidReceiveString>:

void SPI_VidReceiveString(u8 *Copy_String)
{
    16d4:	0f 93       	push	r16
    16d6:	1f 93       	push	r17
    16d8:	df 93       	push	r29
    16da:	cf 93       	push	r28
    16dc:	00 d0       	rcall	.+0      	; 0x16de <SPI_VidReceiveString+0xa>
    16de:	0f 92       	push	r0
    16e0:	cd b7       	in	r28, 0x3d	; 61
    16e2:	de b7       	in	r29, 0x3e	; 62
    16e4:	9b 83       	std	Y+3, r25	; 0x03
    16e6:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0;
    16e8:	19 82       	std	Y+1, r1	; 0x01
    Copy_String[i] = SPI_u8ReceiveByte();
    16ea:	89 81       	ldd	r24, Y+1	; 0x01
    16ec:	28 2f       	mov	r18, r24
    16ee:	30 e0       	ldi	r19, 0x00	; 0
    16f0:	8a 81       	ldd	r24, Y+2	; 0x02
    16f2:	9b 81       	ldd	r25, Y+3	; 0x03
    16f4:	8c 01       	movw	r16, r24
    16f6:	02 0f       	add	r16, r18
    16f8:	13 1f       	adc	r17, r19
    16fa:	0e 94 29 0b 	call	0x1652	; 0x1652 <SPI_u8ReceiveByte>
    16fe:	f8 01       	movw	r30, r16
    1700:	80 83       	st	Z, r24
    1702:	0f c0       	rjmp	.+30     	; 0x1722 <SPI_VidReceiveString+0x4e>
    while (Copy_String[i] != '#')
    {
        i++;
    1704:	89 81       	ldd	r24, Y+1	; 0x01
    1706:	8f 5f       	subi	r24, 0xFF	; 255
    1708:	89 83       	std	Y+1, r24	; 0x01
        Copy_String[i] = SPI_u8ReceiveByte();
    170a:	89 81       	ldd	r24, Y+1	; 0x01
    170c:	28 2f       	mov	r18, r24
    170e:	30 e0       	ldi	r19, 0x00	; 0
    1710:	8a 81       	ldd	r24, Y+2	; 0x02
    1712:	9b 81       	ldd	r25, Y+3	; 0x03
    1714:	8c 01       	movw	r16, r24
    1716:	02 0f       	add	r16, r18
    1718:	13 1f       	adc	r17, r19
    171a:	0e 94 29 0b 	call	0x1652	; 0x1652 <SPI_u8ReceiveByte>
    171e:	f8 01       	movw	r30, r16
    1720:	80 83       	st	Z, r24

void SPI_VidReceiveString(u8 *Copy_String)
{
    u8 i = 0;
    Copy_String[i] = SPI_u8ReceiveByte();
    while (Copy_String[i] != '#')
    1722:	89 81       	ldd	r24, Y+1	; 0x01
    1724:	28 2f       	mov	r18, r24
    1726:	30 e0       	ldi	r19, 0x00	; 0
    1728:	8a 81       	ldd	r24, Y+2	; 0x02
    172a:	9b 81       	ldd	r25, Y+3	; 0x03
    172c:	fc 01       	movw	r30, r24
    172e:	e2 0f       	add	r30, r18
    1730:	f3 1f       	adc	r31, r19
    1732:	80 81       	ld	r24, Z
    1734:	83 32       	cpi	r24, 0x23	; 35
    1736:	31 f7       	brne	.-52     	; 0x1704 <SPI_VidReceiveString+0x30>
    {
        i++;
        Copy_String[i] = SPI_u8ReceiveByte();
    }
    Copy_String[i] = '\0';
    1738:	89 81       	ldd	r24, Y+1	; 0x01
    173a:	28 2f       	mov	r18, r24
    173c:	30 e0       	ldi	r19, 0x00	; 0
    173e:	8a 81       	ldd	r24, Y+2	; 0x02
    1740:	9b 81       	ldd	r25, Y+3	; 0x03
    1742:	fc 01       	movw	r30, r24
    1744:	e2 0f       	add	r30, r18
    1746:	f3 1f       	adc	r31, r19
    1748:	10 82       	st	Z, r1
}
    174a:	0f 90       	pop	r0
    174c:	0f 90       	pop	r0
    174e:	0f 90       	pop	r0
    1750:	cf 91       	pop	r28
    1752:	df 91       	pop	r29
    1754:	1f 91       	pop	r17
    1756:	0f 91       	pop	r16
    1758:	08 95       	ret

0000175a <__vector_12>:

/* The ISR of Serial Transfer Complete */
void __vector_12(void)
{
    175a:	1f 92       	push	r1
    175c:	0f 92       	push	r0
    175e:	0f b6       	in	r0, 0x3f	; 63
    1760:	0f 92       	push	r0
    1762:	11 24       	eor	r1, r1
    1764:	df 93       	push	r29
    1766:	cf 93       	push	r28
    1768:	cd b7       	in	r28, 0x3d	; 61
    176a:	de b7       	in	r29, 0x3e	; 62
}
    176c:	cf 91       	pop	r28
    176e:	df 91       	pop	r29
    1770:	0f 90       	pop	r0
    1772:	0f be       	out	0x3f, r0	; 63
    1774:	0f 90       	pop	r0
    1776:	1f 90       	pop	r1
    1778:	18 95       	reti

0000177a <TMR_VidInit>:
static u16 TMR_u16DutyCycle;

static void (*PVCallBack[TMR_NO_OF_TIMERS])(void) = {NULL, NULL, NULL};

void TMR_VidInit()
{
    177a:	df 93       	push	r29
    177c:	cf 93       	push	r28
    177e:	cd b7       	in	r28, 0x3d	; 61
    1780:	de b7       	in	r29, 0x3e	; 62

    /* Setting the initialization for Timer0 */
    if (TMR_TIMER0_INIT_STATE == TMR_DISABLE)
    {
        CLR_BIT(TCCR0, TCCR0_CS00);
    1782:	a3 e5       	ldi	r26, 0x53	; 83
    1784:	b0 e0       	ldi	r27, 0x00	; 0
    1786:	e3 e5       	ldi	r30, 0x53	; 83
    1788:	f0 e0       	ldi	r31, 0x00	; 0
    178a:	80 81       	ld	r24, Z
    178c:	8e 7f       	andi	r24, 0xFE	; 254
    178e:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, TCCR0_CS01);
    1790:	a3 e5       	ldi	r26, 0x53	; 83
    1792:	b0 e0       	ldi	r27, 0x00	; 0
    1794:	e3 e5       	ldi	r30, 0x53	; 83
    1796:	f0 e0       	ldi	r31, 0x00	; 0
    1798:	80 81       	ld	r24, Z
    179a:	8d 7f       	andi	r24, 0xFD	; 253
    179c:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, TCCR0_CS02);
    179e:	a3 e5       	ldi	r26, 0x53	; 83
    17a0:	b0 e0       	ldi	r27, 0x00	; 0
    17a2:	e3 e5       	ldi	r30, 0x53	; 83
    17a4:	f0 e0       	ldi	r31, 0x00	; 0
    17a6:	80 81       	ld	r24, Z
    17a8:	8b 7f       	andi	r24, 0xFB	; 251
    17aa:	8c 93       	st	X, r24
                SET_BIT(TIMSK, TIMSK_TICIE1);
            }
        }
        else if (TMR_TIMER1_MODE == TMR_CTC)
        {
            SET_BIT(TCCR1B, TCCR1B_WGM12);
    17ac:	ae e4       	ldi	r26, 0x4E	; 78
    17ae:	b0 e0       	ldi	r27, 0x00	; 0
    17b0:	ee e4       	ldi	r30, 0x4E	; 78
    17b2:	f0 e0       	ldi	r31, 0x00	; 0
    17b4:	80 81       	ld	r24, Z
    17b6:	88 60       	ori	r24, 0x08	; 8
    17b8:	8c 93       	st	X, r24

            /* Checking Timer/Counter1A CTC Interrupt Enable bit */
            if (TMR_TIMER1A_COMP_STATE == TMR_ENABLE)
            {
                SET_BIT(TIMSK, TIMSK_OCIE1A);
    17ba:	a9 e5       	ldi	r26, 0x59	; 89
    17bc:	b0 e0       	ldi	r27, 0x00	; 0
    17be:	e9 e5       	ldi	r30, 0x59	; 89
    17c0:	f0 e0       	ldi	r31, 0x00	; 0
    17c2:	80 81       	ld	r24, Z
    17c4:	80 61       	ori	r24, 0x10	; 16
    17c6:	8c 93       	st	X, r24
            {
                SET_BIT(TIMSK, TIMSK_OCIE1B);
            }
            else
            {
                CLR_BIT(TIMSK, TIMSK_OCIE1B);
    17c8:	a9 e5       	ldi	r26, 0x59	; 89
    17ca:	b0 e0       	ldi	r27, 0x00	; 0
    17cc:	e9 e5       	ldi	r30, 0x59	; 89
    17ce:	f0 e0       	ldi	r31, 0x00	; 0
    17d0:	80 81       	ld	r24, Z
    17d2:	87 7f       	andi	r24, 0xF7	; 247
    17d4:	8c 93       	st	X, r24
            }
            /* Checking Timer/Counter1 CTC Interrupt Enable bit */
            if (TMR_TIMER1_CTC_INT == TMR_EN_INT)
            {
                SET_BIT(TIMSK, TIMSK_OCIE1B);
    17d6:	a9 e5       	ldi	r26, 0x59	; 89
    17d8:	b0 e0       	ldi	r27, 0x00	; 0
    17da:	e9 e5       	ldi	r30, 0x59	; 89
    17dc:	f0 e0       	ldi	r31, 0x00	; 0
    17de:	80 81       	ld	r24, Z
    17e0:	88 60       	ori	r24, 0x08	; 8
    17e2:	8c 93       	st	X, r24
                SET_BIT(TIMSK, TIMSK_OCIE1A);
    17e4:	a9 e5       	ldi	r26, 0x59	; 89
    17e6:	b0 e0       	ldi	r27, 0x00	; 0
    17e8:	e9 e5       	ldi	r30, 0x59	; 89
    17ea:	f0 e0       	ldi	r31, 0x00	; 0
    17ec:	80 81       	ld	r24, Z
    17ee:	80 61       	ori	r24, 0x10	; 16
    17f0:	8c 93       	st	X, r24
        {
        case TMR_NORMAL:

            if (TMR_TIMER1A_COPT_STATE == TMR_ENABLE)
            {
                CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    17f2:	af e4       	ldi	r26, 0x4F	; 79
    17f4:	b0 e0       	ldi	r27, 0x00	; 0
    17f6:	ef e4       	ldi	r30, 0x4F	; 79
    17f8:	f0 e0       	ldi	r31, 0x00	; 0
    17fa:	80 81       	ld	r24, Z
    17fc:	8f 7b       	andi	r24, 0xBF	; 191
    17fe:	8c 93       	st	X, r24
                CLR_BIT(TCCR1A, TCCR1A_COM1A1);
    1800:	af e4       	ldi	r26, 0x4F	; 79
    1802:	b0 e0       	ldi	r27, 0x00	; 0
    1804:	ef e4       	ldi	r30, 0x4F	; 79
    1806:	f0 e0       	ldi	r31, 0x00	; 0
    1808:	80 81       	ld	r24, Z
    180a:	8f 77       	andi	r24, 0x7F	; 127
    180c:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, TCCR1B_CS10);
            break;
        }
        case TMR_PRESCALER_1024:
        {
            SET_BIT(TCCR1B, TCCR1B_CS10);
    180e:	ae e4       	ldi	r26, 0x4E	; 78
    1810:	b0 e0       	ldi	r27, 0x00	; 0
    1812:	ee e4       	ldi	r30, 0x4E	; 78
    1814:	f0 e0       	ldi	r31, 0x00	; 0
    1816:	80 81       	ld	r24, Z
    1818:	81 60       	ori	r24, 0x01	; 1
    181a:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_CS12);
    181c:	ae e4       	ldi	r26, 0x4E	; 78
    181e:	b0 e0       	ldi	r27, 0x00	; 0
    1820:	ee e4       	ldi	r30, 0x4E	; 78
    1822:	f0 e0       	ldi	r31, 0x00	; 0
    1824:	80 81       	ld	r24, Z
    1826:	84 60       	ori	r24, 0x04	; 4
    1828:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, TCCR1B_CS11);
    182a:	ae e4       	ldi	r26, 0x4E	; 78
    182c:	b0 e0       	ldi	r27, 0x00	; 0
    182e:	ee e4       	ldi	r30, 0x4E	; 78
    1830:	f0 e0       	ldi	r31, 0x00	; 0
    1832:	80 81       	ld	r24, Z
    1834:	8d 7f       	andi	r24, 0xFD	; 253
    1836:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_CS10);
            CLR_BIT(TCCR1B, TCCR1B_CS11);
            CLR_BIT(TCCR1B, TCCR1B_CS12);
        }
        }
        TMR_u8Timer1CtrlRegValue = TCCR1B;
    1838:	ee e4       	ldi	r30, 0x4E	; 78
    183a:	f0 e0       	ldi	r31, 0x00	; 0
    183c:	80 81       	ld	r24, Z
    183e:	80 93 da 01 	sts	0x01DA, r24
    }

    /* Setting the initialization for Timer2 */
    if (TMR_TIMER2_INIT_STATE == TMR_DISABLE)
    {
        CLR_BIT(TCCR2, TCCR2_CS20);
    1842:	a5 e4       	ldi	r26, 0x45	; 69
    1844:	b0 e0       	ldi	r27, 0x00	; 0
    1846:	e5 e4       	ldi	r30, 0x45	; 69
    1848:	f0 e0       	ldi	r31, 0x00	; 0
    184a:	80 81       	ld	r24, Z
    184c:	8e 7f       	andi	r24, 0xFE	; 254
    184e:	8c 93       	st	X, r24
        CLR_BIT(TCCR2, TCCR2_CS21);
    1850:	a5 e4       	ldi	r26, 0x45	; 69
    1852:	b0 e0       	ldi	r27, 0x00	; 0
    1854:	e5 e4       	ldi	r30, 0x45	; 69
    1856:	f0 e0       	ldi	r31, 0x00	; 0
    1858:	80 81       	ld	r24, Z
    185a:	8d 7f       	andi	r24, 0xFD	; 253
    185c:	8c 93       	st	X, r24
        CLR_BIT(TCCR2, TCCR2_CS22);
    185e:	a5 e4       	ldi	r26, 0x45	; 69
    1860:	b0 e0       	ldi	r27, 0x00	; 0
    1862:	e5 e4       	ldi	r30, 0x45	; 69
    1864:	f0 e0       	ldi	r31, 0x00	; 0
    1866:	80 81       	ld	r24, Z
    1868:	8b 7f       	andi	r24, 0xFB	; 251
    186a:	8c 93       	st	X, r24
            break;
        }
        }
        TMR_u8Timer2CtrlRegValue = TCCR2;
    }
}
    186c:	cf 91       	pop	r28
    186e:	df 91       	pop	r29
    1870:	08 95       	ret

00001872 <TMR_VidDisableTimer>:

void TMR_VidDisableTimer(u8 Copy_u8TimerNb)
{
    1872:	df 93       	push	r29
    1874:	cf 93       	push	r28
    1876:	00 d0       	rcall	.+0      	; 0x1878 <TMR_VidDisableTimer+0x6>
    1878:	0f 92       	push	r0
    187a:	cd b7       	in	r28, 0x3d	; 61
    187c:	de b7       	in	r29, 0x3e	; 62
    187e:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8TimerNb)
    1880:	89 81       	ldd	r24, Y+1	; 0x01
    1882:	28 2f       	mov	r18, r24
    1884:	30 e0       	ldi	r19, 0x00	; 0
    1886:	3b 83       	std	Y+3, r19	; 0x03
    1888:	2a 83       	std	Y+2, r18	; 0x02
    188a:	8a 81       	ldd	r24, Y+2	; 0x02
    188c:	9b 81       	ldd	r25, Y+3	; 0x03
    188e:	81 30       	cpi	r24, 0x01	; 1
    1890:	91 05       	cpc	r25, r1
    1892:	01 f1       	breq	.+64     	; 0x18d4 <TMR_VidDisableTimer+0x62>
    1894:	2a 81       	ldd	r18, Y+2	; 0x02
    1896:	3b 81       	ldd	r19, Y+3	; 0x03
    1898:	22 30       	cpi	r18, 0x02	; 2
    189a:	31 05       	cpc	r19, r1
    189c:	89 f1       	breq	.+98     	; 0x1900 <TMR_VidDisableTimer+0x8e>
    189e:	8a 81       	ldd	r24, Y+2	; 0x02
    18a0:	9b 81       	ldd	r25, Y+3	; 0x03
    18a2:	00 97       	sbiw	r24, 0x00	; 0
    18a4:	09 f0       	breq	.+2      	; 0x18a8 <TMR_VidDisableTimer+0x36>
    18a6:	41 c0       	rjmp	.+130    	; 0x192a <TMR_VidDisableTimer+0xb8>
    {
    case TMR_TIMER0:
    {
        CLR_BIT(TCCR0, TCCR0_CS00);
    18a8:	a3 e5       	ldi	r26, 0x53	; 83
    18aa:	b0 e0       	ldi	r27, 0x00	; 0
    18ac:	e3 e5       	ldi	r30, 0x53	; 83
    18ae:	f0 e0       	ldi	r31, 0x00	; 0
    18b0:	80 81       	ld	r24, Z
    18b2:	8e 7f       	andi	r24, 0xFE	; 254
    18b4:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, TCCR0_CS01);
    18b6:	a3 e5       	ldi	r26, 0x53	; 83
    18b8:	b0 e0       	ldi	r27, 0x00	; 0
    18ba:	e3 e5       	ldi	r30, 0x53	; 83
    18bc:	f0 e0       	ldi	r31, 0x00	; 0
    18be:	80 81       	ld	r24, Z
    18c0:	8d 7f       	andi	r24, 0xFD	; 253
    18c2:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, TCCR0_CS02);
    18c4:	a3 e5       	ldi	r26, 0x53	; 83
    18c6:	b0 e0       	ldi	r27, 0x00	; 0
    18c8:	e3 e5       	ldi	r30, 0x53	; 83
    18ca:	f0 e0       	ldi	r31, 0x00	; 0
    18cc:	80 81       	ld	r24, Z
    18ce:	8b 7f       	andi	r24, 0xFB	; 251
    18d0:	8c 93       	st	X, r24
    18d2:	2b c0       	rjmp	.+86     	; 0x192a <TMR_VidDisableTimer+0xb8>
        break;
    }
    case TMR_TIMER1:
    {
        CLR_BIT(TCCR1B, TCCR1B_CS10);
    18d4:	ae e4       	ldi	r26, 0x4E	; 78
    18d6:	b0 e0       	ldi	r27, 0x00	; 0
    18d8:	ee e4       	ldi	r30, 0x4E	; 78
    18da:	f0 e0       	ldi	r31, 0x00	; 0
    18dc:	80 81       	ld	r24, Z
    18de:	8e 7f       	andi	r24, 0xFE	; 254
    18e0:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, TCCR1B_CS11);
    18e2:	ae e4       	ldi	r26, 0x4E	; 78
    18e4:	b0 e0       	ldi	r27, 0x00	; 0
    18e6:	ee e4       	ldi	r30, 0x4E	; 78
    18e8:	f0 e0       	ldi	r31, 0x00	; 0
    18ea:	80 81       	ld	r24, Z
    18ec:	8d 7f       	andi	r24, 0xFD	; 253
    18ee:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, TCCR1B_CS12);
    18f0:	ae e4       	ldi	r26, 0x4E	; 78
    18f2:	b0 e0       	ldi	r27, 0x00	; 0
    18f4:	ee e4       	ldi	r30, 0x4E	; 78
    18f6:	f0 e0       	ldi	r31, 0x00	; 0
    18f8:	80 81       	ld	r24, Z
    18fa:	8b 7f       	andi	r24, 0xFB	; 251
    18fc:	8c 93       	st	X, r24
    18fe:	15 c0       	rjmp	.+42     	; 0x192a <TMR_VidDisableTimer+0xb8>
        break;
    }
    case TMR_TIMER2:
    {
        CLR_BIT(TCCR2, TCCR2_CS20);
    1900:	a5 e4       	ldi	r26, 0x45	; 69
    1902:	b0 e0       	ldi	r27, 0x00	; 0
    1904:	e5 e4       	ldi	r30, 0x45	; 69
    1906:	f0 e0       	ldi	r31, 0x00	; 0
    1908:	80 81       	ld	r24, Z
    190a:	8e 7f       	andi	r24, 0xFE	; 254
    190c:	8c 93       	st	X, r24
        CLR_BIT(TCCR2, TCCR2_CS21);
    190e:	a5 e4       	ldi	r26, 0x45	; 69
    1910:	b0 e0       	ldi	r27, 0x00	; 0
    1912:	e5 e4       	ldi	r30, 0x45	; 69
    1914:	f0 e0       	ldi	r31, 0x00	; 0
    1916:	80 81       	ld	r24, Z
    1918:	8d 7f       	andi	r24, 0xFD	; 253
    191a:	8c 93       	st	X, r24
        CLR_BIT(TCCR2, TCCR2_CS22);
    191c:	a5 e4       	ldi	r26, 0x45	; 69
    191e:	b0 e0       	ldi	r27, 0x00	; 0
    1920:	e5 e4       	ldi	r30, 0x45	; 69
    1922:	f0 e0       	ldi	r31, 0x00	; 0
    1924:	80 81       	ld	r24, Z
    1926:	8b 7f       	andi	r24, 0xFB	; 251
    1928:	8c 93       	st	X, r24
        break;
    }
    }
}
    192a:	0f 90       	pop	r0
    192c:	0f 90       	pop	r0
    192e:	0f 90       	pop	r0
    1930:	cf 91       	pop	r28
    1932:	df 91       	pop	r29
    1934:	08 95       	ret

00001936 <TMR_VidEnableTimer>:

void TMR_VidEnableTimer(u8 Copy_u8TimerNb)
{
    1936:	df 93       	push	r29
    1938:	cf 93       	push	r28
    193a:	00 d0       	rcall	.+0      	; 0x193c <TMR_VidEnableTimer+0x6>
    193c:	0f 92       	push	r0
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62
    1942:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8TimerNb)
    1944:	89 81       	ldd	r24, Y+1	; 0x01
    1946:	28 2f       	mov	r18, r24
    1948:	30 e0       	ldi	r19, 0x00	; 0
    194a:	3b 83       	std	Y+3, r19	; 0x03
    194c:	2a 83       	std	Y+2, r18	; 0x02
    194e:	8a 81       	ldd	r24, Y+2	; 0x02
    1950:	9b 81       	ldd	r25, Y+3	; 0x03
    1952:	81 30       	cpi	r24, 0x01	; 1
    1954:	91 05       	cpc	r25, r1
    1956:	79 f0       	breq	.+30     	; 0x1976 <TMR_VidEnableTimer+0x40>
    1958:	2a 81       	ldd	r18, Y+2	; 0x02
    195a:	3b 81       	ldd	r19, Y+3	; 0x03
    195c:	22 30       	cpi	r18, 0x02	; 2
    195e:	31 05       	cpc	r19, r1
    1960:	81 f0       	breq	.+32     	; 0x1982 <TMR_VidEnableTimer+0x4c>
    1962:	8a 81       	ldd	r24, Y+2	; 0x02
    1964:	9b 81       	ldd	r25, Y+3	; 0x03
    1966:	00 97       	sbiw	r24, 0x00	; 0
    1968:	89 f4       	brne	.+34     	; 0x198c <TMR_VidEnableTimer+0x56>
    {
    case TMR_TIMER0:
    {
        TCCR0 = TMR_u8Timer0CtrlRegValue;
    196a:	e3 e5       	ldi	r30, 0x53	; 83
    196c:	f0 e0       	ldi	r31, 0x00	; 0
    196e:	80 91 d9 01 	lds	r24, 0x01D9
    1972:	80 83       	st	Z, r24
    1974:	0b c0       	rjmp	.+22     	; 0x198c <TMR_VidEnableTimer+0x56>
        break;
    }
    case TMR_TIMER1:
    {
        TCCR1B = TMR_u8Timer1CtrlRegValue;
    1976:	ee e4       	ldi	r30, 0x4E	; 78
    1978:	f0 e0       	ldi	r31, 0x00	; 0
    197a:	80 91 da 01 	lds	r24, 0x01DA
    197e:	80 83       	st	Z, r24
    1980:	05 c0       	rjmp	.+10     	; 0x198c <TMR_VidEnableTimer+0x56>
        break;
    }
    case TMR_TIMER2:
    {
        TCCR2 = TMR_u8Timer2CtrlRegValue;
    1982:	e5 e4       	ldi	r30, 0x45	; 69
    1984:	f0 e0       	ldi	r31, 0x00	; 0
    1986:	80 91 db 01 	lds	r24, 0x01DB
    198a:	80 83       	st	Z, r24
        break;
    }
    }
}
    198c:	0f 90       	pop	r0
    198e:	0f 90       	pop	r0
    1990:	0f 90       	pop	r0
    1992:	cf 91       	pop	r28
    1994:	df 91       	pop	r29
    1996:	08 95       	ret

00001998 <TMR_VidSetDutyCycle>:

void TMR_VidSetDutyCycle(u8 Copy_u8TimerNb, u8 Copy_u8DutyCycle)
{
    1998:	df 93       	push	r29
    199a:	cf 93       	push	r28
    199c:	00 d0       	rcall	.+0      	; 0x199e <TMR_VidSetDutyCycle+0x6>
    199e:	cd b7       	in	r28, 0x3d	; 61
    19a0:	de b7       	in	r29, 0x3e	; 62
    19a2:	89 83       	std	Y+1, r24	; 0x01
    19a4:	6a 83       	std	Y+2, r22	; 0x02

    OCRA1 = 7813;
    19a6:	ea e4       	ldi	r30, 0x4A	; 74
    19a8:	f0 e0       	ldi	r31, 0x00	; 0
    19aa:	85 e8       	ldi	r24, 0x85	; 133
    19ac:	9e e1       	ldi	r25, 0x1E	; 30
    19ae:	91 83       	std	Z+1, r25	; 0x01
    19b0:	80 83       	st	Z, r24
    {
        OCR2 = ((Copy_u8DutyCycle * (TMR_MAXVAL_TIMER02_REG - 1)) / 100);
        break;
    }
    }*/
}
    19b2:	0f 90       	pop	r0
    19b4:	0f 90       	pop	r0
    19b6:	cf 91       	pop	r28
    19b8:	df 91       	pop	r29
    19ba:	08 95       	ret

000019bc <TMR_VidSetPWM>:

void TMR_VidSetPWM(u16 Copy_u16ReqCompValue)
{
    19bc:	df 93       	push	r29
    19be:	cf 93       	push	r28
    19c0:	00 d0       	rcall	.+0      	; 0x19c2 <TMR_VidSetPWM+0x6>
    19c2:	cd b7       	in	r28, 0x3d	; 61
    19c4:	de b7       	in	r29, 0x3e	; 62
    19c6:	9a 83       	std	Y+2, r25	; 0x02
    19c8:	89 83       	std	Y+1, r24	; 0x01
        else if (TMR_TIMER1_COPT_MODE == TMR_SET_OCX)
        {
            OCRB1 = TMR_ICR1_VAL - Copy_u16ReqCompValue;
        }
    }
}
    19ca:	0f 90       	pop	r0
    19cc:	0f 90       	pop	r0
    19ce:	cf 91       	pop	r28
    19d0:	df 91       	pop	r29
    19d2:	08 95       	ret

000019d4 <TMR_VidSetCallBack>:

void TMR_VidSetCallBack(u8 Copy_u8TimerNb, void (*Copy_PVCallBack)(void))
{
    19d4:	df 93       	push	r29
    19d6:	cf 93       	push	r28
    19d8:	00 d0       	rcall	.+0      	; 0x19da <TMR_VidSetCallBack+0x6>
    19da:	0f 92       	push	r0
    19dc:	cd b7       	in	r28, 0x3d	; 61
    19de:	de b7       	in	r29, 0x3e	; 62
    19e0:	89 83       	std	Y+1, r24	; 0x01
    19e2:	7b 83       	std	Y+3, r23	; 0x03
    19e4:	6a 83       	std	Y+2, r22	; 0x02
    TCNT0 = TMR_u32Timer0Preload;
    19e6:	e2 e5       	ldi	r30, 0x52	; 82
    19e8:	f0 e0       	ldi	r31, 0x00	; 0
    19ea:	80 91 c4 01 	lds	r24, 0x01C4
    19ee:	90 91 c5 01 	lds	r25, 0x01C5
    19f2:	80 83       	st	Z, r24
    TCNT1 = TMR_u32Timer1Preload;
    19f4:	ec e4       	ldi	r30, 0x4C	; 76
    19f6:	f0 e0       	ldi	r31, 0x00	; 0
    19f8:	80 91 c6 01 	lds	r24, 0x01C6
    19fc:	90 91 c7 01 	lds	r25, 0x01C7
    1a00:	91 83       	std	Z+1, r25	; 0x01
    1a02:	80 83       	st	Z, r24
    TCNT2 = TMR_u32Timer2Preload;
    1a04:	e4 e4       	ldi	r30, 0x44	; 68
    1a06:	f0 e0       	ldi	r31, 0x00	; 0
    1a08:	80 91 c8 01 	lds	r24, 0x01C8
    1a0c:	90 91 c9 01 	lds	r25, 0x01C9
    1a10:	80 83       	st	Z, r24

    PVCallBack[Copy_u8TimerNb] = Copy_PVCallBack;
    1a12:	89 81       	ldd	r24, Y+1	; 0x01
    1a14:	88 2f       	mov	r24, r24
    1a16:	90 e0       	ldi	r25, 0x00	; 0
    1a18:	88 0f       	add	r24, r24
    1a1a:	99 1f       	adc	r25, r25
    1a1c:	fc 01       	movw	r30, r24
    1a1e:	e2 53       	subi	r30, 0x32	; 50
    1a20:	fe 4f       	sbci	r31, 0xFE	; 254
    1a22:	8a 81       	ldd	r24, Y+2	; 0x02
    1a24:	9b 81       	ldd	r25, Y+3	; 0x03
    1a26:	91 83       	std	Z+1, r25	; 0x01
    1a28:	80 83       	st	Z, r24
    DIO_VidSetPinValue(Port_C, Pin_7, high);
    1a2a:	83 e0       	ldi	r24, 0x03	; 3
    1a2c:	67 e0       	ldi	r22, 0x07	; 7
    1a2e:	41 e0       	ldi	r20, 0x01	; 1
    1a30:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
}
    1a34:	0f 90       	pop	r0
    1a36:	0f 90       	pop	r0
    1a38:	0f 90       	pop	r0
    1a3a:	cf 91       	pop	r28
    1a3c:	df 91       	pop	r29
    1a3e:	08 95       	ret

00001a40 <TMR_VidEnableIcuInterrupt>:

/*-----------------------------Functions related to Input Capture Mode----------------------------------*/

void TMR_VidEnableIcuInterrupt()
{
    1a40:	df 93       	push	r29
    1a42:	cf 93       	push	r28
    1a44:	cd b7       	in	r28, 0x3d	; 61
    1a46:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_TICIE1);
    1a48:	a9 e5       	ldi	r26, 0x59	; 89
    1a4a:	b0 e0       	ldi	r27, 0x00	; 0
    1a4c:	e9 e5       	ldi	r30, 0x59	; 89
    1a4e:	f0 e0       	ldi	r31, 0x00	; 0
    1a50:	80 81       	ld	r24, Z
    1a52:	80 62       	ori	r24, 0x20	; 32
    1a54:	8c 93       	st	X, r24
}
    1a56:	cf 91       	pop	r28
    1a58:	df 91       	pop	r29
    1a5a:	08 95       	ret

00001a5c <TMR_VidDisbleIcuInterrupt>:

void TMR_VidDisbleIcuInterrupt()
{
    1a5c:	df 93       	push	r29
    1a5e:	cf 93       	push	r28
    1a60:	cd b7       	in	r28, 0x3d	; 61
    1a62:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TIMSK_TICIE1);
    1a64:	a9 e5       	ldi	r26, 0x59	; 89
    1a66:	b0 e0       	ldi	r27, 0x00	; 0
    1a68:	e9 e5       	ldi	r30, 0x59	; 89
    1a6a:	f0 e0       	ldi	r31, 0x00	; 0
    1a6c:	80 81       	ld	r24, Z
    1a6e:	8f 7d       	andi	r24, 0xDF	; 223
    1a70:	8c 93       	st	X, r24
}
    1a72:	cf 91       	pop	r28
    1a74:	df 91       	pop	r29
    1a76:	08 95       	ret

00001a78 <TMR_u16GetPeriod>:

u16 TMR_u16GetPeriod()
{
    1a78:	df 93       	push	r29
    1a7a:	cf 93       	push	r28
    1a7c:	cd b7       	in	r28, 0x3d	; 61
    1a7e:	de b7       	in	r29, 0x3e	; 62
    return TMR_u16TotalTime * TMR_TIMER1_TICKTIME;
    1a80:	80 91 de 01 	lds	r24, 0x01DE
    1a84:	90 91 df 01 	lds	r25, 0x01DF
    1a88:	96 95       	lsr	r25
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	88 27       	eor	r24, r24
    1a8e:	97 95       	ror	r25
    1a90:	87 95       	ror	r24
}
    1a92:	cf 91       	pop	r28
    1a94:	df 91       	pop	r29
    1a96:	08 95       	ret

00001a98 <TMR_u16GetDutyCycle>:

u16 TMR_u16GetDutyCycle()
{
    1a98:	df 93       	push	r29
    1a9a:	cf 93       	push	r28
    1a9c:	cd b7       	in	r28, 0x3d	; 61
    1a9e:	de b7       	in	r29, 0x3e	; 62

    return TMR_u16DutyCycle;
    1aa0:	80 91 e0 01 	lds	r24, 0x01E0
    1aa4:	90 91 e1 01 	lds	r25, 0x01E1
}
    1aa8:	cf 91       	pop	r28
    1aaa:	df 91       	pop	r29
    1aac:	08 95       	ret

00001aae <TMR_u16OnTime>:

u16 TMR_u16OnTime()
{
    1aae:	df 93       	push	r29
    1ab0:	cf 93       	push	r28
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62

    return TMR_u16ONTime * TMR_TIMER1_TICKTIME;
    1ab6:	80 91 dc 01 	lds	r24, 0x01DC
    1aba:	90 91 dd 01 	lds	r25, 0x01DD
    1abe:	96 95       	lsr	r25
    1ac0:	98 2f       	mov	r25, r24
    1ac2:	88 27       	eor	r24, r24
    1ac4:	97 95       	ror	r25
    1ac6:	87 95       	ror	r24
}
    1ac8:	cf 91       	pop	r28
    1aca:	df 91       	pop	r29
    1acc:	08 95       	ret

00001ace <TMR_u16OffTime>:

u16 TMR_u16OffTime()
{
    1ace:	df 93       	push	r29
    1ad0:	cf 93       	push	r28
    1ad2:	cd b7       	in	r28, 0x3d	; 61
    1ad4:	de b7       	in	r29, 0x3e	; 62

    return (TMR_u16TotalTime - TMR_u16ONTime) * TMR_TIMER1_TICKTIME;
    1ad6:	20 91 de 01 	lds	r18, 0x01DE
    1ada:	30 91 df 01 	lds	r19, 0x01DF
    1ade:	80 91 dc 01 	lds	r24, 0x01DC
    1ae2:	90 91 dd 01 	lds	r25, 0x01DD
    1ae6:	a9 01       	movw	r20, r18
    1ae8:	48 1b       	sub	r20, r24
    1aea:	59 0b       	sbc	r21, r25
    1aec:	ca 01       	movw	r24, r20
    1aee:	96 95       	lsr	r25
    1af0:	98 2f       	mov	r25, r24
    1af2:	88 27       	eor	r24, r24
    1af4:	97 95       	ror	r25
    1af6:	87 95       	ror	r24
}
    1af8:	cf 91       	pop	r28
    1afa:	df 91       	pop	r29
    1afc:	08 95       	ret

00001afe <__vector_6>:

/*ISR of Input Capture interrupts */
void __vector_6()
{
    1afe:	1f 92       	push	r1
    1b00:	0f 92       	push	r0
    1b02:	0f b6       	in	r0, 0x3f	; 63
    1b04:	0f 92       	push	r0
    1b06:	11 24       	eor	r1, r1
    1b08:	2f 93       	push	r18
    1b0a:	3f 93       	push	r19
    1b0c:	4f 93       	push	r20
    1b0e:	5f 93       	push	r21
    1b10:	6f 93       	push	r22
    1b12:	7f 93       	push	r23
    1b14:	8f 93       	push	r24
    1b16:	9f 93       	push	r25
    1b18:	af 93       	push	r26
    1b1a:	bf 93       	push	r27
    1b1c:	ef 93       	push	r30
    1b1e:	ff 93       	push	r31
    1b20:	df 93       	push	r29
    1b22:	cf 93       	push	r28
    1b24:	cd b7       	in	r28, 0x3d	; 61
    1b26:	de b7       	in	r29, 0x3e	; 62
    static u8 Local_u8Flag = 0;
    static u16 Local_u16StartTime = 0;
    static u16 Local_u16StopTime = 0;

    if (Local_u8Flag == 0)
    1b28:	80 91 d8 01 	lds	r24, 0x01D8
    1b2c:	88 23       	and	r24, r24
    1b2e:	09 f0       	breq	.+2      	; 0x1b32 <__vector_6+0x34>
    1b30:	4d c0       	rjmp	.+154    	; 0x1bcc <__vector_6+0xce>
    {
        Local_u8Flag = 1;
    1b32:	81 e0       	ldi	r24, 0x01	; 1
    1b34:	80 93 d8 01 	sts	0x01D8, r24
        TMR_u16TotalTime = ICR1 - Local_u16StartTime;
    1b38:	e6 e4       	ldi	r30, 0x46	; 70
    1b3a:	f0 e0       	ldi	r31, 0x00	; 0
    1b3c:	20 81       	ld	r18, Z
    1b3e:	31 81       	ldd	r19, Z+1	; 0x01
    1b40:	80 91 d6 01 	lds	r24, 0x01D6
    1b44:	90 91 d7 01 	lds	r25, 0x01D7
    1b48:	a9 01       	movw	r20, r18
    1b4a:	48 1b       	sub	r20, r24
    1b4c:	59 0b       	sbc	r21, r25
    1b4e:	ca 01       	movw	r24, r20
    1b50:	90 93 df 01 	sts	0x01DF, r25
    1b54:	80 93 de 01 	sts	0x01DE, r24
        TMR_u16ONTime = Local_u16StopTime - Local_u16StartTime;
    1b58:	20 91 d4 01 	lds	r18, 0x01D4
    1b5c:	30 91 d5 01 	lds	r19, 0x01D5
    1b60:	80 91 d6 01 	lds	r24, 0x01D6
    1b64:	90 91 d7 01 	lds	r25, 0x01D7
    1b68:	a9 01       	movw	r20, r18
    1b6a:	48 1b       	sub	r20, r24
    1b6c:	59 0b       	sbc	r21, r25
    1b6e:	ca 01       	movw	r24, r20
    1b70:	90 93 dd 01 	sts	0x01DD, r25
    1b74:	80 93 dc 01 	sts	0x01DC, r24
        Local_u16StartTime = ICR1;
    1b78:	e6 e4       	ldi	r30, 0x46	; 70
    1b7a:	f0 e0       	ldi	r31, 0x00	; 0
    1b7c:	80 81       	ld	r24, Z
    1b7e:	91 81       	ldd	r25, Z+1	; 0x01
    1b80:	90 93 d7 01 	sts	0x01D7, r25
    1b84:	80 93 d6 01 	sts	0x01D6, r24
        TMR_u16DutyCycle = ((TMR_u16ONTime * 100) / TMR_u16TotalTime);
    1b88:	20 91 dc 01 	lds	r18, 0x01DC
    1b8c:	30 91 dd 01 	lds	r19, 0x01DD
    1b90:	84 e6       	ldi	r24, 0x64	; 100
    1b92:	90 e0       	ldi	r25, 0x00	; 0
    1b94:	ac 01       	movw	r20, r24
    1b96:	24 9f       	mul	r18, r20
    1b98:	c0 01       	movw	r24, r0
    1b9a:	25 9f       	mul	r18, r21
    1b9c:	90 0d       	add	r25, r0
    1b9e:	34 9f       	mul	r19, r20
    1ba0:	90 0d       	add	r25, r0
    1ba2:	11 24       	eor	r1, r1
    1ba4:	20 91 de 01 	lds	r18, 0x01DE
    1ba8:	30 91 df 01 	lds	r19, 0x01DF
    1bac:	b9 01       	movw	r22, r18
    1bae:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__udivmodhi4>
    1bb2:	cb 01       	movw	r24, r22
    1bb4:	90 93 e1 01 	sts	0x01E1, r25
    1bb8:	80 93 e0 01 	sts	0x01E0, r24
        CLR_BIT(TCCR1B, TCCR1B_ICES1); /*Sense Falling Edge */
    1bbc:	ae e4       	ldi	r26, 0x4E	; 78
    1bbe:	b0 e0       	ldi	r27, 0x00	; 0
    1bc0:	ee e4       	ldi	r30, 0x4E	; 78
    1bc2:	f0 e0       	ldi	r31, 0x00	; 0
    1bc4:	80 81       	ld	r24, Z
    1bc6:	8f 7b       	andi	r24, 0xBF	; 191
    1bc8:	8c 93       	st	X, r24
    1bca:	11 c0       	rjmp	.+34     	; 0x1bee <__vector_6+0xf0>
    }
    else
    {
        Local_u8Flag = 0;
    1bcc:	10 92 d8 01 	sts	0x01D8, r1
        Local_u16StopTime = ICR1;
    1bd0:	e6 e4       	ldi	r30, 0x46	; 70
    1bd2:	f0 e0       	ldi	r31, 0x00	; 0
    1bd4:	80 81       	ld	r24, Z
    1bd6:	91 81       	ldd	r25, Z+1	; 0x01
    1bd8:	90 93 d5 01 	sts	0x01D5, r25
    1bdc:	80 93 d4 01 	sts	0x01D4, r24
        SET_BIT(TCCR1B, TCCR1B_ICES1); /* Sense Raising Edge */
    1be0:	ae e4       	ldi	r26, 0x4E	; 78
    1be2:	b0 e0       	ldi	r27, 0x00	; 0
    1be4:	ee e4       	ldi	r30, 0x4E	; 78
    1be6:	f0 e0       	ldi	r31, 0x00	; 0
    1be8:	80 81       	ld	r24, Z
    1bea:	80 64       	ori	r24, 0x40	; 64
    1bec:	8c 93       	st	X, r24
    }
}
    1bee:	cf 91       	pop	r28
    1bf0:	df 91       	pop	r29
    1bf2:	ff 91       	pop	r31
    1bf4:	ef 91       	pop	r30
    1bf6:	bf 91       	pop	r27
    1bf8:	af 91       	pop	r26
    1bfa:	9f 91       	pop	r25
    1bfc:	8f 91       	pop	r24
    1bfe:	7f 91       	pop	r23
    1c00:	6f 91       	pop	r22
    1c02:	5f 91       	pop	r21
    1c04:	4f 91       	pop	r20
    1c06:	3f 91       	pop	r19
    1c08:	2f 91       	pop	r18
    1c0a:	0f 90       	pop	r0
    1c0c:	0f be       	out	0x3f, r0	; 63
    1c0e:	0f 90       	pop	r0
    1c10:	1f 90       	pop	r1
    1c12:	18 95       	reti

00001c14 <__vector_11>:

/*-----------------------------ISRs of Overflow timer interrupts----------------------------------*/

/*The ISR of Timer/Counter0 Overflow interrupt*/
void __vector_11()
{
    1c14:	1f 92       	push	r1
    1c16:	0f 92       	push	r0
    1c18:	0f b6       	in	r0, 0x3f	; 63
    1c1a:	0f 92       	push	r0
    1c1c:	11 24       	eor	r1, r1
    1c1e:	2f 93       	push	r18
    1c20:	3f 93       	push	r19
    1c22:	4f 93       	push	r20
    1c24:	5f 93       	push	r21
    1c26:	6f 93       	push	r22
    1c28:	7f 93       	push	r23
    1c2a:	8f 93       	push	r24
    1c2c:	9f 93       	push	r25
    1c2e:	af 93       	push	r26
    1c30:	bf 93       	push	r27
    1c32:	ef 93       	push	r30
    1c34:	ff 93       	push	r31
    1c36:	df 93       	push	r29
    1c38:	cf 93       	push	r28
    1c3a:	cd b7       	in	r28, 0x3d	; 61
    1c3c:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER0] != NULL)
    1c3e:	80 91 ce 01 	lds	r24, 0x01CE
    1c42:	90 91 cf 01 	lds	r25, 0x01CF
    1c46:	00 97       	sbiw	r24, 0x00	; 0
    1c48:	21 f1       	breq	.+72     	; 0x1c92 <__vector_11+0x7e>
    {
        TMR_u32Timer0Counter++;
    1c4a:	80 91 be 01 	lds	r24, 0x01BE
    1c4e:	90 91 bf 01 	lds	r25, 0x01BF
    1c52:	01 96       	adiw	r24, 0x01	; 1
    1c54:	90 93 bf 01 	sts	0x01BF, r25
    1c58:	80 93 be 01 	sts	0x01BE, r24
        if (TMR_u32Timer0Counter == TMR_u32ReqTimer0Cntr)
    1c5c:	20 91 be 01 	lds	r18, 0x01BE
    1c60:	30 91 bf 01 	lds	r19, 0x01BF
    1c64:	80 91 ca 01 	lds	r24, 0x01CA
    1c68:	90 91 cb 01 	lds	r25, 0x01CB
    1c6c:	28 17       	cp	r18, r24
    1c6e:	39 07       	cpc	r19, r25
    1c70:	81 f4       	brne	.+32     	; 0x1c92 <__vector_11+0x7e>
        {
            TMR_u32Timer0Counter = 0;
    1c72:	10 92 bf 01 	sts	0x01BF, r1
    1c76:	10 92 be 01 	sts	0x01BE, r1
            TCNT0 = TMR_u32Timer0Preload;
    1c7a:	e2 e5       	ldi	r30, 0x52	; 82
    1c7c:	f0 e0       	ldi	r31, 0x00	; 0
    1c7e:	80 91 c4 01 	lds	r24, 0x01C4
    1c82:	90 91 c5 01 	lds	r25, 0x01C5
    1c86:	80 83       	st	Z, r24
            PVCallBack[TMR_TIMER0](); /*The ISR action*/
    1c88:	e0 91 ce 01 	lds	r30, 0x01CE
    1c8c:	f0 91 cf 01 	lds	r31, 0x01CF
    1c90:	09 95       	icall
        }
    }
}
    1c92:	cf 91       	pop	r28
    1c94:	df 91       	pop	r29
    1c96:	ff 91       	pop	r31
    1c98:	ef 91       	pop	r30
    1c9a:	bf 91       	pop	r27
    1c9c:	af 91       	pop	r26
    1c9e:	9f 91       	pop	r25
    1ca0:	8f 91       	pop	r24
    1ca2:	7f 91       	pop	r23
    1ca4:	6f 91       	pop	r22
    1ca6:	5f 91       	pop	r21
    1ca8:	4f 91       	pop	r20
    1caa:	3f 91       	pop	r19
    1cac:	2f 91       	pop	r18
    1cae:	0f 90       	pop	r0
    1cb0:	0f be       	out	0x3f, r0	; 63
    1cb2:	0f 90       	pop	r0
    1cb4:	1f 90       	pop	r1
    1cb6:	18 95       	reti

00001cb8 <__vector_9>:

/*The ISR of Timer/Counter1 Overflow interrupt*/
void __vector_9()
{
    1cb8:	1f 92       	push	r1
    1cba:	0f 92       	push	r0
    1cbc:	0f b6       	in	r0, 0x3f	; 63
    1cbe:	0f 92       	push	r0
    1cc0:	11 24       	eor	r1, r1
    1cc2:	2f 93       	push	r18
    1cc4:	3f 93       	push	r19
    1cc6:	4f 93       	push	r20
    1cc8:	5f 93       	push	r21
    1cca:	6f 93       	push	r22
    1ccc:	7f 93       	push	r23
    1cce:	8f 93       	push	r24
    1cd0:	9f 93       	push	r25
    1cd2:	af 93       	push	r26
    1cd4:	bf 93       	push	r27
    1cd6:	ef 93       	push	r30
    1cd8:	ff 93       	push	r31
    1cda:	df 93       	push	r29
    1cdc:	cf 93       	push	r28
    1cde:	cd b7       	in	r28, 0x3d	; 61
    1ce0:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER1] != NULL)
    1ce2:	80 91 d0 01 	lds	r24, 0x01D0
    1ce6:	90 91 d1 01 	lds	r25, 0x01D1
    1cea:	00 97       	sbiw	r24, 0x00	; 0
    1cec:	69 f1       	breq	.+90     	; 0x1d48 <__vector_9+0x90>
    {
        TMR_u32Timer1Counter++;
    1cee:	80 91 c0 01 	lds	r24, 0x01C0
    1cf2:	90 91 c1 01 	lds	r25, 0x01C1
    1cf6:	01 96       	adiw	r24, 0x01	; 1
    1cf8:	90 93 c1 01 	sts	0x01C1, r25
    1cfc:	80 93 c0 01 	sts	0x01C0, r24
        if (TMR_u32Timer1Counter == TMR_u32ReqTimer1Cntr)
    1d00:	20 91 c0 01 	lds	r18, 0x01C0
    1d04:	30 91 c1 01 	lds	r19, 0x01C1
    1d08:	80 91 b4 01 	lds	r24, 0x01B4
    1d0c:	90 91 b5 01 	lds	r25, 0x01B5
    1d10:	28 17       	cp	r18, r24
    1d12:	39 07       	cpc	r19, r25
    1d14:	c9 f4       	brne	.+50     	; 0x1d48 <__vector_9+0x90>
        {
            TMR_u32Timer1Counter = 0;
    1d16:	10 92 c1 01 	sts	0x01C1, r1
    1d1a:	10 92 c0 01 	sts	0x01C0, r1
            TCNT1H = TMR_u32Timer1Preload >> 8;
    1d1e:	ed e4       	ldi	r30, 0x4D	; 77
    1d20:	f0 e0       	ldi	r31, 0x00	; 0
    1d22:	80 91 c6 01 	lds	r24, 0x01C6
    1d26:	90 91 c7 01 	lds	r25, 0x01C7
    1d2a:	89 2f       	mov	r24, r25
    1d2c:	99 27       	eor	r25, r25
    1d2e:	80 83       	st	Z, r24
            TCNT1L = TMR_u32Timer1Preload;
    1d30:	ec e4       	ldi	r30, 0x4C	; 76
    1d32:	f0 e0       	ldi	r31, 0x00	; 0
    1d34:	80 91 c6 01 	lds	r24, 0x01C6
    1d38:	90 91 c7 01 	lds	r25, 0x01C7
    1d3c:	80 83       	st	Z, r24
            PVCallBack[TMR_TIMER1](); /*The ISR action*/
    1d3e:	e0 91 d0 01 	lds	r30, 0x01D0
    1d42:	f0 91 d1 01 	lds	r31, 0x01D1
    1d46:	09 95       	icall
        }
    }
    return;
}
    1d48:	cf 91       	pop	r28
    1d4a:	df 91       	pop	r29
    1d4c:	ff 91       	pop	r31
    1d4e:	ef 91       	pop	r30
    1d50:	bf 91       	pop	r27
    1d52:	af 91       	pop	r26
    1d54:	9f 91       	pop	r25
    1d56:	8f 91       	pop	r24
    1d58:	7f 91       	pop	r23
    1d5a:	6f 91       	pop	r22
    1d5c:	5f 91       	pop	r21
    1d5e:	4f 91       	pop	r20
    1d60:	3f 91       	pop	r19
    1d62:	2f 91       	pop	r18
    1d64:	0f 90       	pop	r0
    1d66:	0f be       	out	0x3f, r0	; 63
    1d68:	0f 90       	pop	r0
    1d6a:	1f 90       	pop	r1
    1d6c:	18 95       	reti

00001d6e <__vector_5>:

/*The ISR of Timer/Counter2 Overflow interrupt*/
void __vector_5()
{
    1d6e:	1f 92       	push	r1
    1d70:	0f 92       	push	r0
    1d72:	0f b6       	in	r0, 0x3f	; 63
    1d74:	0f 92       	push	r0
    1d76:	11 24       	eor	r1, r1
    1d78:	2f 93       	push	r18
    1d7a:	3f 93       	push	r19
    1d7c:	4f 93       	push	r20
    1d7e:	5f 93       	push	r21
    1d80:	6f 93       	push	r22
    1d82:	7f 93       	push	r23
    1d84:	8f 93       	push	r24
    1d86:	9f 93       	push	r25
    1d88:	af 93       	push	r26
    1d8a:	bf 93       	push	r27
    1d8c:	ef 93       	push	r30
    1d8e:	ff 93       	push	r31
    1d90:	df 93       	push	r29
    1d92:	cf 93       	push	r28
    1d94:	cd b7       	in	r28, 0x3d	; 61
    1d96:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER2] != NULL)
    1d98:	80 91 d2 01 	lds	r24, 0x01D2
    1d9c:	90 91 d3 01 	lds	r25, 0x01D3
    1da0:	00 97       	sbiw	r24, 0x00	; 0
    1da2:	21 f1       	breq	.+72     	; 0x1dec <__vector_5+0x7e>
    {
        TMR_u32Timer2Counter++;
    1da4:	80 91 c2 01 	lds	r24, 0x01C2
    1da8:	90 91 c3 01 	lds	r25, 0x01C3
    1dac:	01 96       	adiw	r24, 0x01	; 1
    1dae:	90 93 c3 01 	sts	0x01C3, r25
    1db2:	80 93 c2 01 	sts	0x01C2, r24
        if (TMR_u32Timer2Counter == TMR_u32ReqTimer2Cntr)
    1db6:	20 91 c2 01 	lds	r18, 0x01C2
    1dba:	30 91 c3 01 	lds	r19, 0x01C3
    1dbe:	80 91 cc 01 	lds	r24, 0x01CC
    1dc2:	90 91 cd 01 	lds	r25, 0x01CD
    1dc6:	28 17       	cp	r18, r24
    1dc8:	39 07       	cpc	r19, r25
    1dca:	81 f4       	brne	.+32     	; 0x1dec <__vector_5+0x7e>
        {
            TMR_u32Timer2Counter = 0;
    1dcc:	10 92 c3 01 	sts	0x01C3, r1
    1dd0:	10 92 c2 01 	sts	0x01C2, r1
            TCNT2 = TMR_u32Timer2Preload;
    1dd4:	e4 e4       	ldi	r30, 0x44	; 68
    1dd6:	f0 e0       	ldi	r31, 0x00	; 0
    1dd8:	80 91 c8 01 	lds	r24, 0x01C8
    1ddc:	90 91 c9 01 	lds	r25, 0x01C9
    1de0:	80 83       	st	Z, r24
            PVCallBack[TMR_TIMER2](); /*The ISR action*/
    1de2:	e0 91 d2 01 	lds	r30, 0x01D2
    1de6:	f0 91 d3 01 	lds	r31, 0x01D3
    1dea:	09 95       	icall
        }
    }
    return;
}
    1dec:	cf 91       	pop	r28
    1dee:	df 91       	pop	r29
    1df0:	ff 91       	pop	r31
    1df2:	ef 91       	pop	r30
    1df4:	bf 91       	pop	r27
    1df6:	af 91       	pop	r26
    1df8:	9f 91       	pop	r25
    1dfa:	8f 91       	pop	r24
    1dfc:	7f 91       	pop	r23
    1dfe:	6f 91       	pop	r22
    1e00:	5f 91       	pop	r21
    1e02:	4f 91       	pop	r20
    1e04:	3f 91       	pop	r19
    1e06:	2f 91       	pop	r18
    1e08:	0f 90       	pop	r0
    1e0a:	0f be       	out	0x3f, r0	; 63
    1e0c:	0f 90       	pop	r0
    1e0e:	1f 90       	pop	r1
    1e10:	18 95       	reti

00001e12 <__vector_10>:

/*-----------------------------ISRs of Compare Match timer interrupts----------------------------------*/

/*The ISR of Timer/Counter0 Compare Match interrupt*/
void __vector_10()
{
    1e12:	1f 92       	push	r1
    1e14:	0f 92       	push	r0
    1e16:	0f b6       	in	r0, 0x3f	; 63
    1e18:	0f 92       	push	r0
    1e1a:	11 24       	eor	r1, r1
    1e1c:	2f 93       	push	r18
    1e1e:	3f 93       	push	r19
    1e20:	4f 93       	push	r20
    1e22:	5f 93       	push	r21
    1e24:	6f 93       	push	r22
    1e26:	7f 93       	push	r23
    1e28:	8f 93       	push	r24
    1e2a:	9f 93       	push	r25
    1e2c:	af 93       	push	r26
    1e2e:	bf 93       	push	r27
    1e30:	ef 93       	push	r30
    1e32:	ff 93       	push	r31
    1e34:	df 93       	push	r29
    1e36:	cf 93       	push	r28
    1e38:	cd b7       	in	r28, 0x3d	; 61
    1e3a:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER0] != NULL)
    1e3c:	80 91 ce 01 	lds	r24, 0x01CE
    1e40:	90 91 cf 01 	lds	r25, 0x01CF
    1e44:	00 97       	sbiw	r24, 0x00	; 0
    1e46:	e9 f0       	breq	.+58     	; 0x1e82 <__vector_10+0x70>
    {
        TMR_u32Timer0Counter++;
    1e48:	80 91 be 01 	lds	r24, 0x01BE
    1e4c:	90 91 bf 01 	lds	r25, 0x01BF
    1e50:	01 96       	adiw	r24, 0x01	; 1
    1e52:	90 93 bf 01 	sts	0x01BF, r25
    1e56:	80 93 be 01 	sts	0x01BE, r24
        if (TMR_u32Timer0Counter == TMR_u32ReqTimer0Cntr)
    1e5a:	20 91 be 01 	lds	r18, 0x01BE
    1e5e:	30 91 bf 01 	lds	r19, 0x01BF
    1e62:	80 91 ca 01 	lds	r24, 0x01CA
    1e66:	90 91 cb 01 	lds	r25, 0x01CB
    1e6a:	28 17       	cp	r18, r24
    1e6c:	39 07       	cpc	r19, r25
    1e6e:	49 f4       	brne	.+18     	; 0x1e82 <__vector_10+0x70>
        {
            TMR_u32Timer0Counter = 0;
    1e70:	10 92 bf 01 	sts	0x01BF, r1
    1e74:	10 92 be 01 	sts	0x01BE, r1
            PVCallBack[TMR_TIMER0](); /*The ISR action*/
    1e78:	e0 91 ce 01 	lds	r30, 0x01CE
    1e7c:	f0 91 cf 01 	lds	r31, 0x01CF
    1e80:	09 95       	icall
        }
    }
}
    1e82:	cf 91       	pop	r28
    1e84:	df 91       	pop	r29
    1e86:	ff 91       	pop	r31
    1e88:	ef 91       	pop	r30
    1e8a:	bf 91       	pop	r27
    1e8c:	af 91       	pop	r26
    1e8e:	9f 91       	pop	r25
    1e90:	8f 91       	pop	r24
    1e92:	7f 91       	pop	r23
    1e94:	6f 91       	pop	r22
    1e96:	5f 91       	pop	r21
    1e98:	4f 91       	pop	r20
    1e9a:	3f 91       	pop	r19
    1e9c:	2f 91       	pop	r18
    1e9e:	0f 90       	pop	r0
    1ea0:	0f be       	out	0x3f, r0	; 63
    1ea2:	0f 90       	pop	r0
    1ea4:	1f 90       	pop	r1
    1ea6:	18 95       	reti

00001ea8 <__vector_7>:

/*The ISR of Timer/Counter1 Compare Match A interrupt*/
void __vector_7()
{
    1ea8:	1f 92       	push	r1
    1eaa:	0f 92       	push	r0
    1eac:	0f b6       	in	r0, 0x3f	; 63
    1eae:	0f 92       	push	r0
    1eb0:	11 24       	eor	r1, r1
    1eb2:	2f 93       	push	r18
    1eb4:	3f 93       	push	r19
    1eb6:	4f 93       	push	r20
    1eb8:	5f 93       	push	r21
    1eba:	6f 93       	push	r22
    1ebc:	7f 93       	push	r23
    1ebe:	8f 93       	push	r24
    1ec0:	9f 93       	push	r25
    1ec2:	af 93       	push	r26
    1ec4:	bf 93       	push	r27
    1ec6:	ef 93       	push	r30
    1ec8:	ff 93       	push	r31
    1eca:	df 93       	push	r29
    1ecc:	cf 93       	push	r28
    1ece:	cd b7       	in	r28, 0x3d	; 61
    1ed0:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER1] != NULL)
    1ed2:	80 91 d0 01 	lds	r24, 0x01D0
    1ed6:	90 91 d1 01 	lds	r25, 0x01D1
    1eda:	00 97       	sbiw	r24, 0x00	; 0
    1edc:	e9 f0       	breq	.+58     	; 0x1f18 <__vector_7+0x70>
    {
        TMR_u32Timer1Counter++;
    1ede:	80 91 c0 01 	lds	r24, 0x01C0
    1ee2:	90 91 c1 01 	lds	r25, 0x01C1
    1ee6:	01 96       	adiw	r24, 0x01	; 1
    1ee8:	90 93 c1 01 	sts	0x01C1, r25
    1eec:	80 93 c0 01 	sts	0x01C0, r24
        if (TMR_u32Timer1Counter == TMR_u32ReqTimer1Cntr)
    1ef0:	20 91 c0 01 	lds	r18, 0x01C0
    1ef4:	30 91 c1 01 	lds	r19, 0x01C1
    1ef8:	80 91 b4 01 	lds	r24, 0x01B4
    1efc:	90 91 b5 01 	lds	r25, 0x01B5
    1f00:	28 17       	cp	r18, r24
    1f02:	39 07       	cpc	r19, r25
    1f04:	49 f4       	brne	.+18     	; 0x1f18 <__vector_7+0x70>
        {
            TMR_u32Timer1Counter = 0;
    1f06:	10 92 c1 01 	sts	0x01C1, r1
    1f0a:	10 92 c0 01 	sts	0x01C0, r1
            PVCallBack[TMR_TIMER1](); /*The ISR action*/
    1f0e:	e0 91 d0 01 	lds	r30, 0x01D0
    1f12:	f0 91 d1 01 	lds	r31, 0x01D1
    1f16:	09 95       	icall
        }
    }
}
    1f18:	cf 91       	pop	r28
    1f1a:	df 91       	pop	r29
    1f1c:	ff 91       	pop	r31
    1f1e:	ef 91       	pop	r30
    1f20:	bf 91       	pop	r27
    1f22:	af 91       	pop	r26
    1f24:	9f 91       	pop	r25
    1f26:	8f 91       	pop	r24
    1f28:	7f 91       	pop	r23
    1f2a:	6f 91       	pop	r22
    1f2c:	5f 91       	pop	r21
    1f2e:	4f 91       	pop	r20
    1f30:	3f 91       	pop	r19
    1f32:	2f 91       	pop	r18
    1f34:	0f 90       	pop	r0
    1f36:	0f be       	out	0x3f, r0	; 63
    1f38:	0f 90       	pop	r0
    1f3a:	1f 90       	pop	r1
    1f3c:	18 95       	reti

00001f3e <__vector_8>:

/*The ISR of Timer/Counter1 Compare Match B interrupt*/
void __vector_8()
{
    1f3e:	1f 92       	push	r1
    1f40:	0f 92       	push	r0
    1f42:	0f b6       	in	r0, 0x3f	; 63
    1f44:	0f 92       	push	r0
    1f46:	11 24       	eor	r1, r1
    1f48:	2f 93       	push	r18
    1f4a:	3f 93       	push	r19
    1f4c:	4f 93       	push	r20
    1f4e:	5f 93       	push	r21
    1f50:	6f 93       	push	r22
    1f52:	7f 93       	push	r23
    1f54:	8f 93       	push	r24
    1f56:	9f 93       	push	r25
    1f58:	af 93       	push	r26
    1f5a:	bf 93       	push	r27
    1f5c:	ef 93       	push	r30
    1f5e:	ff 93       	push	r31
    1f60:	df 93       	push	r29
    1f62:	cf 93       	push	r28
    1f64:	cd b7       	in	r28, 0x3d	; 61
    1f66:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER1] != NULL)
    1f68:	80 91 d0 01 	lds	r24, 0x01D0
    1f6c:	90 91 d1 01 	lds	r25, 0x01D1
    1f70:	00 97       	sbiw	r24, 0x00	; 0
    1f72:	e9 f0       	breq	.+58     	; 0x1fae <__vector_8+0x70>
    {
        TMR_u32Timer1Counter++;
    1f74:	80 91 c0 01 	lds	r24, 0x01C0
    1f78:	90 91 c1 01 	lds	r25, 0x01C1
    1f7c:	01 96       	adiw	r24, 0x01	; 1
    1f7e:	90 93 c1 01 	sts	0x01C1, r25
    1f82:	80 93 c0 01 	sts	0x01C0, r24
        if (TMR_u32Timer1Counter == TMR_u32ReqTimer1Cntr)
    1f86:	20 91 c0 01 	lds	r18, 0x01C0
    1f8a:	30 91 c1 01 	lds	r19, 0x01C1
    1f8e:	80 91 b4 01 	lds	r24, 0x01B4
    1f92:	90 91 b5 01 	lds	r25, 0x01B5
    1f96:	28 17       	cp	r18, r24
    1f98:	39 07       	cpc	r19, r25
    1f9a:	49 f4       	brne	.+18     	; 0x1fae <__vector_8+0x70>
        {
            TMR_u32Timer1Counter = 0;
    1f9c:	10 92 c1 01 	sts	0x01C1, r1
    1fa0:	10 92 c0 01 	sts	0x01C0, r1
            PVCallBack[TMR_TIMER1](); /*The ISR action*/
    1fa4:	e0 91 d0 01 	lds	r30, 0x01D0
    1fa8:	f0 91 d1 01 	lds	r31, 0x01D1
    1fac:	09 95       	icall
        }
    }
}
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	ff 91       	pop	r31
    1fb4:	ef 91       	pop	r30
    1fb6:	bf 91       	pop	r27
    1fb8:	af 91       	pop	r26
    1fba:	9f 91       	pop	r25
    1fbc:	8f 91       	pop	r24
    1fbe:	7f 91       	pop	r23
    1fc0:	6f 91       	pop	r22
    1fc2:	5f 91       	pop	r21
    1fc4:	4f 91       	pop	r20
    1fc6:	3f 91       	pop	r19
    1fc8:	2f 91       	pop	r18
    1fca:	0f 90       	pop	r0
    1fcc:	0f be       	out	0x3f, r0	; 63
    1fce:	0f 90       	pop	r0
    1fd0:	1f 90       	pop	r1
    1fd2:	18 95       	reti

00001fd4 <__vector_4>:

/*The ISR of Timer/Counter2 Compare Match interrupt*/
void __vector_4()
{
    1fd4:	1f 92       	push	r1
    1fd6:	0f 92       	push	r0
    1fd8:	0f b6       	in	r0, 0x3f	; 63
    1fda:	0f 92       	push	r0
    1fdc:	11 24       	eor	r1, r1
    1fde:	2f 93       	push	r18
    1fe0:	3f 93       	push	r19
    1fe2:	4f 93       	push	r20
    1fe4:	5f 93       	push	r21
    1fe6:	6f 93       	push	r22
    1fe8:	7f 93       	push	r23
    1fea:	8f 93       	push	r24
    1fec:	9f 93       	push	r25
    1fee:	af 93       	push	r26
    1ff0:	bf 93       	push	r27
    1ff2:	ef 93       	push	r30
    1ff4:	ff 93       	push	r31
    1ff6:	df 93       	push	r29
    1ff8:	cf 93       	push	r28
    1ffa:	cd b7       	in	r28, 0x3d	; 61
    1ffc:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER2] != NULL)
    1ffe:	80 91 d2 01 	lds	r24, 0x01D2
    2002:	90 91 d3 01 	lds	r25, 0x01D3
    2006:	00 97       	sbiw	r24, 0x00	; 0
    2008:	e9 f0       	breq	.+58     	; 0x2044 <__vector_4+0x70>
    {
        TMR_u32Timer2Counter++;
    200a:	80 91 c2 01 	lds	r24, 0x01C2
    200e:	90 91 c3 01 	lds	r25, 0x01C3
    2012:	01 96       	adiw	r24, 0x01	; 1
    2014:	90 93 c3 01 	sts	0x01C3, r25
    2018:	80 93 c2 01 	sts	0x01C2, r24
        if (TMR_u32Timer2Counter == TMR_u32ReqTimer2Cntr)
    201c:	20 91 c2 01 	lds	r18, 0x01C2
    2020:	30 91 c3 01 	lds	r19, 0x01C3
    2024:	80 91 cc 01 	lds	r24, 0x01CC
    2028:	90 91 cd 01 	lds	r25, 0x01CD
    202c:	28 17       	cp	r18, r24
    202e:	39 07       	cpc	r19, r25
    2030:	49 f4       	brne	.+18     	; 0x2044 <__vector_4+0x70>
        {
            TMR_u32Timer2Counter = 0;
    2032:	10 92 c3 01 	sts	0x01C3, r1
    2036:	10 92 c2 01 	sts	0x01C2, r1
            PVCallBack[TMR_TIMER2](); /*The ISR action*/
    203a:	e0 91 d2 01 	lds	r30, 0x01D2
    203e:	f0 91 d3 01 	lds	r31, 0x01D3
    2042:	09 95       	icall
        }
    }
}
    2044:	cf 91       	pop	r28
    2046:	df 91       	pop	r29
    2048:	ff 91       	pop	r31
    204a:	ef 91       	pop	r30
    204c:	bf 91       	pop	r27
    204e:	af 91       	pop	r26
    2050:	9f 91       	pop	r25
    2052:	8f 91       	pop	r24
    2054:	7f 91       	pop	r23
    2056:	6f 91       	pop	r22
    2058:	5f 91       	pop	r21
    205a:	4f 91       	pop	r20
    205c:	3f 91       	pop	r19
    205e:	2f 91       	pop	r18
    2060:	0f 90       	pop	r0
    2062:	0f be       	out	0x3f, r0	; 63
    2064:	0f 90       	pop	r0
    2066:	1f 90       	pop	r1
    2068:	18 95       	reti

0000206a <USART_VidInit>:
#include "USART_private.h"
#include "USART_interface.h"
#include "USART_config.h"

void USART_VidInit()
{
    206a:	df 93       	push	r29
    206c:	cf 93       	push	r28
    206e:	cd b7       	in	r28, 0x3d	; 61
    2070:	de b7       	in	r29, 0x3e	; 62
        break;
    }

#elif (USART_MODE == USART_DBL_SPD_MODE)

    SET_BIT(UCSRA, UCSRA_U2X);
    2072:	ab e2       	ldi	r26, 0x2B	; 43
    2074:	b0 e0       	ldi	r27, 0x00	; 0
    2076:	eb e2       	ldi	r30, 0x2B	; 43
    2078:	f0 e0       	ldi	r31, 0x00	; 0
    207a:	80 81       	ld	r24, Z
    207c:	82 60       	ori	r24, 0x02	; 2
    207e:	8c 93       	st	X, r24

    UBRRL = UBRR_Value2X;
    2080:	e9 e2       	ldi	r30, 0x29	; 41
    2082:	f0 e0       	ldi	r31, 0x00	; 0
    2084:	87 e6       	ldi	r24, 0x67	; 103
    2086:	80 83       	st	Z, r24
    UBRRH = (UBRR_Value2X >> 8);
    2088:	e0 e4       	ldi	r30, 0x40	; 64
    208a:	f0 e0       	ldi	r31, 0x00	; 0
    208c:	10 82       	st	Z, r1

    /* Checking the transmitter state */
    if (USART_TX_STATE == USART_ENABLE)
        SET_BIT(UCSRB, UCSRB_TXEN);
    208e:	aa e2       	ldi	r26, 0x2A	; 42
    2090:	b0 e0       	ldi	r27, 0x00	; 0
    2092:	ea e2       	ldi	r30, 0x2A	; 42
    2094:	f0 e0       	ldi	r31, 0x00	; 0
    2096:	80 81       	ld	r24, Z
    2098:	88 60       	ori	r24, 0x08	; 8
    209a:	8c 93       	st	X, r24

    /* Checking the receiver state */
    if (USART_RX_STATE == USART_ENABLE)
        SET_BIT(UCSRB, UCSRB_RXEN);
    209c:	aa e2       	ldi	r26, 0x2A	; 42
    209e:	b0 e0       	ldi	r27, 0x00	; 0
    20a0:	ea e2       	ldi	r30, 0x2A	; 42
    20a2:	f0 e0       	ldi	r31, 0x00	; 0
    20a4:	80 81       	ld	r24, Z
    20a6:	80 61       	ori	r24, 0x10	; 16
    20a8:	8c 93       	st	X, r24

        break;

    case USART_EIGHT_BITS:

        UCSRC |= (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    20aa:	a0 e4       	ldi	r26, 0x40	; 64
    20ac:	b0 e0       	ldi	r27, 0x00	; 0
    20ae:	e0 e4       	ldi	r30, 0x40	; 64
    20b0:	f0 e0       	ldi	r31, 0x00	; 0
    20b2:	80 81       	ld	r24, Z
    20b4:	86 68       	ori	r24, 0x86	; 134
    20b6:	8c 93       	st	X, r24
        SET_BIT(UCSRB, UCSRB_UCSZ2);

        break;
    }
#endif
}
    20b8:	cf 91       	pop	r28
    20ba:	df 91       	pop	r29
    20bc:	08 95       	ret

000020be <USART_VidSendByte>:

void USART_VidSendByte(u8 Copy_u8Data)
{
    20be:	df 93       	push	r29
    20c0:	cf 93       	push	r28
    20c2:	0f 92       	push	r0
    20c4:	cd b7       	in	r28, 0x3d	; 61
    20c6:	de b7       	in	r29, 0x3e	; 62
    20c8:	89 83       	std	Y+1, r24	; 0x01
    /* Put data into buffer, sends the data */
    UDR = Copy_u8Data;
    20ca:	ec e2       	ldi	r30, 0x2C	; 44
    20cc:	f0 e0       	ldi	r31, 0x00	; 0
    20ce:	89 81       	ldd	r24, Y+1	; 0x01
    20d0:	80 83       	st	Z, r24

    while (GET_BIT(UCSRA, UCSRA_UDRE) == 0)
    20d2:	eb e2       	ldi	r30, 0x2B	; 43
    20d4:	f0 e0       	ldi	r31, 0x00	; 0
    20d6:	80 81       	ld	r24, Z
    20d8:	82 95       	swap	r24
    20da:	86 95       	lsr	r24
    20dc:	87 70       	andi	r24, 0x07	; 7
    20de:	88 2f       	mov	r24, r24
    20e0:	90 e0       	ldi	r25, 0x00	; 0
    20e2:	81 70       	andi	r24, 0x01	; 1
    20e4:	90 70       	andi	r25, 0x00	; 0
    20e6:	00 97       	sbiw	r24, 0x00	; 0
    20e8:	a1 f3       	breq	.-24     	; 0x20d2 <USART_VidSendByte+0x14>
        ;
}
    20ea:	0f 90       	pop	r0
    20ec:	cf 91       	pop	r28
    20ee:	df 91       	pop	r29
    20f0:	08 95       	ret

000020f2 <USART_u8ReceiveByte>:

u8 USART_u8ReceiveByte()
{
    20f2:	df 93       	push	r29
    20f4:	cf 93       	push	r28
    20f6:	cd b7       	in	r28, 0x3d	; 61
    20f8:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA, UCSRA_RXC) == 0)
    20fa:	eb e2       	ldi	r30, 0x2B	; 43
    20fc:	f0 e0       	ldi	r31, 0x00	; 0
    20fe:	80 81       	ld	r24, Z
    2100:	88 23       	and	r24, r24
    2102:	dc f7       	brge	.-10     	; 0x20fa <USART_u8ReceiveByte+0x8>
        ;
    return UDR;
    2104:	ec e2       	ldi	r30, 0x2C	; 44
    2106:	f0 e0       	ldi	r31, 0x00	; 0
    2108:	80 81       	ld	r24, Z
}
    210a:	cf 91       	pop	r28
    210c:	df 91       	pop	r29
    210e:	08 95       	ret

00002110 <USART_VidSendString>:

void USART_VidSendString(u8 *Copy_u8String)
{
    2110:	df 93       	push	r29
    2112:	cf 93       	push	r28
    2114:	00 d0       	rcall	.+0      	; 0x2116 <USART_VidSendString+0x6>
    2116:	cd b7       	in	r28, 0x3d	; 61
    2118:	de b7       	in	r29, 0x3e	; 62
    211a:	9a 83       	std	Y+2, r25	; 0x02
    211c:	89 83       	std	Y+1, r24	; 0x01
    211e:	0a c0       	rjmp	.+20     	; 0x2134 <USART_VidSendString+0x24>
    while (*Copy_u8String != '\0')
    {
        USART_VidSendByte(*Copy_u8String);
    2120:	e9 81       	ldd	r30, Y+1	; 0x01
    2122:	fa 81       	ldd	r31, Y+2	; 0x02
    2124:	80 81       	ld	r24, Z
    2126:	0e 94 5f 10 	call	0x20be	; 0x20be <USART_VidSendByte>
        Copy_u8String++;
    212a:	89 81       	ldd	r24, Y+1	; 0x01
    212c:	9a 81       	ldd	r25, Y+2	; 0x02
    212e:	01 96       	adiw	r24, 0x01	; 1
    2130:	9a 83       	std	Y+2, r25	; 0x02
    2132:	89 83       	std	Y+1, r24	; 0x01
    return UDR;
}

void USART_VidSendString(u8 *Copy_u8String)
{
    while (*Copy_u8String != '\0')
    2134:	e9 81       	ldd	r30, Y+1	; 0x01
    2136:	fa 81       	ldd	r31, Y+2	; 0x02
    2138:	80 81       	ld	r24, Z
    213a:	88 23       	and	r24, r24
    213c:	89 f7       	brne	.-30     	; 0x2120 <USART_VidSendString+0x10>
    {
        USART_VidSendByte(*Copy_u8String);
        Copy_u8String++;
    }
}
    213e:	0f 90       	pop	r0
    2140:	0f 90       	pop	r0
    2142:	cf 91       	pop	r28
    2144:	df 91       	pop	r29
    2146:	08 95       	ret

00002148 <USART_VidReceiveString>:

void USART_VidReceiveString(u8 *Copy_u8String)
{
    2148:	0f 93       	push	r16
    214a:	1f 93       	push	r17
    214c:	df 93       	push	r29
    214e:	cf 93       	push	r28
    2150:	00 d0       	rcall	.+0      	; 0x2152 <USART_VidReceiveString+0xa>
    2152:	0f 92       	push	r0
    2154:	cd b7       	in	r28, 0x3d	; 61
    2156:	de b7       	in	r29, 0x3e	; 62
    2158:	9b 83       	std	Y+3, r25	; 0x03
    215a:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0;
    215c:	19 82       	std	Y+1, r1	; 0x01
    Copy_u8String[i] = USART_u8ReceiveByte();
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	28 2f       	mov	r18, r24
    2162:	30 e0       	ldi	r19, 0x00	; 0
    2164:	8a 81       	ldd	r24, Y+2	; 0x02
    2166:	9b 81       	ldd	r25, Y+3	; 0x03
    2168:	8c 01       	movw	r16, r24
    216a:	02 0f       	add	r16, r18
    216c:	13 1f       	adc	r17, r19
    216e:	0e 94 79 10 	call	0x20f2	; 0x20f2 <USART_u8ReceiveByte>
    2172:	f8 01       	movw	r30, r16
    2174:	80 83       	st	Z, r24
    USART_VidSendByte(Copy_u8String[i]);
    2176:	89 81       	ldd	r24, Y+1	; 0x01
    2178:	28 2f       	mov	r18, r24
    217a:	30 e0       	ldi	r19, 0x00	; 0
    217c:	8a 81       	ldd	r24, Y+2	; 0x02
    217e:	9b 81       	ldd	r25, Y+3	; 0x03
    2180:	fc 01       	movw	r30, r24
    2182:	e2 0f       	add	r30, r18
    2184:	f3 1f       	adc	r31, r19
    2186:	80 81       	ld	r24, Z
    2188:	0e 94 5f 10 	call	0x20be	; 0x20be <USART_VidSendByte>
    218c:	1a c0       	rjmp	.+52     	; 0x21c2 <USART_VidReceiveString+0x7a>
    while (Copy_u8String[i] != '\r')
    {
        i++;
    218e:	89 81       	ldd	r24, Y+1	; 0x01
    2190:	8f 5f       	subi	r24, 0xFF	; 255
    2192:	89 83       	std	Y+1, r24	; 0x01
        Copy_u8String[i] = USART_u8ReceiveByte();
    2194:	89 81       	ldd	r24, Y+1	; 0x01
    2196:	28 2f       	mov	r18, r24
    2198:	30 e0       	ldi	r19, 0x00	; 0
    219a:	8a 81       	ldd	r24, Y+2	; 0x02
    219c:	9b 81       	ldd	r25, Y+3	; 0x03
    219e:	8c 01       	movw	r16, r24
    21a0:	02 0f       	add	r16, r18
    21a2:	13 1f       	adc	r17, r19
    21a4:	0e 94 79 10 	call	0x20f2	; 0x20f2 <USART_u8ReceiveByte>
    21a8:	f8 01       	movw	r30, r16
    21aa:	80 83       	st	Z, r24
        USART_VidSendByte(Copy_u8String[i]);
    21ac:	89 81       	ldd	r24, Y+1	; 0x01
    21ae:	28 2f       	mov	r18, r24
    21b0:	30 e0       	ldi	r19, 0x00	; 0
    21b2:	8a 81       	ldd	r24, Y+2	; 0x02
    21b4:	9b 81       	ldd	r25, Y+3	; 0x03
    21b6:	fc 01       	movw	r30, r24
    21b8:	e2 0f       	add	r30, r18
    21ba:	f3 1f       	adc	r31, r19
    21bc:	80 81       	ld	r24, Z
    21be:	0e 94 5f 10 	call	0x20be	; 0x20be <USART_VidSendByte>
void USART_VidReceiveString(u8 *Copy_u8String)
{
    u8 i = 0;
    Copy_u8String[i] = USART_u8ReceiveByte();
    USART_VidSendByte(Copy_u8String[i]);
    while (Copy_u8String[i] != '\r')
    21c2:	89 81       	ldd	r24, Y+1	; 0x01
    21c4:	28 2f       	mov	r18, r24
    21c6:	30 e0       	ldi	r19, 0x00	; 0
    21c8:	8a 81       	ldd	r24, Y+2	; 0x02
    21ca:	9b 81       	ldd	r25, Y+3	; 0x03
    21cc:	fc 01       	movw	r30, r24
    21ce:	e2 0f       	add	r30, r18
    21d0:	f3 1f       	adc	r31, r19
    21d2:	80 81       	ld	r24, Z
    21d4:	8d 30       	cpi	r24, 0x0D	; 13
    21d6:	d9 f6       	brne	.-74     	; 0x218e <USART_VidReceiveString+0x46>
    {
        i++;
        Copy_u8String[i] = USART_u8ReceiveByte();
        USART_VidSendByte(Copy_u8String[i]);
    }
    Copy_u8String[i] = '\0';
    21d8:	89 81       	ldd	r24, Y+1	; 0x01
    21da:	28 2f       	mov	r18, r24
    21dc:	30 e0       	ldi	r19, 0x00	; 0
    21de:	8a 81       	ldd	r24, Y+2	; 0x02
    21e0:	9b 81       	ldd	r25, Y+3	; 0x03
    21e2:	fc 01       	movw	r30, r24
    21e4:	e2 0f       	add	r30, r18
    21e6:	f3 1f       	adc	r31, r19
    21e8:	10 82       	st	Z, r1
}
    21ea:	0f 90       	pop	r0
    21ec:	0f 90       	pop	r0
    21ee:	0f 90       	pop	r0
    21f0:	cf 91       	pop	r28
    21f2:	df 91       	pop	r29
    21f4:	1f 91       	pop	r17
    21f6:	0f 91       	pop	r16
    21f8:	08 95       	ret

000021fa <CLCD_VidSendCommand>:
#include "../MCAL/DIO_interface.h"
#include "CLCD_config.h"
#include <util/delay.h>

void CLCD_VidSendCommand(u8 Copy_u8Command) //Function to send commands to CLCD
{
    21fa:	df 93       	push	r29
    21fc:	cf 93       	push	r28
    21fe:	cd b7       	in	r28, 0x3d	; 61
    2200:	de b7       	in	r29, 0x3e	; 62
    2202:	2f 97       	sbiw	r28, 0x0f	; 15
    2204:	0f b6       	in	r0, 0x3f	; 63
    2206:	f8 94       	cli
    2208:	de bf       	out	0x3e, r29	; 62
    220a:	0f be       	out	0x3f, r0	; 63
    220c:	cd bf       	out	0x3d, r28	; 61
    220e:	8f 87       	std	Y+15, r24	; 0x0f
    //Set RS pin as low
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, low);
    2210:	81 e0       	ldi	r24, 0x01	; 1
    2212:	65 e0       	ldi	r22, 0x05	; 5
    2214:	40 e0       	ldi	r20, 0x00	; 0
    2216:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>

    //Set RW pin as low to write
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, low);
    221a:	81 e0       	ldi	r24, 0x01	; 1
    221c:	66 e0       	ldi	r22, 0x06	; 6
    221e:	40 e0       	ldi	r20, 0x00	; 0
    2220:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>

    //Send command to data port (pins 0 - 7)
    DIO_VidSetPortValue(CLCD_DATA_PORT, Copy_u8Command);
    2224:	83 e0       	ldi	r24, 0x03	; 3
    2226:	6f 85       	ldd	r22, Y+15	; 0x0f
    2228:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_VidSetPortValue>

    //Set Enable pin
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, high);
    222c:	81 e0       	ldi	r24, 0x01	; 1
    222e:	67 e0       	ldi	r22, 0x07	; 7
    2230:	41 e0       	ldi	r20, 0x01	; 1
    2232:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
    2236:	80 e0       	ldi	r24, 0x00	; 0
    2238:	90 e0       	ldi	r25, 0x00	; 0
    223a:	a0 e0       	ldi	r26, 0x00	; 0
    223c:	b0 e4       	ldi	r27, 0x40	; 64
    223e:	8b 87       	std	Y+11, r24	; 0x0b
    2240:	9c 87       	std	Y+12, r25	; 0x0c
    2242:	ad 87       	std	Y+13, r26	; 0x0d
    2244:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2246:	6b 85       	ldd	r22, Y+11	; 0x0b
    2248:	7c 85       	ldd	r23, Y+12	; 0x0c
    224a:	8d 85       	ldd	r24, Y+13	; 0x0d
    224c:	9e 85       	ldd	r25, Y+14	; 0x0e
    224e:	20 e0       	ldi	r18, 0x00	; 0
    2250:	30 e0       	ldi	r19, 0x00	; 0
    2252:	4a ef       	ldi	r20, 0xFA	; 250
    2254:	54 e4       	ldi	r21, 0x44	; 68
    2256:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225a:	dc 01       	movw	r26, r24
    225c:	cb 01       	movw	r24, r22
    225e:	8f 83       	std	Y+7, r24	; 0x07
    2260:	98 87       	std	Y+8, r25	; 0x08
    2262:	a9 87       	std	Y+9, r26	; 0x09
    2264:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2266:	6f 81       	ldd	r22, Y+7	; 0x07
    2268:	78 85       	ldd	r23, Y+8	; 0x08
    226a:	89 85       	ldd	r24, Y+9	; 0x09
    226c:	9a 85       	ldd	r25, Y+10	; 0x0a
    226e:	20 e0       	ldi	r18, 0x00	; 0
    2270:	30 e0       	ldi	r19, 0x00	; 0
    2272:	40 e8       	ldi	r20, 0x80	; 128
    2274:	5f e3       	ldi	r21, 0x3F	; 63
    2276:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    227a:	88 23       	and	r24, r24
    227c:	2c f4       	brge	.+10     	; 0x2288 <CLCD_VidSendCommand+0x8e>
		__ticks = 1;
    227e:	81 e0       	ldi	r24, 0x01	; 1
    2280:	90 e0       	ldi	r25, 0x00	; 0
    2282:	9e 83       	std	Y+6, r25	; 0x06
    2284:	8d 83       	std	Y+5, r24	; 0x05
    2286:	3f c0       	rjmp	.+126    	; 0x2306 <CLCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    2288:	6f 81       	ldd	r22, Y+7	; 0x07
    228a:	78 85       	ldd	r23, Y+8	; 0x08
    228c:	89 85       	ldd	r24, Y+9	; 0x09
    228e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2290:	20 e0       	ldi	r18, 0x00	; 0
    2292:	3f ef       	ldi	r19, 0xFF	; 255
    2294:	4f e7       	ldi	r20, 0x7F	; 127
    2296:	57 e4       	ldi	r21, 0x47	; 71
    2298:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    229c:	18 16       	cp	r1, r24
    229e:	4c f5       	brge	.+82     	; 0x22f2 <CLCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    22a0:	6b 85       	ldd	r22, Y+11	; 0x0b
    22a2:	7c 85       	ldd	r23, Y+12	; 0x0c
    22a4:	8d 85       	ldd	r24, Y+13	; 0x0d
    22a6:	9e 85       	ldd	r25, Y+14	; 0x0e
    22a8:	20 e0       	ldi	r18, 0x00	; 0
    22aa:	30 e0       	ldi	r19, 0x00	; 0
    22ac:	40 e2       	ldi	r20, 0x20	; 32
    22ae:	51 e4       	ldi	r21, 0x41	; 65
    22b0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    22b4:	dc 01       	movw	r26, r24
    22b6:	cb 01       	movw	r24, r22
    22b8:	bc 01       	movw	r22, r24
    22ba:	cd 01       	movw	r24, r26
    22bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22c0:	dc 01       	movw	r26, r24
    22c2:	cb 01       	movw	r24, r22
    22c4:	9e 83       	std	Y+6, r25	; 0x06
    22c6:	8d 83       	std	Y+5, r24	; 0x05
    22c8:	0f c0       	rjmp	.+30     	; 0x22e8 <CLCD_VidSendCommand+0xee>
    22ca:	88 ec       	ldi	r24, 0xC8	; 200
    22cc:	90 e0       	ldi	r25, 0x00	; 0
    22ce:	9c 83       	std	Y+4, r25	; 0x04
    22d0:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    22d2:	8b 81       	ldd	r24, Y+3	; 0x03
    22d4:	9c 81       	ldd	r25, Y+4	; 0x04
    22d6:	01 97       	sbiw	r24, 0x01	; 1
    22d8:	f1 f7       	brne	.-4      	; 0x22d6 <CLCD_VidSendCommand+0xdc>
    22da:	9c 83       	std	Y+4, r25	; 0x04
    22dc:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22de:	8d 81       	ldd	r24, Y+5	; 0x05
    22e0:	9e 81       	ldd	r25, Y+6	; 0x06
    22e2:	01 97       	sbiw	r24, 0x01	; 1
    22e4:	9e 83       	std	Y+6, r25	; 0x06
    22e6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22e8:	8d 81       	ldd	r24, Y+5	; 0x05
    22ea:	9e 81       	ldd	r25, Y+6	; 0x06
    22ec:	00 97       	sbiw	r24, 0x00	; 0
    22ee:	69 f7       	brne	.-38     	; 0x22ca <CLCD_VidSendCommand+0xd0>
    22f0:	14 c0       	rjmp	.+40     	; 0x231a <CLCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    22f2:	6f 81       	ldd	r22, Y+7	; 0x07
    22f4:	78 85       	ldd	r23, Y+8	; 0x08
    22f6:	89 85       	ldd	r24, Y+9	; 0x09
    22f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    22fa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22fe:	dc 01       	movw	r26, r24
    2300:	cb 01       	movw	r24, r22
    2302:	9e 83       	std	Y+6, r25	; 0x06
    2304:	8d 83       	std	Y+5, r24	; 0x05
    2306:	8d 81       	ldd	r24, Y+5	; 0x05
    2308:	9e 81       	ldd	r25, Y+6	; 0x06
    230a:	9a 83       	std	Y+2, r25	; 0x02
    230c:	89 83       	std	Y+1, r24	; 0x01
    230e:	89 81       	ldd	r24, Y+1	; 0x01
    2310:	9a 81       	ldd	r25, Y+2	; 0x02
    2312:	01 97       	sbiw	r24, 0x01	; 1
    2314:	f1 f7       	brne	.-4      	; 0x2312 <CLCD_VidSendCommand+0x118>
    2316:	9a 83       	std	Y+2, r25	; 0x02
    2318:	89 83       	std	Y+1, r24	; 0x01

    //Delay
    _delay_ms(2);

    //Clearing Enable pin
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, low);
    231a:	81 e0       	ldi	r24, 0x01	; 1
    231c:	67 e0       	ldi	r22, 0x07	; 7
    231e:	40 e0       	ldi	r20, 0x00	; 0
    2320:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
}
    2324:	2f 96       	adiw	r28, 0x0f	; 15
    2326:	0f b6       	in	r0, 0x3f	; 63
    2328:	f8 94       	cli
    232a:	de bf       	out	0x3e, r29	; 62
    232c:	0f be       	out	0x3f, r0	; 63
    232e:	cd bf       	out	0x3d, r28	; 61
    2330:	cf 91       	pop	r28
    2332:	df 91       	pop	r29
    2334:	08 95       	ret

00002336 <CLCD_VidSendData>:

void CLCD_VidSendData(u8 Copy_u8Data) //Function to send data to CLCD
{
    2336:	df 93       	push	r29
    2338:	cf 93       	push	r28
    233a:	cd b7       	in	r28, 0x3d	; 61
    233c:	de b7       	in	r29, 0x3e	; 62
    233e:	2f 97       	sbiw	r28, 0x0f	; 15
    2340:	0f b6       	in	r0, 0x3f	; 63
    2342:	f8 94       	cli
    2344:	de bf       	out	0x3e, r29	; 62
    2346:	0f be       	out	0x3f, r0	; 63
    2348:	cd bf       	out	0x3d, r28	; 61
    234a:	8f 87       	std	Y+15, r24	; 0x0f
    //Set RS pin as high
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, high);
    234c:	81 e0       	ldi	r24, 0x01	; 1
    234e:	65 e0       	ldi	r22, 0x05	; 5
    2350:	41 e0       	ldi	r20, 0x01	; 1
    2352:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>

    //Set RW pin as low to write
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, low);
    2356:	81 e0       	ldi	r24, 0x01	; 1
    2358:	66 e0       	ldi	r22, 0x06	; 6
    235a:	40 e0       	ldi	r20, 0x00	; 0
    235c:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>

    //Send data to data port (pins 0 - 7)
    DIO_VidSetPortValue(CLCD_DATA_PORT, Copy_u8Data);
    2360:	83 e0       	ldi	r24, 0x03	; 3
    2362:	6f 85       	ldd	r22, Y+15	; 0x0f
    2364:	0e 94 30 0a 	call	0x1460	; 0x1460 <DIO_VidSetPortValue>

    //Set Enable pin
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, high);
    2368:	81 e0       	ldi	r24, 0x01	; 1
    236a:	67 e0       	ldi	r22, 0x07	; 7
    236c:	41 e0       	ldi	r20, 0x01	; 1
    236e:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
    2372:	80 e0       	ldi	r24, 0x00	; 0
    2374:	90 e0       	ldi	r25, 0x00	; 0
    2376:	a0 e0       	ldi	r26, 0x00	; 0
    2378:	b0 e4       	ldi	r27, 0x40	; 64
    237a:	8b 87       	std	Y+11, r24	; 0x0b
    237c:	9c 87       	std	Y+12, r25	; 0x0c
    237e:	ad 87       	std	Y+13, r26	; 0x0d
    2380:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2382:	6b 85       	ldd	r22, Y+11	; 0x0b
    2384:	7c 85       	ldd	r23, Y+12	; 0x0c
    2386:	8d 85       	ldd	r24, Y+13	; 0x0d
    2388:	9e 85       	ldd	r25, Y+14	; 0x0e
    238a:	20 e0       	ldi	r18, 0x00	; 0
    238c:	30 e0       	ldi	r19, 0x00	; 0
    238e:	4a ef       	ldi	r20, 0xFA	; 250
    2390:	54 e4       	ldi	r21, 0x44	; 68
    2392:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2396:	dc 01       	movw	r26, r24
    2398:	cb 01       	movw	r24, r22
    239a:	8f 83       	std	Y+7, r24	; 0x07
    239c:	98 87       	std	Y+8, r25	; 0x08
    239e:	a9 87       	std	Y+9, r26	; 0x09
    23a0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    23a2:	6f 81       	ldd	r22, Y+7	; 0x07
    23a4:	78 85       	ldd	r23, Y+8	; 0x08
    23a6:	89 85       	ldd	r24, Y+9	; 0x09
    23a8:	9a 85       	ldd	r25, Y+10	; 0x0a
    23aa:	20 e0       	ldi	r18, 0x00	; 0
    23ac:	30 e0       	ldi	r19, 0x00	; 0
    23ae:	40 e8       	ldi	r20, 0x80	; 128
    23b0:	5f e3       	ldi	r21, 0x3F	; 63
    23b2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    23b6:	88 23       	and	r24, r24
    23b8:	2c f4       	brge	.+10     	; 0x23c4 <CLCD_VidSendData+0x8e>
		__ticks = 1;
    23ba:	81 e0       	ldi	r24, 0x01	; 1
    23bc:	90 e0       	ldi	r25, 0x00	; 0
    23be:	9e 83       	std	Y+6, r25	; 0x06
    23c0:	8d 83       	std	Y+5, r24	; 0x05
    23c2:	3f c0       	rjmp	.+126    	; 0x2442 <CLCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    23c4:	6f 81       	ldd	r22, Y+7	; 0x07
    23c6:	78 85       	ldd	r23, Y+8	; 0x08
    23c8:	89 85       	ldd	r24, Y+9	; 0x09
    23ca:	9a 85       	ldd	r25, Y+10	; 0x0a
    23cc:	20 e0       	ldi	r18, 0x00	; 0
    23ce:	3f ef       	ldi	r19, 0xFF	; 255
    23d0:	4f e7       	ldi	r20, 0x7F	; 127
    23d2:	57 e4       	ldi	r21, 0x47	; 71
    23d4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    23d8:	18 16       	cp	r1, r24
    23da:	4c f5       	brge	.+82     	; 0x242e <CLCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    23de:	7c 85       	ldd	r23, Y+12	; 0x0c
    23e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    23e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    23e4:	20 e0       	ldi	r18, 0x00	; 0
    23e6:	30 e0       	ldi	r19, 0x00	; 0
    23e8:	40 e2       	ldi	r20, 0x20	; 32
    23ea:	51 e4       	ldi	r21, 0x41	; 65
    23ec:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23f0:	dc 01       	movw	r26, r24
    23f2:	cb 01       	movw	r24, r22
    23f4:	bc 01       	movw	r22, r24
    23f6:	cd 01       	movw	r24, r26
    23f8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23fc:	dc 01       	movw	r26, r24
    23fe:	cb 01       	movw	r24, r22
    2400:	9e 83       	std	Y+6, r25	; 0x06
    2402:	8d 83       	std	Y+5, r24	; 0x05
    2404:	0f c0       	rjmp	.+30     	; 0x2424 <CLCD_VidSendData+0xee>
    2406:	88 ec       	ldi	r24, 0xC8	; 200
    2408:	90 e0       	ldi	r25, 0x00	; 0
    240a:	9c 83       	std	Y+4, r25	; 0x04
    240c:	8b 83       	std	Y+3, r24	; 0x03
    240e:	8b 81       	ldd	r24, Y+3	; 0x03
    2410:	9c 81       	ldd	r25, Y+4	; 0x04
    2412:	01 97       	sbiw	r24, 0x01	; 1
    2414:	f1 f7       	brne	.-4      	; 0x2412 <CLCD_VidSendData+0xdc>
    2416:	9c 83       	std	Y+4, r25	; 0x04
    2418:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    241a:	8d 81       	ldd	r24, Y+5	; 0x05
    241c:	9e 81       	ldd	r25, Y+6	; 0x06
    241e:	01 97       	sbiw	r24, 0x01	; 1
    2420:	9e 83       	std	Y+6, r25	; 0x06
    2422:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2424:	8d 81       	ldd	r24, Y+5	; 0x05
    2426:	9e 81       	ldd	r25, Y+6	; 0x06
    2428:	00 97       	sbiw	r24, 0x00	; 0
    242a:	69 f7       	brne	.-38     	; 0x2406 <CLCD_VidSendData+0xd0>
    242c:	14 c0       	rjmp	.+40     	; 0x2456 <CLCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    242e:	6f 81       	ldd	r22, Y+7	; 0x07
    2430:	78 85       	ldd	r23, Y+8	; 0x08
    2432:	89 85       	ldd	r24, Y+9	; 0x09
    2434:	9a 85       	ldd	r25, Y+10	; 0x0a
    2436:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    243a:	dc 01       	movw	r26, r24
    243c:	cb 01       	movw	r24, r22
    243e:	9e 83       	std	Y+6, r25	; 0x06
    2440:	8d 83       	std	Y+5, r24	; 0x05
    2442:	8d 81       	ldd	r24, Y+5	; 0x05
    2444:	9e 81       	ldd	r25, Y+6	; 0x06
    2446:	9a 83       	std	Y+2, r25	; 0x02
    2448:	89 83       	std	Y+1, r24	; 0x01
    244a:	89 81       	ldd	r24, Y+1	; 0x01
    244c:	9a 81       	ldd	r25, Y+2	; 0x02
    244e:	01 97       	sbiw	r24, 0x01	; 1
    2450:	f1 f7       	brne	.-4      	; 0x244e <CLCD_VidSendData+0x118>
    2452:	9a 83       	std	Y+2, r25	; 0x02
    2454:	89 83       	std	Y+1, r24	; 0x01

    //Delay
    _delay_ms(2);

    //Clearing Enable pin
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, low);
    2456:	81 e0       	ldi	r24, 0x01	; 1
    2458:	67 e0       	ldi	r22, 0x07	; 7
    245a:	40 e0       	ldi	r20, 0x00	; 0
    245c:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
}
    2460:	2f 96       	adiw	r28, 0x0f	; 15
    2462:	0f b6       	in	r0, 0x3f	; 63
    2464:	f8 94       	cli
    2466:	de bf       	out	0x3e, r29	; 62
    2468:	0f be       	out	0x3f, r0	; 63
    246a:	cd bf       	out	0x3d, r28	; 61
    246c:	cf 91       	pop	r28
    246e:	df 91       	pop	r29
    2470:	08 95       	ret

00002472 <CLCD_VidInit>:

void CLCD_VidInit() //Function to initialize CLCD
{
    2472:	0f 93       	push	r16
    2474:	1f 93       	push	r17
    2476:	df 93       	push	r29
    2478:	cf 93       	push	r28
    247a:	cd b7       	in	r28, 0x3d	; 61
    247c:	de b7       	in	r29, 0x3e	; 62
    247e:	cc 54       	subi	r28, 0x4C	; 76
    2480:	d0 40       	sbci	r29, 0x00	; 0
    2482:	0f b6       	in	r0, 0x3f	; 63
    2484:	f8 94       	cli
    2486:	de bf       	out	0x3e, r29	; 62
    2488:	0f be       	out	0x3f, r0	; 63
    248a:	cd bf       	out	0x3d, r28	; 61
    248c:	fe 01       	movw	r30, r28
    248e:	e7 5b       	subi	r30, 0xB7	; 183
    2490:	ff 4f       	sbci	r31, 0xFF	; 255
    2492:	80 e0       	ldi	r24, 0x00	; 0
    2494:	90 e0       	ldi	r25, 0x00	; 0
    2496:	a0 e2       	ldi	r26, 0x20	; 32
    2498:	b2 e4       	ldi	r27, 0x42	; 66
    249a:	80 83       	st	Z, r24
    249c:	91 83       	std	Z+1, r25	; 0x01
    249e:	a2 83       	std	Z+2, r26	; 0x02
    24a0:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24a2:	8e 01       	movw	r16, r28
    24a4:	0b 5b       	subi	r16, 0xBB	; 187
    24a6:	1f 4f       	sbci	r17, 0xFF	; 255
    24a8:	fe 01       	movw	r30, r28
    24aa:	e7 5b       	subi	r30, 0xB7	; 183
    24ac:	ff 4f       	sbci	r31, 0xFF	; 255
    24ae:	60 81       	ld	r22, Z
    24b0:	71 81       	ldd	r23, Z+1	; 0x01
    24b2:	82 81       	ldd	r24, Z+2	; 0x02
    24b4:	93 81       	ldd	r25, Z+3	; 0x03
    24b6:	20 e0       	ldi	r18, 0x00	; 0
    24b8:	30 e0       	ldi	r19, 0x00	; 0
    24ba:	4a ef       	ldi	r20, 0xFA	; 250
    24bc:	54 e4       	ldi	r21, 0x44	; 68
    24be:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24c2:	dc 01       	movw	r26, r24
    24c4:	cb 01       	movw	r24, r22
    24c6:	f8 01       	movw	r30, r16
    24c8:	80 83       	st	Z, r24
    24ca:	91 83       	std	Z+1, r25	; 0x01
    24cc:	a2 83       	std	Z+2, r26	; 0x02
    24ce:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    24d0:	fe 01       	movw	r30, r28
    24d2:	eb 5b       	subi	r30, 0xBB	; 187
    24d4:	ff 4f       	sbci	r31, 0xFF	; 255
    24d6:	60 81       	ld	r22, Z
    24d8:	71 81       	ldd	r23, Z+1	; 0x01
    24da:	82 81       	ldd	r24, Z+2	; 0x02
    24dc:	93 81       	ldd	r25, Z+3	; 0x03
    24de:	20 e0       	ldi	r18, 0x00	; 0
    24e0:	30 e0       	ldi	r19, 0x00	; 0
    24e2:	40 e8       	ldi	r20, 0x80	; 128
    24e4:	5f e3       	ldi	r21, 0x3F	; 63
    24e6:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24ea:	88 23       	and	r24, r24
    24ec:	44 f4       	brge	.+16     	; 0x24fe <CLCD_VidInit+0x8c>
		__ticks = 1;
    24ee:	fe 01       	movw	r30, r28
    24f0:	ed 5b       	subi	r30, 0xBD	; 189
    24f2:	ff 4f       	sbci	r31, 0xFF	; 255
    24f4:	81 e0       	ldi	r24, 0x01	; 1
    24f6:	90 e0       	ldi	r25, 0x00	; 0
    24f8:	91 83       	std	Z+1, r25	; 0x01
    24fa:	80 83       	st	Z, r24
    24fc:	64 c0       	rjmp	.+200    	; 0x25c6 <CLCD_VidInit+0x154>
	else if (__tmp > 65535)
    24fe:	fe 01       	movw	r30, r28
    2500:	eb 5b       	subi	r30, 0xBB	; 187
    2502:	ff 4f       	sbci	r31, 0xFF	; 255
    2504:	60 81       	ld	r22, Z
    2506:	71 81       	ldd	r23, Z+1	; 0x01
    2508:	82 81       	ldd	r24, Z+2	; 0x02
    250a:	93 81       	ldd	r25, Z+3	; 0x03
    250c:	20 e0       	ldi	r18, 0x00	; 0
    250e:	3f ef       	ldi	r19, 0xFF	; 255
    2510:	4f e7       	ldi	r20, 0x7F	; 127
    2512:	57 e4       	ldi	r21, 0x47	; 71
    2514:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2518:	18 16       	cp	r1, r24
    251a:	0c f0       	brlt	.+2      	; 0x251e <CLCD_VidInit+0xac>
    251c:	43 c0       	rjmp	.+134    	; 0x25a4 <CLCD_VidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    251e:	fe 01       	movw	r30, r28
    2520:	e7 5b       	subi	r30, 0xB7	; 183
    2522:	ff 4f       	sbci	r31, 0xFF	; 255
    2524:	60 81       	ld	r22, Z
    2526:	71 81       	ldd	r23, Z+1	; 0x01
    2528:	82 81       	ldd	r24, Z+2	; 0x02
    252a:	93 81       	ldd	r25, Z+3	; 0x03
    252c:	20 e0       	ldi	r18, 0x00	; 0
    252e:	30 e0       	ldi	r19, 0x00	; 0
    2530:	40 e2       	ldi	r20, 0x20	; 32
    2532:	51 e4       	ldi	r21, 0x41	; 65
    2534:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2538:	dc 01       	movw	r26, r24
    253a:	cb 01       	movw	r24, r22
    253c:	8e 01       	movw	r16, r28
    253e:	0d 5b       	subi	r16, 0xBD	; 189
    2540:	1f 4f       	sbci	r17, 0xFF	; 255
    2542:	bc 01       	movw	r22, r24
    2544:	cd 01       	movw	r24, r26
    2546:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    254a:	dc 01       	movw	r26, r24
    254c:	cb 01       	movw	r24, r22
    254e:	f8 01       	movw	r30, r16
    2550:	91 83       	std	Z+1, r25	; 0x01
    2552:	80 83       	st	Z, r24
    2554:	1f c0       	rjmp	.+62     	; 0x2594 <CLCD_VidInit+0x122>
    2556:	fe 01       	movw	r30, r28
    2558:	ef 5b       	subi	r30, 0xBF	; 191
    255a:	ff 4f       	sbci	r31, 0xFF	; 255
    255c:	88 ec       	ldi	r24, 0xC8	; 200
    255e:	90 e0       	ldi	r25, 0x00	; 0
    2560:	91 83       	std	Z+1, r25	; 0x01
    2562:	80 83       	st	Z, r24
    2564:	fe 01       	movw	r30, r28
    2566:	ef 5b       	subi	r30, 0xBF	; 191
    2568:	ff 4f       	sbci	r31, 0xFF	; 255
    256a:	80 81       	ld	r24, Z
    256c:	91 81       	ldd	r25, Z+1	; 0x01
    256e:	01 97       	sbiw	r24, 0x01	; 1
    2570:	f1 f7       	brne	.-4      	; 0x256e <CLCD_VidInit+0xfc>
    2572:	fe 01       	movw	r30, r28
    2574:	ef 5b       	subi	r30, 0xBF	; 191
    2576:	ff 4f       	sbci	r31, 0xFF	; 255
    2578:	91 83       	std	Z+1, r25	; 0x01
    257a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257c:	de 01       	movw	r26, r28
    257e:	ad 5b       	subi	r26, 0xBD	; 189
    2580:	bf 4f       	sbci	r27, 0xFF	; 255
    2582:	fe 01       	movw	r30, r28
    2584:	ed 5b       	subi	r30, 0xBD	; 189
    2586:	ff 4f       	sbci	r31, 0xFF	; 255
    2588:	80 81       	ld	r24, Z
    258a:	91 81       	ldd	r25, Z+1	; 0x01
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	11 96       	adiw	r26, 0x01	; 1
    2590:	9c 93       	st	X, r25
    2592:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2594:	fe 01       	movw	r30, r28
    2596:	ed 5b       	subi	r30, 0xBD	; 189
    2598:	ff 4f       	sbci	r31, 0xFF	; 255
    259a:	80 81       	ld	r24, Z
    259c:	91 81       	ldd	r25, Z+1	; 0x01
    259e:	00 97       	sbiw	r24, 0x00	; 0
    25a0:	d1 f6       	brne	.-76     	; 0x2556 <CLCD_VidInit+0xe4>
    25a2:	24 c0       	rjmp	.+72     	; 0x25ec <CLCD_VidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a4:	8e 01       	movw	r16, r28
    25a6:	0d 5b       	subi	r16, 0xBD	; 189
    25a8:	1f 4f       	sbci	r17, 0xFF	; 255
    25aa:	fe 01       	movw	r30, r28
    25ac:	eb 5b       	subi	r30, 0xBB	; 187
    25ae:	ff 4f       	sbci	r31, 0xFF	; 255
    25b0:	60 81       	ld	r22, Z
    25b2:	71 81       	ldd	r23, Z+1	; 0x01
    25b4:	82 81       	ldd	r24, Z+2	; 0x02
    25b6:	93 81       	ldd	r25, Z+3	; 0x03
    25b8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25bc:	dc 01       	movw	r26, r24
    25be:	cb 01       	movw	r24, r22
    25c0:	f8 01       	movw	r30, r16
    25c2:	91 83       	std	Z+1, r25	; 0x01
    25c4:	80 83       	st	Z, r24
    25c6:	fe 01       	movw	r30, r28
    25c8:	ed 5b       	subi	r30, 0xBD	; 189
    25ca:	ff 4f       	sbci	r31, 0xFF	; 255
    25cc:	80 81       	ld	r24, Z
    25ce:	91 81       	ldd	r25, Z+1	; 0x01
    25d0:	fe 01       	movw	r30, r28
    25d2:	ff 96       	adiw	r30, 0x3f	; 63
    25d4:	91 83       	std	Z+1, r25	; 0x01
    25d6:	80 83       	st	Z, r24
    25d8:	fe 01       	movw	r30, r28
    25da:	ff 96       	adiw	r30, 0x3f	; 63
    25dc:	80 81       	ld	r24, Z
    25de:	91 81       	ldd	r25, Z+1	; 0x01
    25e0:	01 97       	sbiw	r24, 0x01	; 1
    25e2:	f1 f7       	brne	.-4      	; 0x25e0 <CLCD_VidInit+0x16e>
    25e4:	fe 01       	movw	r30, r28
    25e6:	ff 96       	adiw	r30, 0x3f	; 63
    25e8:	91 83       	std	Z+1, r25	; 0x01
    25ea:	80 83       	st	Z, r24
    //Delay
    _delay_ms(40);

    //Function Set
    CLCD_VidSendCommand(0b00111111);
    25ec:	8f e3       	ldi	r24, 0x3F	; 63
    25ee:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_VidSendCommand>
    25f2:	80 e0       	ldi	r24, 0x00	; 0
    25f4:	90 e0       	ldi	r25, 0x00	; 0
    25f6:	a4 e4       	ldi	r26, 0x44	; 68
    25f8:	b2 e4       	ldi	r27, 0x42	; 66
    25fa:	8b af       	std	Y+59, r24	; 0x3b
    25fc:	9c af       	std	Y+60, r25	; 0x3c
    25fe:	ad af       	std	Y+61, r26	; 0x3d
    2600:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2602:	6b ad       	ldd	r22, Y+59	; 0x3b
    2604:	7c ad       	ldd	r23, Y+60	; 0x3c
    2606:	8d ad       	ldd	r24, Y+61	; 0x3d
    2608:	9e ad       	ldd	r25, Y+62	; 0x3e
    260a:	2b ea       	ldi	r18, 0xAB	; 171
    260c:	3a ea       	ldi	r19, 0xAA	; 170
    260e:	4a e2       	ldi	r20, 0x2A	; 42
    2610:	50 e4       	ldi	r21, 0x40	; 64
    2612:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2616:	dc 01       	movw	r26, r24
    2618:	cb 01       	movw	r24, r22
    261a:	8f ab       	std	Y+55, r24	; 0x37
    261c:	98 af       	std	Y+56, r25	; 0x38
    261e:	a9 af       	std	Y+57, r26	; 0x39
    2620:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    2622:	6f a9       	ldd	r22, Y+55	; 0x37
    2624:	78 ad       	ldd	r23, Y+56	; 0x38
    2626:	89 ad       	ldd	r24, Y+57	; 0x39
    2628:	9a ad       	ldd	r25, Y+58	; 0x3a
    262a:	20 e0       	ldi	r18, 0x00	; 0
    262c:	30 e0       	ldi	r19, 0x00	; 0
    262e:	40 e8       	ldi	r20, 0x80	; 128
    2630:	5f e3       	ldi	r21, 0x3F	; 63
    2632:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2636:	88 23       	and	r24, r24
    2638:	1c f4       	brge	.+6      	; 0x2640 <CLCD_VidInit+0x1ce>
		__ticks = 1;
    263a:	81 e0       	ldi	r24, 0x01	; 1
    263c:	8e ab       	std	Y+54, r24	; 0x36
    263e:	91 c0       	rjmp	.+290    	; 0x2762 <CLCD_VidInit+0x2f0>
	else if (__tmp > 255)
    2640:	6f a9       	ldd	r22, Y+55	; 0x37
    2642:	78 ad       	ldd	r23, Y+56	; 0x38
    2644:	89 ad       	ldd	r24, Y+57	; 0x39
    2646:	9a ad       	ldd	r25, Y+58	; 0x3a
    2648:	20 e0       	ldi	r18, 0x00	; 0
    264a:	30 e0       	ldi	r19, 0x00	; 0
    264c:	4f e7       	ldi	r20, 0x7F	; 127
    264e:	53 e4       	ldi	r21, 0x43	; 67
    2650:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2654:	18 16       	cp	r1, r24
    2656:	0c f0       	brlt	.+2      	; 0x265a <CLCD_VidInit+0x1e8>
    2658:	7b c0       	rjmp	.+246    	; 0x2750 <CLCD_VidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    265a:	6b ad       	ldd	r22, Y+59	; 0x3b
    265c:	7c ad       	ldd	r23, Y+60	; 0x3c
    265e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2660:	9e ad       	ldd	r25, Y+62	; 0x3e
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	4a e7       	ldi	r20, 0x7A	; 122
    2668:	54 e4       	ldi	r21, 0x44	; 68
    266a:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	8a ab       	std	Y+50, r24	; 0x32
    2674:	9b ab       	std	Y+51, r25	; 0x33
    2676:	ac ab       	std	Y+52, r26	; 0x34
    2678:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    267a:	6a a9       	ldd	r22, Y+50	; 0x32
    267c:	7b a9       	ldd	r23, Y+51	; 0x33
    267e:	8c a9       	ldd	r24, Y+52	; 0x34
    2680:	9d a9       	ldd	r25, Y+53	; 0x35
    2682:	20 e0       	ldi	r18, 0x00	; 0
    2684:	30 e0       	ldi	r19, 0x00	; 0
    2686:	4a ef       	ldi	r20, 0xFA	; 250
    2688:	54 e4       	ldi	r21, 0x44	; 68
    268a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    268e:	dc 01       	movw	r26, r24
    2690:	cb 01       	movw	r24, r22
    2692:	8e a7       	std	Y+46, r24	; 0x2e
    2694:	9f a7       	std	Y+47, r25	; 0x2f
    2696:	a8 ab       	std	Y+48, r26	; 0x30
    2698:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    269a:	6e a5       	ldd	r22, Y+46	; 0x2e
    269c:	7f a5       	ldd	r23, Y+47	; 0x2f
    269e:	88 a9       	ldd	r24, Y+48	; 0x30
    26a0:	99 a9       	ldd	r25, Y+49	; 0x31
    26a2:	20 e0       	ldi	r18, 0x00	; 0
    26a4:	30 e0       	ldi	r19, 0x00	; 0
    26a6:	40 e8       	ldi	r20, 0x80	; 128
    26a8:	5f e3       	ldi	r21, 0x3F	; 63
    26aa:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    26ae:	88 23       	and	r24, r24
    26b0:	2c f4       	brge	.+10     	; 0x26bc <CLCD_VidInit+0x24a>
		__ticks = 1;
    26b2:	81 e0       	ldi	r24, 0x01	; 1
    26b4:	90 e0       	ldi	r25, 0x00	; 0
    26b6:	9d a7       	std	Y+45, r25	; 0x2d
    26b8:	8c a7       	std	Y+44, r24	; 0x2c
    26ba:	3f c0       	rjmp	.+126    	; 0x273a <CLCD_VidInit+0x2c8>
	else if (__tmp > 65535)
    26bc:	6e a5       	ldd	r22, Y+46	; 0x2e
    26be:	7f a5       	ldd	r23, Y+47	; 0x2f
    26c0:	88 a9       	ldd	r24, Y+48	; 0x30
    26c2:	99 a9       	ldd	r25, Y+49	; 0x31
    26c4:	20 e0       	ldi	r18, 0x00	; 0
    26c6:	3f ef       	ldi	r19, 0xFF	; 255
    26c8:	4f e7       	ldi	r20, 0x7F	; 127
    26ca:	57 e4       	ldi	r21, 0x47	; 71
    26cc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26d0:	18 16       	cp	r1, r24
    26d2:	4c f5       	brge	.+82     	; 0x2726 <CLCD_VidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26d4:	6a a9       	ldd	r22, Y+50	; 0x32
    26d6:	7b a9       	ldd	r23, Y+51	; 0x33
    26d8:	8c a9       	ldd	r24, Y+52	; 0x34
    26da:	9d a9       	ldd	r25, Y+53	; 0x35
    26dc:	20 e0       	ldi	r18, 0x00	; 0
    26de:	30 e0       	ldi	r19, 0x00	; 0
    26e0:	40 e2       	ldi	r20, 0x20	; 32
    26e2:	51 e4       	ldi	r21, 0x41	; 65
    26e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26e8:	dc 01       	movw	r26, r24
    26ea:	cb 01       	movw	r24, r22
    26ec:	bc 01       	movw	r22, r24
    26ee:	cd 01       	movw	r24, r26
    26f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26f4:	dc 01       	movw	r26, r24
    26f6:	cb 01       	movw	r24, r22
    26f8:	9d a7       	std	Y+45, r25	; 0x2d
    26fa:	8c a7       	std	Y+44, r24	; 0x2c
    26fc:	0f c0       	rjmp	.+30     	; 0x271c <CLCD_VidInit+0x2aa>
    26fe:	88 ec       	ldi	r24, 0xC8	; 200
    2700:	90 e0       	ldi	r25, 0x00	; 0
    2702:	9b a7       	std	Y+43, r25	; 0x2b
    2704:	8a a7       	std	Y+42, r24	; 0x2a
    2706:	8a a5       	ldd	r24, Y+42	; 0x2a
    2708:	9b a5       	ldd	r25, Y+43	; 0x2b
    270a:	01 97       	sbiw	r24, 0x01	; 1
    270c:	f1 f7       	brne	.-4      	; 0x270a <CLCD_VidInit+0x298>
    270e:	9b a7       	std	Y+43, r25	; 0x2b
    2710:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2712:	8c a5       	ldd	r24, Y+44	; 0x2c
    2714:	9d a5       	ldd	r25, Y+45	; 0x2d
    2716:	01 97       	sbiw	r24, 0x01	; 1
    2718:	9d a7       	std	Y+45, r25	; 0x2d
    271a:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    271c:	8c a5       	ldd	r24, Y+44	; 0x2c
    271e:	9d a5       	ldd	r25, Y+45	; 0x2d
    2720:	00 97       	sbiw	r24, 0x00	; 0
    2722:	69 f7       	brne	.-38     	; 0x26fe <CLCD_VidInit+0x28c>
    2724:	24 c0       	rjmp	.+72     	; 0x276e <CLCD_VidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2726:	6e a5       	ldd	r22, Y+46	; 0x2e
    2728:	7f a5       	ldd	r23, Y+47	; 0x2f
    272a:	88 a9       	ldd	r24, Y+48	; 0x30
    272c:	99 a9       	ldd	r25, Y+49	; 0x31
    272e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2732:	dc 01       	movw	r26, r24
    2734:	cb 01       	movw	r24, r22
    2736:	9d a7       	std	Y+45, r25	; 0x2d
    2738:	8c a7       	std	Y+44, r24	; 0x2c
    273a:	8c a5       	ldd	r24, Y+44	; 0x2c
    273c:	9d a5       	ldd	r25, Y+45	; 0x2d
    273e:	99 a7       	std	Y+41, r25	; 0x29
    2740:	88 a7       	std	Y+40, r24	; 0x28
    2742:	88 a5       	ldd	r24, Y+40	; 0x28
    2744:	99 a5       	ldd	r25, Y+41	; 0x29
    2746:	01 97       	sbiw	r24, 0x01	; 1
    2748:	f1 f7       	brne	.-4      	; 0x2746 <CLCD_VidInit+0x2d4>
    274a:	99 a7       	std	Y+41, r25	; 0x29
    274c:	88 a7       	std	Y+40, r24	; 0x28
    274e:	0f c0       	rjmp	.+30     	; 0x276e <CLCD_VidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2750:	6f a9       	ldd	r22, Y+55	; 0x37
    2752:	78 ad       	ldd	r23, Y+56	; 0x38
    2754:	89 ad       	ldd	r24, Y+57	; 0x39
    2756:	9a ad       	ldd	r25, Y+58	; 0x3a
    2758:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    275c:	dc 01       	movw	r26, r24
    275e:	cb 01       	movw	r24, r22
    2760:	8e ab       	std	Y+54, r24	; 0x36
    2762:	8e a9       	ldd	r24, Y+54	; 0x36
    2764:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2766:	8f a1       	ldd	r24, Y+39	; 0x27
    2768:	8a 95       	dec	r24
    276a:	f1 f7       	brne	.-4      	; 0x2768 <CLCD_VidInit+0x2f6>
    276c:	8f a3       	std	Y+39, r24	; 0x27

    //Delay
    _delay_us(49);

    //Display ON/OFF Control
    CLCD_VidSendCommand(0b00001100);
    276e:	8c e0       	ldi	r24, 0x0C	; 12
    2770:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_VidSendCommand>
    2774:	80 e0       	ldi	r24, 0x00	; 0
    2776:	90 e0       	ldi	r25, 0x00	; 0
    2778:	a4 e4       	ldi	r26, 0x44	; 68
    277a:	b2 e4       	ldi	r27, 0x42	; 66
    277c:	8b a3       	std	Y+35, r24	; 0x23
    277e:	9c a3       	std	Y+36, r25	; 0x24
    2780:	ad a3       	std	Y+37, r26	; 0x25
    2782:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    2784:	6b a1       	ldd	r22, Y+35	; 0x23
    2786:	7c a1       	ldd	r23, Y+36	; 0x24
    2788:	8d a1       	ldd	r24, Y+37	; 0x25
    278a:	9e a1       	ldd	r25, Y+38	; 0x26
    278c:	2b ea       	ldi	r18, 0xAB	; 171
    278e:	3a ea       	ldi	r19, 0xAA	; 170
    2790:	4a e2       	ldi	r20, 0x2A	; 42
    2792:	50 e4       	ldi	r21, 0x40	; 64
    2794:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2798:	dc 01       	movw	r26, r24
    279a:	cb 01       	movw	r24, r22
    279c:	8f 8f       	std	Y+31, r24	; 0x1f
    279e:	98 a3       	std	Y+32, r25	; 0x20
    27a0:	a9 a3       	std	Y+33, r26	; 0x21
    27a2:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    27a4:	6f 8d       	ldd	r22, Y+31	; 0x1f
    27a6:	78 a1       	ldd	r23, Y+32	; 0x20
    27a8:	89 a1       	ldd	r24, Y+33	; 0x21
    27aa:	9a a1       	ldd	r25, Y+34	; 0x22
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	30 e0       	ldi	r19, 0x00	; 0
    27b0:	40 e8       	ldi	r20, 0x80	; 128
    27b2:	5f e3       	ldi	r21, 0x3F	; 63
    27b4:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27b8:	88 23       	and	r24, r24
    27ba:	1c f4       	brge	.+6      	; 0x27c2 <CLCD_VidInit+0x350>
		__ticks = 1;
    27bc:	81 e0       	ldi	r24, 0x01	; 1
    27be:	8e 8f       	std	Y+30, r24	; 0x1e
    27c0:	91 c0       	rjmp	.+290    	; 0x28e4 <CLCD_VidInit+0x472>
	else if (__tmp > 255)
    27c2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    27c4:	78 a1       	ldd	r23, Y+32	; 0x20
    27c6:	89 a1       	ldd	r24, Y+33	; 0x21
    27c8:	9a a1       	ldd	r25, Y+34	; 0x22
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	4f e7       	ldi	r20, 0x7F	; 127
    27d0:	53 e4       	ldi	r21, 0x43	; 67
    27d2:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27d6:	18 16       	cp	r1, r24
    27d8:	0c f0       	brlt	.+2      	; 0x27dc <CLCD_VidInit+0x36a>
    27da:	7b c0       	rjmp	.+246    	; 0x28d2 <CLCD_VidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    27dc:	6b a1       	ldd	r22, Y+35	; 0x23
    27de:	7c a1       	ldd	r23, Y+36	; 0x24
    27e0:	8d a1       	ldd	r24, Y+37	; 0x25
    27e2:	9e a1       	ldd	r25, Y+38	; 0x26
    27e4:	20 e0       	ldi	r18, 0x00	; 0
    27e6:	30 e0       	ldi	r19, 0x00	; 0
    27e8:	4a e7       	ldi	r20, 0x7A	; 122
    27ea:	54 e4       	ldi	r21, 0x44	; 68
    27ec:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    27f0:	dc 01       	movw	r26, r24
    27f2:	cb 01       	movw	r24, r22
    27f4:	8a 8f       	std	Y+26, r24	; 0x1a
    27f6:	9b 8f       	std	Y+27, r25	; 0x1b
    27f8:	ac 8f       	std	Y+28, r26	; 0x1c
    27fa:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27fc:	6a 8d       	ldd	r22, Y+26	; 0x1a
    27fe:	7b 8d       	ldd	r23, Y+27	; 0x1b
    2800:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2802:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2804:	20 e0       	ldi	r18, 0x00	; 0
    2806:	30 e0       	ldi	r19, 0x00	; 0
    2808:	4a ef       	ldi	r20, 0xFA	; 250
    280a:	54 e4       	ldi	r21, 0x44	; 68
    280c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2810:	dc 01       	movw	r26, r24
    2812:	cb 01       	movw	r24, r22
    2814:	8e 8b       	std	Y+22, r24	; 0x16
    2816:	9f 8b       	std	Y+23, r25	; 0x17
    2818:	a8 8f       	std	Y+24, r26	; 0x18
    281a:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    281c:	6e 89       	ldd	r22, Y+22	; 0x16
    281e:	7f 89       	ldd	r23, Y+23	; 0x17
    2820:	88 8d       	ldd	r24, Y+24	; 0x18
    2822:	99 8d       	ldd	r25, Y+25	; 0x19
    2824:	20 e0       	ldi	r18, 0x00	; 0
    2826:	30 e0       	ldi	r19, 0x00	; 0
    2828:	40 e8       	ldi	r20, 0x80	; 128
    282a:	5f e3       	ldi	r21, 0x3F	; 63
    282c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2830:	88 23       	and	r24, r24
    2832:	2c f4       	brge	.+10     	; 0x283e <CLCD_VidInit+0x3cc>
		__ticks = 1;
    2834:	81 e0       	ldi	r24, 0x01	; 1
    2836:	90 e0       	ldi	r25, 0x00	; 0
    2838:	9d 8b       	std	Y+21, r25	; 0x15
    283a:	8c 8b       	std	Y+20, r24	; 0x14
    283c:	3f c0       	rjmp	.+126    	; 0x28bc <CLCD_VidInit+0x44a>
	else if (__tmp > 65535)
    283e:	6e 89       	ldd	r22, Y+22	; 0x16
    2840:	7f 89       	ldd	r23, Y+23	; 0x17
    2842:	88 8d       	ldd	r24, Y+24	; 0x18
    2844:	99 8d       	ldd	r25, Y+25	; 0x19
    2846:	20 e0       	ldi	r18, 0x00	; 0
    2848:	3f ef       	ldi	r19, 0xFF	; 255
    284a:	4f e7       	ldi	r20, 0x7F	; 127
    284c:	57 e4       	ldi	r21, 0x47	; 71
    284e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2852:	18 16       	cp	r1, r24
    2854:	4c f5       	brge	.+82     	; 0x28a8 <CLCD_VidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2856:	6a 8d       	ldd	r22, Y+26	; 0x1a
    2858:	7b 8d       	ldd	r23, Y+27	; 0x1b
    285a:	8c 8d       	ldd	r24, Y+28	; 0x1c
    285c:	9d 8d       	ldd	r25, Y+29	; 0x1d
    285e:	20 e0       	ldi	r18, 0x00	; 0
    2860:	30 e0       	ldi	r19, 0x00	; 0
    2862:	40 e2       	ldi	r20, 0x20	; 32
    2864:	51 e4       	ldi	r21, 0x41	; 65
    2866:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    286a:	dc 01       	movw	r26, r24
    286c:	cb 01       	movw	r24, r22
    286e:	bc 01       	movw	r22, r24
    2870:	cd 01       	movw	r24, r26
    2872:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2876:	dc 01       	movw	r26, r24
    2878:	cb 01       	movw	r24, r22
    287a:	9d 8b       	std	Y+21, r25	; 0x15
    287c:	8c 8b       	std	Y+20, r24	; 0x14
    287e:	0f c0       	rjmp	.+30     	; 0x289e <CLCD_VidInit+0x42c>
    2880:	88 ec       	ldi	r24, 0xC8	; 200
    2882:	90 e0       	ldi	r25, 0x00	; 0
    2884:	9b 8b       	std	Y+19, r25	; 0x13
    2886:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2888:	8a 89       	ldd	r24, Y+18	; 0x12
    288a:	9b 89       	ldd	r25, Y+19	; 0x13
    288c:	01 97       	sbiw	r24, 0x01	; 1
    288e:	f1 f7       	brne	.-4      	; 0x288c <CLCD_VidInit+0x41a>
    2890:	9b 8b       	std	Y+19, r25	; 0x13
    2892:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2894:	8c 89       	ldd	r24, Y+20	; 0x14
    2896:	9d 89       	ldd	r25, Y+21	; 0x15
    2898:	01 97       	sbiw	r24, 0x01	; 1
    289a:	9d 8b       	std	Y+21, r25	; 0x15
    289c:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    289e:	8c 89       	ldd	r24, Y+20	; 0x14
    28a0:	9d 89       	ldd	r25, Y+21	; 0x15
    28a2:	00 97       	sbiw	r24, 0x00	; 0
    28a4:	69 f7       	brne	.-38     	; 0x2880 <CLCD_VidInit+0x40e>
    28a6:	24 c0       	rjmp	.+72     	; 0x28f0 <CLCD_VidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28a8:	6e 89       	ldd	r22, Y+22	; 0x16
    28aa:	7f 89       	ldd	r23, Y+23	; 0x17
    28ac:	88 8d       	ldd	r24, Y+24	; 0x18
    28ae:	99 8d       	ldd	r25, Y+25	; 0x19
    28b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28b4:	dc 01       	movw	r26, r24
    28b6:	cb 01       	movw	r24, r22
    28b8:	9d 8b       	std	Y+21, r25	; 0x15
    28ba:	8c 8b       	std	Y+20, r24	; 0x14
    28bc:	8c 89       	ldd	r24, Y+20	; 0x14
    28be:	9d 89       	ldd	r25, Y+21	; 0x15
    28c0:	99 8b       	std	Y+17, r25	; 0x11
    28c2:	88 8b       	std	Y+16, r24	; 0x10
    28c4:	88 89       	ldd	r24, Y+16	; 0x10
    28c6:	99 89       	ldd	r25, Y+17	; 0x11
    28c8:	01 97       	sbiw	r24, 0x01	; 1
    28ca:	f1 f7       	brne	.-4      	; 0x28c8 <CLCD_VidInit+0x456>
    28cc:	99 8b       	std	Y+17, r25	; 0x11
    28ce:	88 8b       	std	Y+16, r24	; 0x10
    28d0:	0f c0       	rjmp	.+30     	; 0x28f0 <CLCD_VidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    28d2:	6f 8d       	ldd	r22, Y+31	; 0x1f
    28d4:	78 a1       	ldd	r23, Y+32	; 0x20
    28d6:	89 a1       	ldd	r24, Y+33	; 0x21
    28d8:	9a a1       	ldd	r25, Y+34	; 0x22
    28da:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28de:	dc 01       	movw	r26, r24
    28e0:	cb 01       	movw	r24, r22
    28e2:	8e 8f       	std	Y+30, r24	; 0x1e
    28e4:	8e 8d       	ldd	r24, Y+30	; 0x1e
    28e6:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    28e8:	8f 85       	ldd	r24, Y+15	; 0x0f
    28ea:	8a 95       	dec	r24
    28ec:	f1 f7       	brne	.-4      	; 0x28ea <CLCD_VidInit+0x478>
    28ee:	8f 87       	std	Y+15, r24	; 0x0f

    //Delay
    _delay_us(49);

    //Display clear
    CLCD_VidSendCommand(0b00000001);
    28f0:	81 e0       	ldi	r24, 0x01	; 1
    28f2:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_VidSendCommand>
    28f6:	80 e0       	ldi	r24, 0x00	; 0
    28f8:	90 e0       	ldi	r25, 0x00	; 0
    28fa:	a0 e0       	ldi	r26, 0x00	; 0
    28fc:	b0 e4       	ldi	r27, 0x40	; 64
    28fe:	8b 87       	std	Y+11, r24	; 0x0b
    2900:	9c 87       	std	Y+12, r25	; 0x0c
    2902:	ad 87       	std	Y+13, r26	; 0x0d
    2904:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2906:	6b 85       	ldd	r22, Y+11	; 0x0b
    2908:	7c 85       	ldd	r23, Y+12	; 0x0c
    290a:	8d 85       	ldd	r24, Y+13	; 0x0d
    290c:	9e 85       	ldd	r25, Y+14	; 0x0e
    290e:	20 e0       	ldi	r18, 0x00	; 0
    2910:	30 e0       	ldi	r19, 0x00	; 0
    2912:	4a ef       	ldi	r20, 0xFA	; 250
    2914:	54 e4       	ldi	r21, 0x44	; 68
    2916:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    291a:	dc 01       	movw	r26, r24
    291c:	cb 01       	movw	r24, r22
    291e:	8f 83       	std	Y+7, r24	; 0x07
    2920:	98 87       	std	Y+8, r25	; 0x08
    2922:	a9 87       	std	Y+9, r26	; 0x09
    2924:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2926:	6f 81       	ldd	r22, Y+7	; 0x07
    2928:	78 85       	ldd	r23, Y+8	; 0x08
    292a:	89 85       	ldd	r24, Y+9	; 0x09
    292c:	9a 85       	ldd	r25, Y+10	; 0x0a
    292e:	20 e0       	ldi	r18, 0x00	; 0
    2930:	30 e0       	ldi	r19, 0x00	; 0
    2932:	40 e8       	ldi	r20, 0x80	; 128
    2934:	5f e3       	ldi	r21, 0x3F	; 63
    2936:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    293a:	88 23       	and	r24, r24
    293c:	2c f4       	brge	.+10     	; 0x2948 <CLCD_VidInit+0x4d6>
		__ticks = 1;
    293e:	81 e0       	ldi	r24, 0x01	; 1
    2940:	90 e0       	ldi	r25, 0x00	; 0
    2942:	9e 83       	std	Y+6, r25	; 0x06
    2944:	8d 83       	std	Y+5, r24	; 0x05
    2946:	3f c0       	rjmp	.+126    	; 0x29c6 <CLCD_VidInit+0x554>
	else if (__tmp > 65535)
    2948:	6f 81       	ldd	r22, Y+7	; 0x07
    294a:	78 85       	ldd	r23, Y+8	; 0x08
    294c:	89 85       	ldd	r24, Y+9	; 0x09
    294e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2950:	20 e0       	ldi	r18, 0x00	; 0
    2952:	3f ef       	ldi	r19, 0xFF	; 255
    2954:	4f e7       	ldi	r20, 0x7F	; 127
    2956:	57 e4       	ldi	r21, 0x47	; 71
    2958:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    295c:	18 16       	cp	r1, r24
    295e:	4c f5       	brge	.+82     	; 0x29b2 <CLCD_VidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2960:	6b 85       	ldd	r22, Y+11	; 0x0b
    2962:	7c 85       	ldd	r23, Y+12	; 0x0c
    2964:	8d 85       	ldd	r24, Y+13	; 0x0d
    2966:	9e 85       	ldd	r25, Y+14	; 0x0e
    2968:	20 e0       	ldi	r18, 0x00	; 0
    296a:	30 e0       	ldi	r19, 0x00	; 0
    296c:	40 e2       	ldi	r20, 0x20	; 32
    296e:	51 e4       	ldi	r21, 0x41	; 65
    2970:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2974:	dc 01       	movw	r26, r24
    2976:	cb 01       	movw	r24, r22
    2978:	bc 01       	movw	r22, r24
    297a:	cd 01       	movw	r24, r26
    297c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2980:	dc 01       	movw	r26, r24
    2982:	cb 01       	movw	r24, r22
    2984:	9e 83       	std	Y+6, r25	; 0x06
    2986:	8d 83       	std	Y+5, r24	; 0x05
    2988:	0f c0       	rjmp	.+30     	; 0x29a8 <CLCD_VidInit+0x536>
    298a:	88 ec       	ldi	r24, 0xC8	; 200
    298c:	90 e0       	ldi	r25, 0x00	; 0
    298e:	9c 83       	std	Y+4, r25	; 0x04
    2990:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	9c 81       	ldd	r25, Y+4	; 0x04
    2996:	01 97       	sbiw	r24, 0x01	; 1
    2998:	f1 f7       	brne	.-4      	; 0x2996 <CLCD_VidInit+0x524>
    299a:	9c 83       	std	Y+4, r25	; 0x04
    299c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    299e:	8d 81       	ldd	r24, Y+5	; 0x05
    29a0:	9e 81       	ldd	r25, Y+6	; 0x06
    29a2:	01 97       	sbiw	r24, 0x01	; 1
    29a4:	9e 83       	std	Y+6, r25	; 0x06
    29a6:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    29a8:	8d 81       	ldd	r24, Y+5	; 0x05
    29aa:	9e 81       	ldd	r25, Y+6	; 0x06
    29ac:	00 97       	sbiw	r24, 0x00	; 0
    29ae:	69 f7       	brne	.-38     	; 0x298a <CLCD_VidInit+0x518>
    29b0:	14 c0       	rjmp	.+40     	; 0x29da <CLCD_VidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    29b2:	6f 81       	ldd	r22, Y+7	; 0x07
    29b4:	78 85       	ldd	r23, Y+8	; 0x08
    29b6:	89 85       	ldd	r24, Y+9	; 0x09
    29b8:	9a 85       	ldd	r25, Y+10	; 0x0a
    29ba:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    29be:	dc 01       	movw	r26, r24
    29c0:	cb 01       	movw	r24, r22
    29c2:	9e 83       	std	Y+6, r25	; 0x06
    29c4:	8d 83       	std	Y+5, r24	; 0x05
    29c6:	8d 81       	ldd	r24, Y+5	; 0x05
    29c8:	9e 81       	ldd	r25, Y+6	; 0x06
    29ca:	9a 83       	std	Y+2, r25	; 0x02
    29cc:	89 83       	std	Y+1, r24	; 0x01
    29ce:	89 81       	ldd	r24, Y+1	; 0x01
    29d0:	9a 81       	ldd	r25, Y+2	; 0x02
    29d2:	01 97       	sbiw	r24, 0x01	; 1
    29d4:	f1 f7       	brne	.-4      	; 0x29d2 <CLCD_VidInit+0x560>
    29d6:	9a 83       	std	Y+2, r25	; 0x02
    29d8:	89 83       	std	Y+1, r24	; 0x01
    //Delay
    _delay_ms(2);
}
    29da:	c4 5b       	subi	r28, 0xB4	; 180
    29dc:	df 4f       	sbci	r29, 0xFF	; 255
    29de:	0f b6       	in	r0, 0x3f	; 63
    29e0:	f8 94       	cli
    29e2:	de bf       	out	0x3e, r29	; 62
    29e4:	0f be       	out	0x3f, r0	; 63
    29e6:	cd bf       	out	0x3d, r28	; 61
    29e8:	cf 91       	pop	r28
    29ea:	df 91       	pop	r29
    29ec:	1f 91       	pop	r17
    29ee:	0f 91       	pop	r16
    29f0:	08 95       	ret

000029f2 <CLCD_VidDisplayClear>:

void CLCD_VidDisplayClear() //Function to clear display
{
    29f2:	df 93       	push	r29
    29f4:	cf 93       	push	r28
    29f6:	cd b7       	in	r28, 0x3d	; 61
    29f8:	de b7       	in	r29, 0x3e	; 62
    29fa:	2e 97       	sbiw	r28, 0x0e	; 14
    29fc:	0f b6       	in	r0, 0x3f	; 63
    29fe:	f8 94       	cli
    2a00:	de bf       	out	0x3e, r29	; 62
    2a02:	0f be       	out	0x3f, r0	; 63
    2a04:	cd bf       	out	0x3d, r28	; 61
    CLCD_VidSendCommand(0b00000001);
    2a06:	81 e0       	ldi	r24, 0x01	; 1
    2a08:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_VidSendCommand>
    2a0c:	80 e0       	ldi	r24, 0x00	; 0
    2a0e:	90 e0       	ldi	r25, 0x00	; 0
    2a10:	a0 e0       	ldi	r26, 0x00	; 0
    2a12:	b0 e4       	ldi	r27, 0x40	; 64
    2a14:	8b 87       	std	Y+11, r24	; 0x0b
    2a16:	9c 87       	std	Y+12, r25	; 0x0c
    2a18:	ad 87       	std	Y+13, r26	; 0x0d
    2a1a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2a1c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a1e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a20:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a22:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a24:	20 e0       	ldi	r18, 0x00	; 0
    2a26:	30 e0       	ldi	r19, 0x00	; 0
    2a28:	4a ef       	ldi	r20, 0xFA	; 250
    2a2a:	54 e4       	ldi	r21, 0x44	; 68
    2a2c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a30:	dc 01       	movw	r26, r24
    2a32:	cb 01       	movw	r24, r22
    2a34:	8f 83       	std	Y+7, r24	; 0x07
    2a36:	98 87       	std	Y+8, r25	; 0x08
    2a38:	a9 87       	std	Y+9, r26	; 0x09
    2a3a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2a3c:	6f 81       	ldd	r22, Y+7	; 0x07
    2a3e:	78 85       	ldd	r23, Y+8	; 0x08
    2a40:	89 85       	ldd	r24, Y+9	; 0x09
    2a42:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a44:	20 e0       	ldi	r18, 0x00	; 0
    2a46:	30 e0       	ldi	r19, 0x00	; 0
    2a48:	40 e8       	ldi	r20, 0x80	; 128
    2a4a:	5f e3       	ldi	r21, 0x3F	; 63
    2a4c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2a50:	88 23       	and	r24, r24
    2a52:	2c f4       	brge	.+10     	; 0x2a5e <CLCD_VidDisplayClear+0x6c>
		__ticks = 1;
    2a54:	81 e0       	ldi	r24, 0x01	; 1
    2a56:	90 e0       	ldi	r25, 0x00	; 0
    2a58:	9e 83       	std	Y+6, r25	; 0x06
    2a5a:	8d 83       	std	Y+5, r24	; 0x05
    2a5c:	3f c0       	rjmp	.+126    	; 0x2adc <CLCD_VidDisplayClear+0xea>
	else if (__tmp > 65535)
    2a5e:	6f 81       	ldd	r22, Y+7	; 0x07
    2a60:	78 85       	ldd	r23, Y+8	; 0x08
    2a62:	89 85       	ldd	r24, Y+9	; 0x09
    2a64:	9a 85       	ldd	r25, Y+10	; 0x0a
    2a66:	20 e0       	ldi	r18, 0x00	; 0
    2a68:	3f ef       	ldi	r19, 0xFF	; 255
    2a6a:	4f e7       	ldi	r20, 0x7F	; 127
    2a6c:	57 e4       	ldi	r21, 0x47	; 71
    2a6e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2a72:	18 16       	cp	r1, r24
    2a74:	4c f5       	brge	.+82     	; 0x2ac8 <CLCD_VidDisplayClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2a76:	6b 85       	ldd	r22, Y+11	; 0x0b
    2a78:	7c 85       	ldd	r23, Y+12	; 0x0c
    2a7a:	8d 85       	ldd	r24, Y+13	; 0x0d
    2a7c:	9e 85       	ldd	r25, Y+14	; 0x0e
    2a7e:	20 e0       	ldi	r18, 0x00	; 0
    2a80:	30 e0       	ldi	r19, 0x00	; 0
    2a82:	40 e2       	ldi	r20, 0x20	; 32
    2a84:	51 e4       	ldi	r21, 0x41	; 65
    2a86:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2a8a:	dc 01       	movw	r26, r24
    2a8c:	cb 01       	movw	r24, r22
    2a8e:	bc 01       	movw	r22, r24
    2a90:	cd 01       	movw	r24, r26
    2a92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2a96:	dc 01       	movw	r26, r24
    2a98:	cb 01       	movw	r24, r22
    2a9a:	9e 83       	std	Y+6, r25	; 0x06
    2a9c:	8d 83       	std	Y+5, r24	; 0x05
    2a9e:	0f c0       	rjmp	.+30     	; 0x2abe <CLCD_VidDisplayClear+0xcc>
    2aa0:	88 ec       	ldi	r24, 0xC8	; 200
    2aa2:	90 e0       	ldi	r25, 0x00	; 0
    2aa4:	9c 83       	std	Y+4, r25	; 0x04
    2aa6:	8b 83       	std	Y+3, r24	; 0x03
    2aa8:	8b 81       	ldd	r24, Y+3	; 0x03
    2aaa:	9c 81       	ldd	r25, Y+4	; 0x04
    2aac:	01 97       	sbiw	r24, 0x01	; 1
    2aae:	f1 f7       	brne	.-4      	; 0x2aac <CLCD_VidDisplayClear+0xba>
    2ab0:	9c 83       	std	Y+4, r25	; 0x04
    2ab2:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2ab4:	8d 81       	ldd	r24, Y+5	; 0x05
    2ab6:	9e 81       	ldd	r25, Y+6	; 0x06
    2ab8:	01 97       	sbiw	r24, 0x01	; 1
    2aba:	9e 83       	std	Y+6, r25	; 0x06
    2abc:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2abe:	8d 81       	ldd	r24, Y+5	; 0x05
    2ac0:	9e 81       	ldd	r25, Y+6	; 0x06
    2ac2:	00 97       	sbiw	r24, 0x00	; 0
    2ac4:	69 f7       	brne	.-38     	; 0x2aa0 <CLCD_VidDisplayClear+0xae>
    2ac6:	14 c0       	rjmp	.+40     	; 0x2af0 <CLCD_VidDisplayClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ac8:	6f 81       	ldd	r22, Y+7	; 0x07
    2aca:	78 85       	ldd	r23, Y+8	; 0x08
    2acc:	89 85       	ldd	r24, Y+9	; 0x09
    2ace:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ad0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2ad4:	dc 01       	movw	r26, r24
    2ad6:	cb 01       	movw	r24, r22
    2ad8:	9e 83       	std	Y+6, r25	; 0x06
    2ada:	8d 83       	std	Y+5, r24	; 0x05
    2adc:	8d 81       	ldd	r24, Y+5	; 0x05
    2ade:	9e 81       	ldd	r25, Y+6	; 0x06
    2ae0:	9a 83       	std	Y+2, r25	; 0x02
    2ae2:	89 83       	std	Y+1, r24	; 0x01
    2ae4:	89 81       	ldd	r24, Y+1	; 0x01
    2ae6:	9a 81       	ldd	r25, Y+2	; 0x02
    2ae8:	01 97       	sbiw	r24, 0x01	; 1
    2aea:	f1 f7       	brne	.-4      	; 0x2ae8 <CLCD_VidDisplayClear+0xf6>
    2aec:	9a 83       	std	Y+2, r25	; 0x02
    2aee:	89 83       	std	Y+1, r24	; 0x01
    //Delays
    _delay_ms(2);
}
    2af0:	2e 96       	adiw	r28, 0x0e	; 14
    2af2:	0f b6       	in	r0, 0x3f	; 63
    2af4:	f8 94       	cli
    2af6:	de bf       	out	0x3e, r29	; 62
    2af8:	0f be       	out	0x3f, r0	; 63
    2afa:	cd bf       	out	0x3d, r28	; 61
    2afc:	cf 91       	pop	r28
    2afe:	df 91       	pop	r29
    2b00:	08 95       	ret

00002b02 <CLCD_VidGotoXY>:

void CLCD_VidGotoXY(u8 Copy_u8XPos, u8 Copy_u8YPos) //Function to go to certain position on CLCD
{
    2b02:	df 93       	push	r29
    2b04:	cf 93       	push	r28
    2b06:	00 d0       	rcall	.+0      	; 0x2b08 <CLCD_VidGotoXY+0x6>
    2b08:	0f 92       	push	r0
    2b0a:	cd b7       	in	r28, 0x3d	; 61
    2b0c:	de b7       	in	r29, 0x3e	; 62
    2b0e:	8a 83       	std	Y+2, r24	; 0x02
    2b10:	6b 83       	std	Y+3, r22	; 0x03

    u8 Local_u8Address = 0;
    2b12:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8XPos == 0)
    2b14:	8a 81       	ldd	r24, Y+2	; 0x02
    2b16:	88 23       	and	r24, r24
    2b18:	19 f4       	brne	.+6      	; 0x2b20 <CLCD_VidGotoXY+0x1e>
    {
        Local_u8Address = Copy_u8YPos;
    2b1a:	8b 81       	ldd	r24, Y+3	; 0x03
    2b1c:	89 83       	std	Y+1, r24	; 0x01
    2b1e:	06 c0       	rjmp	.+12     	; 0x2b2c <CLCD_VidGotoXY+0x2a>
    }

    else if (Copy_u8XPos == 1)
    2b20:	8a 81       	ldd	r24, Y+2	; 0x02
    2b22:	81 30       	cpi	r24, 0x01	; 1
    2b24:	19 f4       	brne	.+6      	; 0x2b2c <CLCD_VidGotoXY+0x2a>
    {

        Local_u8Address = 0x40 + Copy_u8YPos;
    2b26:	8b 81       	ldd	r24, Y+3	; 0x03
    2b28:	80 5c       	subi	r24, 0xC0	; 192
    2b2a:	89 83       	std	Y+1, r24	; 0x01
    }

    //Send this adderess to the DDram  128 + Local_u8Address because of the 1 in bit 7 of data sheet

    CLCD_VidSendCommand(0b010000000 + Local_u8Address);
    2b2c:	89 81       	ldd	r24, Y+1	; 0x01
    2b2e:	80 58       	subi	r24, 0x80	; 128
    2b30:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_VidSendCommand>
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	08 95       	ret

00002b40 <CLCD_VidCreatSpecialChar>:

void CLCD_VidCreatSpecialChar(u8 *Copy_u8Pattern, u8 Copy_u8PatternNumber) //Function to write special character on CLCD
{
    2b40:	df 93       	push	r29
    2b42:	cf 93       	push	r28
    2b44:	00 d0       	rcall	.+0      	; 0x2b46 <CLCD_VidCreatSpecialChar+0x6>
    2b46:	00 d0       	rcall	.+0      	; 0x2b48 <CLCD_VidCreatSpecialChar+0x8>
    2b48:	0f 92       	push	r0
    2b4a:	cd b7       	in	r28, 0x3d	; 61
    2b4c:	de b7       	in	r29, 0x3e	; 62
    2b4e:	9c 83       	std	Y+4, r25	; 0x04
    2b50:	8b 83       	std	Y+3, r24	; 0x03
    2b52:	6d 83       	std	Y+5, r22	; 0x05

    u8 Local_u8CGRAMAddress = 0;
    2b54:	1a 82       	std	Y+2, r1	; 0x02

    //Calculate the CGRAM Address
    Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    2b56:	8d 81       	ldd	r24, Y+5	; 0x05
    2b58:	88 2f       	mov	r24, r24
    2b5a:	90 e0       	ldi	r25, 0x00	; 0
    2b5c:	88 0f       	add	r24, r24
    2b5e:	99 1f       	adc	r25, r25
    2b60:	88 0f       	add	r24, r24
    2b62:	99 1f       	adc	r25, r25
    2b64:	88 0f       	add	r24, r24
    2b66:	99 1f       	adc	r25, r25
    2b68:	8a 83       	std	Y+2, r24	; 0x02

    //Send CGRAM address command to LCD with setting bit 6 to 1 -----> 64
    CLCD_VidSendCommand(Local_u8CGRAMAddress + 64);
    2b6a:	8a 81       	ldd	r24, Y+2	; 0x02
    2b6c:	80 5c       	subi	r24, 0xC0	; 192
    2b6e:	0e 94 fd 10 	call	0x21fa	; 0x21fa <CLCD_VidSendCommand>

    //Write pattern into CGRAM
    for (u8 i = 0; i < 8; i++)
    2b72:	19 82       	std	Y+1, r1	; 0x01
    2b74:	0e c0       	rjmp	.+28     	; 0x2b92 <CLCD_VidCreatSpecialChar+0x52>
    {
        CLCD_VidSendData(Copy_u8Pattern[i]);
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	8b 81       	ldd	r24, Y+3	; 0x03
    2b7e:	9c 81       	ldd	r25, Y+4	; 0x04
    2b80:	fc 01       	movw	r30, r24
    2b82:	e2 0f       	add	r30, r18
    2b84:	f3 1f       	adc	r31, r19
    2b86:	80 81       	ld	r24, Z
    2b88:	0e 94 9b 11 	call	0x2336	; 0x2336 <CLCD_VidSendData>

    //Send CGRAM address command to LCD with setting bit 6 to 1 -----> 64
    CLCD_VidSendCommand(Local_u8CGRAMAddress + 64);

    //Write pattern into CGRAM
    for (u8 i = 0; i < 8; i++)
    2b8c:	89 81       	ldd	r24, Y+1	; 0x01
    2b8e:	8f 5f       	subi	r24, 0xFF	; 255
    2b90:	89 83       	std	Y+1, r24	; 0x01
    2b92:	89 81       	ldd	r24, Y+1	; 0x01
    2b94:	88 30       	cpi	r24, 0x08	; 8
    2b96:	78 f3       	brcs	.-34     	; 0x2b76 <CLCD_VidCreatSpecialChar+0x36>
    {
        CLCD_VidSendData(Copy_u8Pattern[i]);
    }
}
    2b98:	0f 90       	pop	r0
    2b9a:	0f 90       	pop	r0
    2b9c:	0f 90       	pop	r0
    2b9e:	0f 90       	pop	r0
    2ba0:	0f 90       	pop	r0
    2ba2:	cf 91       	pop	r28
    2ba4:	df 91       	pop	r29
    2ba6:	08 95       	ret

00002ba8 <CLCD_VidSendString>:

void CLCD_VidSendString(u8 *Copy_u8Str)
{
    2ba8:	df 93       	push	r29
    2baa:	cf 93       	push	r28
    2bac:	00 d0       	rcall	.+0      	; 0x2bae <CLCD_VidSendString+0x6>
    2bae:	cd b7       	in	r28, 0x3d	; 61
    2bb0:	de b7       	in	r29, 0x3e	; 62
    2bb2:	9a 83       	std	Y+2, r25	; 0x02
    2bb4:	89 83       	std	Y+1, r24	; 0x01
    2bb6:	0a c0       	rjmp	.+20     	; 0x2bcc <CLCD_VidSendString+0x24>

    while (*Copy_u8Str != '\0')
    {
        CLCD_VidSendData(*Copy_u8Str);
    2bb8:	e9 81       	ldd	r30, Y+1	; 0x01
    2bba:	fa 81       	ldd	r31, Y+2	; 0x02
    2bbc:	80 81       	ld	r24, Z
    2bbe:	0e 94 9b 11 	call	0x2336	; 0x2336 <CLCD_VidSendData>
        Copy_u8Str++;
    2bc2:	89 81       	ldd	r24, Y+1	; 0x01
    2bc4:	9a 81       	ldd	r25, Y+2	; 0x02
    2bc6:	01 96       	adiw	r24, 0x01	; 1
    2bc8:	9a 83       	std	Y+2, r25	; 0x02
    2bca:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_VidSendString(u8 *Copy_u8Str)
{

    while (*Copy_u8Str != '\0')
    2bcc:	e9 81       	ldd	r30, Y+1	; 0x01
    2bce:	fa 81       	ldd	r31, Y+2	; 0x02
    2bd0:	80 81       	ld	r24, Z
    2bd2:	88 23       	and	r24, r24
    2bd4:	89 f7       	brne	.-30     	; 0x2bb8 <CLCD_VidSendString+0x10>
    {
        CLCD_VidSendData(*Copy_u8Str);
        Copy_u8Str++;
    }
}
    2bd6:	0f 90       	pop	r0
    2bd8:	0f 90       	pop	r0
    2bda:	cf 91       	pop	r28
    2bdc:	df 91       	pop	r29
    2bde:	08 95       	ret

00002be0 <DC_Motor_Init>:
#include "DC_Motor.h"

void DC_Motor_Init()
{
    2be0:	df 93       	push	r29
    2be2:	cf 93       	push	r28
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
	DDRD |= (1<<1)|(1<<2);
    2be8:	a1 e3       	ldi	r26, 0x31	; 49
    2bea:	b0 e0       	ldi	r27, 0x00	; 0
    2bec:	e1 e3       	ldi	r30, 0x31	; 49
    2bee:	f0 e0       	ldi	r31, 0x00	; 0
    2bf0:	80 81       	ld	r24, Z
    2bf2:	86 60       	ori	r24, 0x06	; 6
    2bf4:	8c 93       	st	X, r24
	DDRD |= (1<<1);
    2bf6:	a1 e3       	ldi	r26, 0x31	; 49
    2bf8:	b0 e0       	ldi	r27, 0x00	; 0
    2bfa:	e1 e3       	ldi	r30, 0x31	; 49
    2bfc:	f0 e0       	ldi	r31, 0x00	; 0
    2bfe:	80 81       	ld	r24, Z
    2c00:	82 60       	ori	r24, 0x02	; 2
    2c02:	8c 93       	st	X, r24
	OCR1A = 200;
    2c04:	ea e4       	ldi	r30, 0x4A	; 74
    2c06:	f0 e0       	ldi	r31, 0x00	; 0
    2c08:	88 ec       	ldi	r24, 0xC8	; 200
    2c0a:	90 e0       	ldi	r25, 0x00	; 0
    2c0c:	91 83       	std	Z+1, r25	; 0x01
    2c0e:	80 83       	st	Z, r24
	TCCR1A =  (1<<WGM10) | (1<<COM1A1);
    2c10:	ef e4       	ldi	r30, 0x4F	; 79
    2c12:	f0 e0       	ldi	r31, 0x00	; 0
    2c14:	81 e8       	ldi	r24, 0x81	; 129
    2c16:	80 83       	st	Z, r24
	TCCR1B = (1<<WGM12) | (1<<CS11) | (1<<CS10);
    2c18:	ee e4       	ldi	r30, 0x4E	; 78
    2c1a:	f0 e0       	ldi	r31, 0x00	; 0
    2c1c:	8b e0       	ldi	r24, 0x0B	; 11
    2c1e:	80 83       	st	Z, r24
}
    2c20:	cf 91       	pop	r28
    2c22:	df 91       	pop	r29
    2c24:	08 95       	ret

00002c26 <DC_Motor_Direction>:

void DC_Motor_Direction(unsigned char Dir)
{
    2c26:	df 93       	push	r29
    2c28:	cf 93       	push	r28
    2c2a:	00 d0       	rcall	.+0      	; 0x2c2c <DC_Motor_Direction+0x6>
    2c2c:	0f 92       	push	r0
    2c2e:	cd b7       	in	r28, 0x3d	; 61
    2c30:	de b7       	in	r29, 0x3e	; 62
    2c32:	89 83       	std	Y+1, r24	; 0x01
	switch(Dir)
    2c34:	89 81       	ldd	r24, Y+1	; 0x01
    2c36:	28 2f       	mov	r18, r24
    2c38:	30 e0       	ldi	r19, 0x00	; 0
    2c3a:	3b 83       	std	Y+3, r19	; 0x03
    2c3c:	2a 83       	std	Y+2, r18	; 0x02
    2c3e:	8a 81       	ldd	r24, Y+2	; 0x02
    2c40:	9b 81       	ldd	r25, Y+3	; 0x03
    2c42:	82 34       	cpi	r24, 0x42	; 66
    2c44:	91 05       	cpc	r25, r1
    2c46:	a1 f0       	breq	.+40     	; 0x2c70 <DC_Motor_Direction+0x4a>
    2c48:	2a 81       	ldd	r18, Y+2	; 0x02
    2c4a:	3b 81       	ldd	r19, Y+3	; 0x03
    2c4c:	26 34       	cpi	r18, 0x46	; 70
    2c4e:	31 05       	cpc	r19, r1
    2c50:	e9 f4       	brne	.+58     	; 0x2c8c <DC_Motor_Direction+0x66>
	{
		case 'F':
		PORTD |= (1<<1);
    2c52:	a2 e3       	ldi	r26, 0x32	; 50
    2c54:	b0 e0       	ldi	r27, 0x00	; 0
    2c56:	e2 e3       	ldi	r30, 0x32	; 50
    2c58:	f0 e0       	ldi	r31, 0x00	; 0
    2c5a:	80 81       	ld	r24, Z
    2c5c:	82 60       	ori	r24, 0x02	; 2
    2c5e:	8c 93       	st	X, r24
		PORTD &=~ (1<<2);
    2c60:	a2 e3       	ldi	r26, 0x32	; 50
    2c62:	b0 e0       	ldi	r27, 0x00	; 0
    2c64:	e2 e3       	ldi	r30, 0x32	; 50
    2c66:	f0 e0       	ldi	r31, 0x00	; 0
    2c68:	80 81       	ld	r24, Z
    2c6a:	8b 7f       	andi	r24, 0xFB	; 251
    2c6c:	8c 93       	st	X, r24
    2c6e:	0e c0       	rjmp	.+28     	; 0x2c8c <DC_Motor_Direction+0x66>
		break;
		case 'B':
		PORTD |= (1<<2);
    2c70:	a2 e3       	ldi	r26, 0x32	; 50
    2c72:	b0 e0       	ldi	r27, 0x00	; 0
    2c74:	e2 e3       	ldi	r30, 0x32	; 50
    2c76:	f0 e0       	ldi	r31, 0x00	; 0
    2c78:	80 81       	ld	r24, Z
    2c7a:	84 60       	ori	r24, 0x04	; 4
    2c7c:	8c 93       	st	X, r24
		PORTD &=~ (1<<1);
    2c7e:	a2 e3       	ldi	r26, 0x32	; 50
    2c80:	b0 e0       	ldi	r27, 0x00	; 0
    2c82:	e2 e3       	ldi	r30, 0x32	; 50
    2c84:	f0 e0       	ldi	r31, 0x00	; 0
    2c86:	80 81       	ld	r24, Z
    2c88:	8d 7f       	andi	r24, 0xFD	; 253
    2c8a:	8c 93       	st	X, r24
		break;
	}
    2c8c:	0f 90       	pop	r0
    2c8e:	0f 90       	pop	r0
    2c90:	0f 90       	pop	r0
    2c92:	cf 91       	pop	r28
    2c94:	df 91       	pop	r29
    2c96:	08 95       	ret

00002c98 <main>:
#include "HAL/DC_Motor.h"
#include <stdlib.h>
#include <util/delay.h>

int main(void)
{
    2c98:	df 93       	push	r29
    2c9a:	cf 93       	push	r28
    2c9c:	cd b7       	in	r28, 0x3d	; 61
    2c9e:	de b7       	in	r29, 0x3e	; 62
    2ca0:	65 97       	sbiw	r28, 0x15	; 21
    2ca2:	0f b6       	in	r0, 0x3f	; 63
    2ca4:	f8 94       	cli
    2ca6:	de bf       	out	0x3e, r29	; 62
    2ca8:	0f be       	out	0x3f, r0	; 63
    2caa:	cd bf       	out	0x3d, r28	; 61
    /* CLCD init */
    DIO_VidSetPortMode(Port_C, Port_output);
    2cac:	83 e0       	ldi	r24, 0x03	; 3
    2cae:	6f ef       	ldi	r22, 0xFF	; 255
    2cb0:	0e 94 72 0a 	call	0x14e4	; 0x14e4 <DIO_VidSetPortMode>
    DIO_VidSetPinMode(Port_A, Pin_5, output);
    2cb4:	81 e0       	ldi	r24, 0x01	; 1
    2cb6:	65 e0       	ldi	r22, 0x05	; 5
    2cb8:	41 e0       	ldi	r20, 0x01	; 1
    2cba:	0e 94 aa 08 	call	0x1154	; 0x1154 <DIO_VidSetPinMode>
    DIO_VidSetPinMode(Port_A, Pin_6, output);
    2cbe:	81 e0       	ldi	r24, 0x01	; 1
    2cc0:	66 e0       	ldi	r22, 0x06	; 6
    2cc2:	41 e0       	ldi	r20, 0x01	; 1
    2cc4:	0e 94 aa 08 	call	0x1154	; 0x1154 <DIO_VidSetPinMode>
    DIO_VidSetPinMode(Port_A, Pin_7, output);
    2cc8:	81 e0       	ldi	r24, 0x01	; 1
    2cca:	67 e0       	ldi	r22, 0x07	; 7
    2ccc:	41 e0       	ldi	r20, 0x01	; 1
    2cce:	0e 94 aa 08 	call	0x1154	; 0x1154 <DIO_VidSetPinMode>
    CLCD_VidInit();
    2cd2:	0e 94 39 12 	call	0x2472	; 0x2472 <CLCD_VidInit>

    /* ADC init */
    ADC_VidInit();
    2cd6:	0e 94 17 07 	call	0xe2e	; 0xe2e <ADC_VidInit>

    /* DC Motor init */
    DC_Motor_Init();
    2cda:	0e 94 f0 15 	call	0x2be0	; 0x2be0 <DC_Motor_Init>

    /* SPI Master init */
    DIO_VidSetPinMode(Port_B, Pin_4, input);
    2cde:	82 e0       	ldi	r24, 0x02	; 2
    2ce0:	64 e0       	ldi	r22, 0x04	; 4
    2ce2:	40 e0       	ldi	r20, 0x00	; 0
    2ce4:	0e 94 aa 08 	call	0x1154	; 0x1154 <DIO_VidSetPinMode>
    DIO_VidSetPinMode(Port_B, Pin_5, input);
    2ce8:	82 e0       	ldi	r24, 0x02	; 2
    2cea:	65 e0       	ldi	r22, 0x05	; 5
    2cec:	40 e0       	ldi	r20, 0x00	; 0
    2cee:	0e 94 aa 08 	call	0x1154	; 0x1154 <DIO_VidSetPinMode>
    DIO_VidSetPinMode(Port_B, Pin_7, input);
    2cf2:	82 e0       	ldi	r24, 0x02	; 2
    2cf4:	67 e0       	ldi	r22, 0x07	; 7
    2cf6:	40 e0       	ldi	r20, 0x00	; 0
    2cf8:	0e 94 aa 08 	call	0x1154	; 0x1154 <DIO_VidSetPinMode>
    DIO_VidSetPinMode(Port_B, Pin_6, output);
    2cfc:	82 e0       	ldi	r24, 0x02	; 2
    2cfe:	66 e0       	ldi	r22, 0x06	; 6
    2d00:	41 e0       	ldi	r20, 0x01	; 1
    2d02:	0e 94 aa 08 	call	0x1154	; 0x1154 <DIO_VidSetPinMode>
    SPI_VidInit();
    2d06:	0e 94 01 0b 	call	0x1602	; 0x1602 <SPI_VidInit>

    /* LED Port Mode Set */
    DIO_VidSetPinMode(Port_D, Pin_0, output);
    2d0a:	84 e0       	ldi	r24, 0x04	; 4
    2d0c:	60 e0       	ldi	r22, 0x00	; 0
    2d0e:	41 e0       	ldi	r20, 0x01	; 1
    2d10:	0e 94 aa 08 	call	0x1154	; 0x1154 <DIO_VidSetPinMode>

    /*-------------------Local Variables----------------------*/

    u16 Temp = 0;
    2d14:	19 8a       	std	Y+17, r1	; 0x11
    2d16:	18 8a       	std	Y+16, r1	; 0x10
    u8 CMD;

    while (1)
    {
        /* Receive Command from Master */
        CMD = SPI_u8ReceiveByte();
    2d18:	0e 94 29 0b 	call	0x1652	; 0x1652 <SPI_u8ReceiveByte>
    2d1c:	8f 87       	std	Y+15, r24	; 0x0f
    2d1e:	80 e0       	ldi	r24, 0x00	; 0
    2d20:	90 e0       	ldi	r25, 0x00	; 0
    2d22:	a8 ec       	ldi	r26, 0xC8	; 200
    2d24:	b2 e4       	ldi	r27, 0x42	; 66
    2d26:	8b 87       	std	Y+11, r24	; 0x0b
    2d28:	9c 87       	std	Y+12, r25	; 0x0c
    2d2a:	ad 87       	std	Y+13, r26	; 0x0d
    2d2c:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d2e:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d30:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d32:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d34:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	4a ef       	ldi	r20, 0xFA	; 250
    2d3c:	54 e4       	ldi	r21, 0x44	; 68
    2d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	8f 83       	std	Y+7, r24	; 0x07
    2d48:	98 87       	std	Y+8, r25	; 0x08
    2d4a:	a9 87       	std	Y+9, r26	; 0x09
    2d4c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2d4e:	6f 81       	ldd	r22, Y+7	; 0x07
    2d50:	78 85       	ldd	r23, Y+8	; 0x08
    2d52:	89 85       	ldd	r24, Y+9	; 0x09
    2d54:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d56:	20 e0       	ldi	r18, 0x00	; 0
    2d58:	30 e0       	ldi	r19, 0x00	; 0
    2d5a:	40 e8       	ldi	r20, 0x80	; 128
    2d5c:	5f e3       	ldi	r21, 0x3F	; 63
    2d5e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d62:	88 23       	and	r24, r24
    2d64:	2c f4       	brge	.+10     	; 0x2d70 <main+0xd8>
		__ticks = 1;
    2d66:	81 e0       	ldi	r24, 0x01	; 1
    2d68:	90 e0       	ldi	r25, 0x00	; 0
    2d6a:	9e 83       	std	Y+6, r25	; 0x06
    2d6c:	8d 83       	std	Y+5, r24	; 0x05
    2d6e:	3f c0       	rjmp	.+126    	; 0x2dee <main+0x156>
	else if (__tmp > 65535)
    2d70:	6f 81       	ldd	r22, Y+7	; 0x07
    2d72:	78 85       	ldd	r23, Y+8	; 0x08
    2d74:	89 85       	ldd	r24, Y+9	; 0x09
    2d76:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d78:	20 e0       	ldi	r18, 0x00	; 0
    2d7a:	3f ef       	ldi	r19, 0xFF	; 255
    2d7c:	4f e7       	ldi	r20, 0x7F	; 127
    2d7e:	57 e4       	ldi	r21, 0x47	; 71
    2d80:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d84:	18 16       	cp	r1, r24
    2d86:	4c f5       	brge	.+82     	; 0x2dda <main+0x142>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d88:	6b 85       	ldd	r22, Y+11	; 0x0b
    2d8a:	7c 85       	ldd	r23, Y+12	; 0x0c
    2d8c:	8d 85       	ldd	r24, Y+13	; 0x0d
    2d8e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2d90:	20 e0       	ldi	r18, 0x00	; 0
    2d92:	30 e0       	ldi	r19, 0x00	; 0
    2d94:	40 e2       	ldi	r20, 0x20	; 32
    2d96:	51 e4       	ldi	r21, 0x41	; 65
    2d98:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d9c:	dc 01       	movw	r26, r24
    2d9e:	cb 01       	movw	r24, r22
    2da0:	bc 01       	movw	r22, r24
    2da2:	cd 01       	movw	r24, r26
    2da4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2da8:	dc 01       	movw	r26, r24
    2daa:	cb 01       	movw	r24, r22
    2dac:	9e 83       	std	Y+6, r25	; 0x06
    2dae:	8d 83       	std	Y+5, r24	; 0x05
    2db0:	0f c0       	rjmp	.+30     	; 0x2dd0 <main+0x138>
    2db2:	88 ec       	ldi	r24, 0xC8	; 200
    2db4:	90 e0       	ldi	r25, 0x00	; 0
    2db6:	9c 83       	std	Y+4, r25	; 0x04
    2db8:	8b 83       	std	Y+3, r24	; 0x03
    2dba:	8b 81       	ldd	r24, Y+3	; 0x03
    2dbc:	9c 81       	ldd	r25, Y+4	; 0x04
    2dbe:	01 97       	sbiw	r24, 0x01	; 1
    2dc0:	f1 f7       	brne	.-4      	; 0x2dbe <main+0x126>
    2dc2:	9c 83       	std	Y+4, r25	; 0x04
    2dc4:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2dc6:	8d 81       	ldd	r24, Y+5	; 0x05
    2dc8:	9e 81       	ldd	r25, Y+6	; 0x06
    2dca:	01 97       	sbiw	r24, 0x01	; 1
    2dcc:	9e 83       	std	Y+6, r25	; 0x06
    2dce:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2dd0:	8d 81       	ldd	r24, Y+5	; 0x05
    2dd2:	9e 81       	ldd	r25, Y+6	; 0x06
    2dd4:	00 97       	sbiw	r24, 0x00	; 0
    2dd6:	69 f7       	brne	.-38     	; 0x2db2 <main+0x11a>
    2dd8:	14 c0       	rjmp	.+40     	; 0x2e02 <main+0x16a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2dda:	6f 81       	ldd	r22, Y+7	; 0x07
    2ddc:	78 85       	ldd	r23, Y+8	; 0x08
    2dde:	89 85       	ldd	r24, Y+9	; 0x09
    2de0:	9a 85       	ldd	r25, Y+10	; 0x0a
    2de2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2de6:	dc 01       	movw	r26, r24
    2de8:	cb 01       	movw	r24, r22
    2dea:	9e 83       	std	Y+6, r25	; 0x06
    2dec:	8d 83       	std	Y+5, r24	; 0x05
    2dee:	8d 81       	ldd	r24, Y+5	; 0x05
    2df0:	9e 81       	ldd	r25, Y+6	; 0x06
    2df2:	9a 83       	std	Y+2, r25	; 0x02
    2df4:	89 83       	std	Y+1, r24	; 0x01
    2df6:	89 81       	ldd	r24, Y+1	; 0x01
    2df8:	9a 81       	ldd	r25, Y+2	; 0x02
    2dfa:	01 97       	sbiw	r24, 0x01	; 1
    2dfc:	f1 f7       	brne	.-4      	; 0x2dfa <main+0x162>
    2dfe:	9a 83       	std	Y+2, r25	; 0x02
    2e00:	89 83       	std	Y+1, r24	; 0x01
        _delay_ms(100);

        /*-------------------Checking Command----------------------*/

        switch (CMD)
    2e02:	8f 85       	ldd	r24, Y+15	; 0x0f
    2e04:	28 2f       	mov	r18, r24
    2e06:	30 e0       	ldi	r19, 0x00	; 0
    2e08:	3d 8b       	std	Y+21, r19	; 0x15
    2e0a:	2c 8b       	std	Y+20, r18	; 0x14
    2e0c:	8c 89       	ldd	r24, Y+20	; 0x14
    2e0e:	9d 89       	ldd	r25, Y+21	; 0x15
    2e10:	83 33       	cpi	r24, 0x33	; 51
    2e12:	91 05       	cpc	r25, r1
    2e14:	a1 f1       	breq	.+104    	; 0x2e7e <main+0x1e6>
    2e16:	2c 89       	ldd	r18, Y+20	; 0x14
    2e18:	3d 89       	ldd	r19, Y+21	; 0x15
    2e1a:	24 33       	cpi	r18, 0x34	; 52
    2e1c:	31 05       	cpc	r19, r1
    2e1e:	5c f4       	brge	.+22     	; 0x2e36 <main+0x19e>
    2e20:	8c 89       	ldd	r24, Y+20	; 0x14
    2e22:	9d 89       	ldd	r25, Y+21	; 0x15
    2e24:	81 33       	cpi	r24, 0x31	; 49
    2e26:	91 05       	cpc	r25, r1
    2e28:	91 f0       	breq	.+36     	; 0x2e4e <main+0x1b6>
    2e2a:	2c 89       	ldd	r18, Y+20	; 0x14
    2e2c:	3d 89       	ldd	r19, Y+21	; 0x15
    2e2e:	22 33       	cpi	r18, 0x32	; 50
    2e30:	31 05       	cpc	r19, r1
    2e32:	c9 f0       	breq	.+50     	; 0x2e66 <main+0x1ce>
    2e34:	71 cf       	rjmp	.-286    	; 0x2d18 <main+0x80>
    2e36:	8c 89       	ldd	r24, Y+20	; 0x14
    2e38:	9d 89       	ldd	r25, Y+21	; 0x15
    2e3a:	84 33       	cpi	r24, 0x34	; 52
    2e3c:	91 05       	cpc	r25, r1
    2e3e:	a9 f1       	breq	.+106    	; 0x2eaa <main+0x212>
    2e40:	2c 89       	ldd	r18, Y+20	; 0x14
    2e42:	3d 89       	ldd	r19, Y+21	; 0x15
    2e44:	24 34       	cpi	r18, 0x44	; 68
    2e46:	31 05       	cpc	r19, r1
    2e48:	09 f4       	brne	.+2      	; 0x2e4c <main+0x1b4>
    2e4a:	45 c0       	rjmp	.+138    	; 0x2ed6 <main+0x23e>
    2e4c:	65 cf       	rjmp	.-310    	; 0x2d18 <main+0x80>
        {

        /* Light ON */
        case '1':
            DIO_VidSetPinValue(Port_D, Pin_0, high);
    2e4e:	84 e0       	ldi	r24, 0x04	; 4
    2e50:	60 e0       	ldi	r22, 0x00	; 0
    2e52:	41 e0       	ldi	r20, 0x01	; 1
    2e54:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
            CLCD_VidDisplayClear();
    2e58:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <CLCD_VidDisplayClear>
            CLCD_VidSendString("Light ON");
    2e5c:	80 e6       	ldi	r24, 0x60	; 96
    2e5e:	90 e0       	ldi	r25, 0x00	; 0
    2e60:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <CLCD_VidSendString>
    2e64:	59 cf       	rjmp	.-334    	; 0x2d18 <main+0x80>
            break;

        /* Light OFF */
        case '2':
            DIO_VidSetPinValue(Port_D, Pin_0, low);
    2e66:	84 e0       	ldi	r24, 0x04	; 4
    2e68:	60 e0       	ldi	r22, 0x00	; 0
    2e6a:	40 e0       	ldi	r20, 0x00	; 0
    2e6c:	0e 94 a8 07 	call	0xf50	; 0xf50 <DIO_VidSetPinValue>
            CLCD_VidDisplayClear();
    2e70:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <CLCD_VidDisplayClear>
            CLCD_VidSendString("Light OFF");
    2e74:	89 e6       	ldi	r24, 0x69	; 105
    2e76:	90 e0       	ldi	r25, 0x00	; 0
    2e78:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <CLCD_VidSendString>
    2e7c:	4d cf       	rjmp	.-358    	; 0x2d18 <main+0x80>
            break;

        /* DC Motor ON FWD */
        case '3':
            DC_Motor_Direction('F');
    2e7e:	86 e4       	ldi	r24, 0x46	; 70
    2e80:	0e 94 13 16 	call	0x2c26	; 0x2c26 <DC_Motor_Direction>
            CLCD_VidDisplayClear();
    2e84:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <CLCD_VidDisplayClear>
            CLCD_VidGotoXY(0, 0);
    2e88:	80 e0       	ldi	r24, 0x00	; 0
    2e8a:	60 e0       	ldi	r22, 0x00	; 0
    2e8c:	0e 94 81 15 	call	0x2b02	; 0x2b02 <CLCD_VidGotoXY>
            CLCD_VidSendString("DC Motor ON");
    2e90:	83 e7       	ldi	r24, 0x73	; 115
    2e92:	90 e0       	ldi	r25, 0x00	; 0
    2e94:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <CLCD_VidSendString>
            CLCD_VidGotoXY(1, 0);
    2e98:	81 e0       	ldi	r24, 0x01	; 1
    2e9a:	60 e0       	ldi	r22, 0x00	; 0
    2e9c:	0e 94 81 15 	call	0x2b02	; 0x2b02 <CLCD_VidGotoXY>
            CLCD_VidSendString("Forward Dir");
    2ea0:	8f e7       	ldi	r24, 0x7F	; 127
    2ea2:	90 e0       	ldi	r25, 0x00	; 0
    2ea4:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <CLCD_VidSendString>
    2ea8:	37 cf       	rjmp	.-402    	; 0x2d18 <main+0x80>
            break;

        /* DC Motor ON BWD */
        case '4':
            DC_Motor_Direction('B');
    2eaa:	82 e4       	ldi	r24, 0x42	; 66
    2eac:	0e 94 13 16 	call	0x2c26	; 0x2c26 <DC_Motor_Direction>
            CLCD_VidDisplayClear();
    2eb0:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <CLCD_VidDisplayClear>
            CLCD_VidGotoXY(0, 0);
    2eb4:	80 e0       	ldi	r24, 0x00	; 0
    2eb6:	60 e0       	ldi	r22, 0x00	; 0
    2eb8:	0e 94 81 15 	call	0x2b02	; 0x2b02 <CLCD_VidGotoXY>
            CLCD_VidSendString("DC Motor ON");
    2ebc:	83 e7       	ldi	r24, 0x73	; 115
    2ebe:	90 e0       	ldi	r25, 0x00	; 0
    2ec0:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <CLCD_VidSendString>
            CLCD_VidGotoXY(1, 0);
    2ec4:	81 e0       	ldi	r24, 0x01	; 1
    2ec6:	60 e0       	ldi	r22, 0x00	; 0
    2ec8:	0e 94 81 15 	call	0x2b02	; 0x2b02 <CLCD_VidGotoXY>
            CLCD_VidSendString("Backward Dir");
    2ecc:	8b e8       	ldi	r24, 0x8B	; 139
    2ece:	90 e0       	ldi	r25, 0x00	; 0
    2ed0:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <CLCD_VidSendString>
    2ed4:	21 cf       	rjmp	.-446    	; 0x2d18 <main+0x80>
            break;

        /* Light ON */
        case 0x44:
            Temp = ADC_u16Read(A0);
    2ed6:	80 e0       	ldi	r24, 0x00	; 0
    2ed8:	0e 94 56 07 	call	0xeac	; 0xeac <ADC_u16Read>
    2edc:	99 8b       	std	Y+17, r25	; 0x11
    2ede:	88 8b       	std	Y+16, r24	; 0x10
            Temp = (Temp * 5.0 / 1023UL) * 100;
    2ee0:	88 89       	ldd	r24, Y+16	; 0x10
    2ee2:	99 89       	ldd	r25, Y+17	; 0x11
    2ee4:	cc 01       	movw	r24, r24
    2ee6:	a0 e0       	ldi	r26, 0x00	; 0
    2ee8:	b0 e0       	ldi	r27, 0x00	; 0
    2eea:	bc 01       	movw	r22, r24
    2eec:	cd 01       	movw	r24, r26
    2eee:	0e 94 a9 04 	call	0x952	; 0x952 <__floatunsisf>
    2ef2:	dc 01       	movw	r26, r24
    2ef4:	cb 01       	movw	r24, r22
    2ef6:	bc 01       	movw	r22, r24
    2ef8:	cd 01       	movw	r24, r26
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	40 ea       	ldi	r20, 0xA0	; 160
    2f00:	50 e4       	ldi	r21, 0x40	; 64
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	bc 01       	movw	r22, r24
    2f0c:	cd 01       	movw	r24, r26
    2f0e:	20 e0       	ldi	r18, 0x00	; 0
    2f10:	30 ec       	ldi	r19, 0xC0	; 192
    2f12:	4f e7       	ldi	r20, 0x7F	; 127
    2f14:	54 e4       	ldi	r21, 0x44	; 68
    2f16:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    2f1a:	dc 01       	movw	r26, r24
    2f1c:	cb 01       	movw	r24, r22
    2f1e:	bc 01       	movw	r22, r24
    2f20:	cd 01       	movw	r24, r26
    2f22:	20 e0       	ldi	r18, 0x00	; 0
    2f24:	30 e0       	ldi	r19, 0x00	; 0
    2f26:	48 ec       	ldi	r20, 0xC8	; 200
    2f28:	52 e4       	ldi	r21, 0x42	; 66
    2f2a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f2e:	dc 01       	movw	r26, r24
    2f30:	cb 01       	movw	r24, r22
    2f32:	bc 01       	movw	r22, r24
    2f34:	cd 01       	movw	r24, r26
    2f36:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f3a:	dc 01       	movw	r26, r24
    2f3c:	cb 01       	movw	r24, r22
    2f3e:	99 8b       	std	Y+17, r25	; 0x11
    2f40:	88 8b       	std	Y+16, r24	; 0x10
            itoa(Temp, buffer, 10);
    2f42:	88 89       	ldd	r24, Y+16	; 0x10
    2f44:	99 89       	ldd	r25, Y+17	; 0x11
    2f46:	9e 01       	movw	r18, r28
    2f48:	2e 5e       	subi	r18, 0xEE	; 238
    2f4a:	3f 4f       	sbci	r19, 0xFF	; 255
    2f4c:	b9 01       	movw	r22, r18
    2f4e:	4a e0       	ldi	r20, 0x0A	; 10
    2f50:	50 e0       	ldi	r21, 0x00	; 0
    2f52:	0e 94 16 18 	call	0x302c	; 0x302c <itoa>

            if (SPI_u8TranceiveByte(buffer[0]) == 0x21)
    2f56:	8a 89       	ldd	r24, Y+18	; 0x12
    2f58:	0e 94 38 0b 	call	0x1670	; 0x1670 <SPI_u8TranceiveByte>
    2f5c:	81 32       	cpi	r24, 0x21	; 33
    2f5e:	91 f4       	brne	.+36     	; 0x2f84 <main+0x2ec>
            {
                CLCD_VidDisplayClear();
    2f60:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <CLCD_VidDisplayClear>
                CLCD_VidGotoXY(0, 0);
    2f64:	80 e0       	ldi	r24, 0x00	; 0
    2f66:	60 e0       	ldi	r22, 0x00	; 0
    2f68:	0e 94 81 15 	call	0x2b02	; 0x2b02 <CLCD_VidGotoXY>
                CLCD_VidSendString("Reading");
    2f6c:	88 e9       	ldi	r24, 0x98	; 152
    2f6e:	90 e0       	ldi	r25, 0x00	; 0
    2f70:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <CLCD_VidSendString>
                CLCD_VidGotoXY(1, 0);
    2f74:	81 e0       	ldi	r24, 0x01	; 1
    2f76:	60 e0       	ldi	r22, 0x00	; 0
    2f78:	0e 94 81 15 	call	0x2b02	; 0x2b02 <CLCD_VidGotoXY>
                CLCD_VidSendString("Temperature");
    2f7c:	80 ea       	ldi	r24, 0xA0	; 160
    2f7e:	90 e0       	ldi	r25, 0x00	; 0
    2f80:	0e 94 d4 15 	call	0x2ba8	; 0x2ba8 <CLCD_VidSendString>
            }

            if (SPI_u8TranceiveByte(buffer[1]) == 0x22)
    2f84:	8b 89       	ldd	r24, Y+19	; 0x13
    2f86:	0e 94 38 0b 	call	0x1670	; 0x1670 <SPI_u8TranceiveByte>
    2f8a:	82 32       	cpi	r24, 0x22	; 34
    2f8c:	09 f0       	breq	.+2      	; 0x2f90 <main+0x2f8>
    2f8e:	c4 ce       	rjmp	.-632    	; 0x2d18 <main+0x80>
            {
                CLCD_VidDisplayClear();
    2f90:	0e 94 f9 14 	call	0x29f2	; 0x29f2 <CLCD_VidDisplayClear>
    2f94:	c1 ce       	rjmp	.-638    	; 0x2d18 <main+0x80>

00002f96 <__udivmodhi4>:
    2f96:	aa 1b       	sub	r26, r26
    2f98:	bb 1b       	sub	r27, r27
    2f9a:	51 e1       	ldi	r21, 0x11	; 17
    2f9c:	07 c0       	rjmp	.+14     	; 0x2fac <__udivmodhi4_ep>

00002f9e <__udivmodhi4_loop>:
    2f9e:	aa 1f       	adc	r26, r26
    2fa0:	bb 1f       	adc	r27, r27
    2fa2:	a6 17       	cp	r26, r22
    2fa4:	b7 07       	cpc	r27, r23
    2fa6:	10 f0       	brcs	.+4      	; 0x2fac <__udivmodhi4_ep>
    2fa8:	a6 1b       	sub	r26, r22
    2faa:	b7 0b       	sbc	r27, r23

00002fac <__udivmodhi4_ep>:
    2fac:	88 1f       	adc	r24, r24
    2fae:	99 1f       	adc	r25, r25
    2fb0:	5a 95       	dec	r21
    2fb2:	a9 f7       	brne	.-22     	; 0x2f9e <__udivmodhi4_loop>
    2fb4:	80 95       	com	r24
    2fb6:	90 95       	com	r25
    2fb8:	bc 01       	movw	r22, r24
    2fba:	cd 01       	movw	r24, r26
    2fbc:	08 95       	ret

00002fbe <__prologue_saves__>:
    2fbe:	2f 92       	push	r2
    2fc0:	3f 92       	push	r3
    2fc2:	4f 92       	push	r4
    2fc4:	5f 92       	push	r5
    2fc6:	6f 92       	push	r6
    2fc8:	7f 92       	push	r7
    2fca:	8f 92       	push	r8
    2fcc:	9f 92       	push	r9
    2fce:	af 92       	push	r10
    2fd0:	bf 92       	push	r11
    2fd2:	cf 92       	push	r12
    2fd4:	df 92       	push	r13
    2fd6:	ef 92       	push	r14
    2fd8:	ff 92       	push	r15
    2fda:	0f 93       	push	r16
    2fdc:	1f 93       	push	r17
    2fde:	cf 93       	push	r28
    2fe0:	df 93       	push	r29
    2fe2:	cd b7       	in	r28, 0x3d	; 61
    2fe4:	de b7       	in	r29, 0x3e	; 62
    2fe6:	ca 1b       	sub	r28, r26
    2fe8:	db 0b       	sbc	r29, r27
    2fea:	0f b6       	in	r0, 0x3f	; 63
    2fec:	f8 94       	cli
    2fee:	de bf       	out	0x3e, r29	; 62
    2ff0:	0f be       	out	0x3f, r0	; 63
    2ff2:	cd bf       	out	0x3d, r28	; 61
    2ff4:	09 94       	ijmp

00002ff6 <__epilogue_restores__>:
    2ff6:	2a 88       	ldd	r2, Y+18	; 0x12
    2ff8:	39 88       	ldd	r3, Y+17	; 0x11
    2ffa:	48 88       	ldd	r4, Y+16	; 0x10
    2ffc:	5f 84       	ldd	r5, Y+15	; 0x0f
    2ffe:	6e 84       	ldd	r6, Y+14	; 0x0e
    3000:	7d 84       	ldd	r7, Y+13	; 0x0d
    3002:	8c 84       	ldd	r8, Y+12	; 0x0c
    3004:	9b 84       	ldd	r9, Y+11	; 0x0b
    3006:	aa 84       	ldd	r10, Y+10	; 0x0a
    3008:	b9 84       	ldd	r11, Y+9	; 0x09
    300a:	c8 84       	ldd	r12, Y+8	; 0x08
    300c:	df 80       	ldd	r13, Y+7	; 0x07
    300e:	ee 80       	ldd	r14, Y+6	; 0x06
    3010:	fd 80       	ldd	r15, Y+5	; 0x05
    3012:	0c 81       	ldd	r16, Y+4	; 0x04
    3014:	1b 81       	ldd	r17, Y+3	; 0x03
    3016:	aa 81       	ldd	r26, Y+2	; 0x02
    3018:	b9 81       	ldd	r27, Y+1	; 0x01
    301a:	ce 0f       	add	r28, r30
    301c:	d1 1d       	adc	r29, r1
    301e:	0f b6       	in	r0, 0x3f	; 63
    3020:	f8 94       	cli
    3022:	de bf       	out	0x3e, r29	; 62
    3024:	0f be       	out	0x3f, r0	; 63
    3026:	cd bf       	out	0x3d, r28	; 61
    3028:	ed 01       	movw	r28, r26
    302a:	08 95       	ret

0000302c <itoa>:
    302c:	fb 01       	movw	r30, r22
    302e:	9f 01       	movw	r18, r30
    3030:	e8 94       	clt
    3032:	42 30       	cpi	r20, 0x02	; 2
    3034:	c4 f0       	brlt	.+48     	; 0x3066 <itoa+0x3a>
    3036:	45 32       	cpi	r20, 0x25	; 37
    3038:	b4 f4       	brge	.+44     	; 0x3066 <itoa+0x3a>
    303a:	4a 30       	cpi	r20, 0x0A	; 10
    303c:	29 f4       	brne	.+10     	; 0x3048 <itoa+0x1c>
    303e:	97 fb       	bst	r25, 7
    3040:	1e f4       	brtc	.+6      	; 0x3048 <itoa+0x1c>
    3042:	90 95       	com	r25
    3044:	81 95       	neg	r24
    3046:	9f 4f       	sbci	r25, 0xFF	; 255
    3048:	64 2f       	mov	r22, r20
    304a:	77 27       	eor	r23, r23
    304c:	0e 94 cb 17 	call	0x2f96	; 0x2f96 <__udivmodhi4>
    3050:	80 5d       	subi	r24, 0xD0	; 208
    3052:	8a 33       	cpi	r24, 0x3A	; 58
    3054:	0c f0       	brlt	.+2      	; 0x3058 <itoa+0x2c>
    3056:	89 5d       	subi	r24, 0xD9	; 217
    3058:	81 93       	st	Z+, r24
    305a:	cb 01       	movw	r24, r22
    305c:	00 97       	sbiw	r24, 0x00	; 0
    305e:	a1 f7       	brne	.-24     	; 0x3048 <itoa+0x1c>
    3060:	16 f4       	brtc	.+4      	; 0x3066 <itoa+0x3a>
    3062:	5d e2       	ldi	r21, 0x2D	; 45
    3064:	51 93       	st	Z+, r21
    3066:	10 82       	st	Z, r1
    3068:	c9 01       	movw	r24, r18
    306a:	0c 94 37 18 	jmp	0x306e	; 0x306e <strrev>

0000306e <strrev>:
    306e:	dc 01       	movw	r26, r24
    3070:	fc 01       	movw	r30, r24
    3072:	67 2f       	mov	r22, r23
    3074:	71 91       	ld	r23, Z+
    3076:	77 23       	and	r23, r23
    3078:	e1 f7       	brne	.-8      	; 0x3072 <strrev+0x4>
    307a:	32 97       	sbiw	r30, 0x02	; 2
    307c:	04 c0       	rjmp	.+8      	; 0x3086 <strrev+0x18>
    307e:	7c 91       	ld	r23, X
    3080:	6d 93       	st	X+, r22
    3082:	70 83       	st	Z, r23
    3084:	62 91       	ld	r22, -Z
    3086:	ae 17       	cp	r26, r30
    3088:	bf 07       	cpc	r27, r31
    308a:	c8 f3       	brcs	.-14     	; 0x307e <strrev+0x10>
    308c:	08 95       	ret

0000308e <_exit>:
    308e:	f8 94       	cli

00003090 <__stop_program>:
    3090:	ff cf       	rjmp	.-2      	; 0x3090 <__stop_program>
