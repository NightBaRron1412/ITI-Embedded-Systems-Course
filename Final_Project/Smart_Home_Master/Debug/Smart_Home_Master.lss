
Smart_Home_Master.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003268  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000002c  00800060  00003268  000032fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000027  0080008c  0080008c  00003328  2**0
                  ALLOC
  3 .stab         00002a0c  00000000  00000000  00003328  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      000011fa  00000000  00000000  00005d34  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000160  00000000  00000000  00006f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 0000018f  00000000  00000000  0000708e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00002045  00000000  00000000  0000721d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00001101  00000000  00000000  00009262  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000f82  00000000  00000000  0000a363  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000180  00000000  00000000  0000b2e8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    000002c2  00000000  00000000  0000b468  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    0000088e  00000000  00000000  0000b72a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000bfb8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 20 0f 	jmp	0x1e40	; 0x1e40 <__vector_4>
      14:	0c 94 ed 0d 	jmp	0x1bda	; 0x1bda <__vector_5>
      18:	0c 94 b5 0c 	jmp	0x196a	; 0x196a <__vector_6>
      1c:	0c 94 8a 0e 	jmp	0x1d14	; 0x1d14 <__vector_7>
      20:	0c 94 d5 0e 	jmp	0x1daa	; 0x1daa <__vector_8>
      24:	0c 94 92 0d 	jmp	0x1b24	; 0x1b24 <__vector_9>
      28:	0c 94 3f 0e 	jmp	0x1c7e	; 0x1c7e <__vector_10>
      2c:	0c 94 40 0d 	jmp	0x1a80	; 0x1a80 <__vector_11>
      30:	0c 94 77 0a 	jmp	0x14ee	; 0x14ee <__vector_12>
      34:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	10 e0       	ldi	r17, 0x00	; 0
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	e8 e6       	ldi	r30, 0x68	; 104
      68:	f2 e3       	ldi	r31, 0x32	; 50
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	ac 38       	cpi	r26, 0x8C	; 140
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	10 e0       	ldi	r17, 0x00	; 0
      78:	ac e8       	ldi	r26, 0x8C	; 140
      7a:	b0 e0       	ldi	r27, 0x00	; 0
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	a3 3b       	cpi	r26, 0xB3	; 179
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 26 15 	call	0x2a4c	; 0x2a4c <main>
      8a:	0c 94 32 19 	jmp	0x3264	; 0x3264 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 f5 03 	call	0x7ea	; 0x7ea <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 55 04 	call	0x8aa	; 0x8aa <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a9 e7       	ldi	r26, 0x79	; 121
     128:	b0 e0       	ldi	r27, 0x00	; 0
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 17 19 	jmp	0x322e	; 0x322e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 07 19 	jmp	0x320e	; 0x320e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 07 19 	jmp	0x320e	; 0x320e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 fb 18 	jmp	0x31f6	; 0x31f6 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	89 e7       	ldi	r24, 0x79	; 121
     496:	90 e0       	ldi	r25, 0x00	; 0
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 17 19 	jmp	0x322e	; 0x322e <__epilogue_restores__>

00000632 <__divsf3>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 03 19 	jmp	0x3206	; 0x3206 <__prologue_saves__+0x10>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	b9 e0       	ldi	r27, 0x09	; 9
     650:	eb 2e       	mov	r14, r27
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     672:	29 85       	ldd	r18, Y+9	; 0x09
     674:	22 30       	cpi	r18, 0x02	; 2
     676:	08 f4       	brcc	.+2      	; 0x67a <__divsf3+0x48>
     678:	7e c0       	rjmp	.+252    	; 0x776 <__divsf3+0x144>
     67a:	39 89       	ldd	r19, Y+17	; 0x11
     67c:	32 30       	cpi	r19, 0x02	; 2
     67e:	10 f4       	brcc	.+4      	; 0x684 <__divsf3+0x52>
     680:	b8 01       	movw	r22, r16
     682:	7c c0       	rjmp	.+248    	; 0x77c <__divsf3+0x14a>
     684:	8a 85       	ldd	r24, Y+10	; 0x0a
     686:	9a 89       	ldd	r25, Y+18	; 0x12
     688:	89 27       	eor	r24, r25
     68a:	8a 87       	std	Y+10, r24	; 0x0a
     68c:	24 30       	cpi	r18, 0x04	; 4
     68e:	11 f0       	breq	.+4      	; 0x694 <__divsf3+0x62>
     690:	22 30       	cpi	r18, 0x02	; 2
     692:	31 f4       	brne	.+12     	; 0x6a0 <__divsf3+0x6e>
     694:	23 17       	cp	r18, r19
     696:	09 f0       	breq	.+2      	; 0x69a <__divsf3+0x68>
     698:	6e c0       	rjmp	.+220    	; 0x776 <__divsf3+0x144>
     69a:	69 e7       	ldi	r22, 0x79	; 121
     69c:	70 e0       	ldi	r23, 0x00	; 0
     69e:	6e c0       	rjmp	.+220    	; 0x77c <__divsf3+0x14a>
     6a0:	34 30       	cpi	r19, 0x04	; 4
     6a2:	39 f4       	brne	.+14     	; 0x6b2 <__divsf3+0x80>
     6a4:	1d 86       	std	Y+13, r1	; 0x0d
     6a6:	1e 86       	std	Y+14, r1	; 0x0e
     6a8:	1f 86       	std	Y+15, r1	; 0x0f
     6aa:	18 8a       	std	Y+16, r1	; 0x10
     6ac:	1c 86       	std	Y+12, r1	; 0x0c
     6ae:	1b 86       	std	Y+11, r1	; 0x0b
     6b0:	04 c0       	rjmp	.+8      	; 0x6ba <__divsf3+0x88>
     6b2:	32 30       	cpi	r19, 0x02	; 2
     6b4:	21 f4       	brne	.+8      	; 0x6be <__divsf3+0x8c>
     6b6:	84 e0       	ldi	r24, 0x04	; 4
     6b8:	89 87       	std	Y+9, r24	; 0x09
     6ba:	b7 01       	movw	r22, r14
     6bc:	5f c0       	rjmp	.+190    	; 0x77c <__divsf3+0x14a>
     6be:	2b 85       	ldd	r18, Y+11	; 0x0b
     6c0:	3c 85       	ldd	r19, Y+12	; 0x0c
     6c2:	8b 89       	ldd	r24, Y+19	; 0x13
     6c4:	9c 89       	ldd	r25, Y+20	; 0x14
     6c6:	28 1b       	sub	r18, r24
     6c8:	39 0b       	sbc	r19, r25
     6ca:	3c 87       	std	Y+12, r19	; 0x0c
     6cc:	2b 87       	std	Y+11, r18	; 0x0b
     6ce:	ed 84       	ldd	r14, Y+13	; 0x0d
     6d0:	fe 84       	ldd	r15, Y+14	; 0x0e
     6d2:	0f 85       	ldd	r16, Y+15	; 0x0f
     6d4:	18 89       	ldd	r17, Y+16	; 0x10
     6d6:	ad 88       	ldd	r10, Y+21	; 0x15
     6d8:	be 88       	ldd	r11, Y+22	; 0x16
     6da:	cf 88       	ldd	r12, Y+23	; 0x17
     6dc:	d8 8c       	ldd	r13, Y+24	; 0x18
     6de:	ea 14       	cp	r14, r10
     6e0:	fb 04       	cpc	r15, r11
     6e2:	0c 05       	cpc	r16, r12
     6e4:	1d 05       	cpc	r17, r13
     6e6:	40 f4       	brcc	.+16     	; 0x6f8 <__divsf3+0xc6>
     6e8:	ee 0c       	add	r14, r14
     6ea:	ff 1c       	adc	r15, r15
     6ec:	00 1f       	adc	r16, r16
     6ee:	11 1f       	adc	r17, r17
     6f0:	21 50       	subi	r18, 0x01	; 1
     6f2:	30 40       	sbci	r19, 0x00	; 0
     6f4:	3c 87       	std	Y+12, r19	; 0x0c
     6f6:	2b 87       	std	Y+11, r18	; 0x0b
     6f8:	20 e0       	ldi	r18, 0x00	; 0
     6fa:	30 e0       	ldi	r19, 0x00	; 0
     6fc:	40 e0       	ldi	r20, 0x00	; 0
     6fe:	50 e0       	ldi	r21, 0x00	; 0
     700:	80 e0       	ldi	r24, 0x00	; 0
     702:	90 e0       	ldi	r25, 0x00	; 0
     704:	a0 e0       	ldi	r26, 0x00	; 0
     706:	b0 e4       	ldi	r27, 0x40	; 64
     708:	60 e0       	ldi	r22, 0x00	; 0
     70a:	70 e0       	ldi	r23, 0x00	; 0
     70c:	ea 14       	cp	r14, r10
     70e:	fb 04       	cpc	r15, r11
     710:	0c 05       	cpc	r16, r12
     712:	1d 05       	cpc	r17, r13
     714:	40 f0       	brcs	.+16     	; 0x726 <__divsf3+0xf4>
     716:	28 2b       	or	r18, r24
     718:	39 2b       	or	r19, r25
     71a:	4a 2b       	or	r20, r26
     71c:	5b 2b       	or	r21, r27
     71e:	ea 18       	sub	r14, r10
     720:	fb 08       	sbc	r15, r11
     722:	0c 09       	sbc	r16, r12
     724:	1d 09       	sbc	r17, r13
     726:	b6 95       	lsr	r27
     728:	a7 95       	ror	r26
     72a:	97 95       	ror	r25
     72c:	87 95       	ror	r24
     72e:	ee 0c       	add	r14, r14
     730:	ff 1c       	adc	r15, r15
     732:	00 1f       	adc	r16, r16
     734:	11 1f       	adc	r17, r17
     736:	6f 5f       	subi	r22, 0xFF	; 255
     738:	7f 4f       	sbci	r23, 0xFF	; 255
     73a:	6f 31       	cpi	r22, 0x1F	; 31
     73c:	71 05       	cpc	r23, r1
     73e:	31 f7       	brne	.-52     	; 0x70c <__divsf3+0xda>
     740:	da 01       	movw	r26, r20
     742:	c9 01       	movw	r24, r18
     744:	8f 77       	andi	r24, 0x7F	; 127
     746:	90 70       	andi	r25, 0x00	; 0
     748:	a0 70       	andi	r26, 0x00	; 0
     74a:	b0 70       	andi	r27, 0x00	; 0
     74c:	80 34       	cpi	r24, 0x40	; 64
     74e:	91 05       	cpc	r25, r1
     750:	a1 05       	cpc	r26, r1
     752:	b1 05       	cpc	r27, r1
     754:	61 f4       	brne	.+24     	; 0x76e <__divsf3+0x13c>
     756:	27 fd       	sbrc	r18, 7
     758:	0a c0       	rjmp	.+20     	; 0x76e <__divsf3+0x13c>
     75a:	e1 14       	cp	r14, r1
     75c:	f1 04       	cpc	r15, r1
     75e:	01 05       	cpc	r16, r1
     760:	11 05       	cpc	r17, r1
     762:	29 f0       	breq	.+10     	; 0x76e <__divsf3+0x13c>
     764:	20 5c       	subi	r18, 0xC0	; 192
     766:	3f 4f       	sbci	r19, 0xFF	; 255
     768:	4f 4f       	sbci	r20, 0xFF	; 255
     76a:	5f 4f       	sbci	r21, 0xFF	; 255
     76c:	20 78       	andi	r18, 0x80	; 128
     76e:	2d 87       	std	Y+13, r18	; 0x0d
     770:	3e 87       	std	Y+14, r19	; 0x0e
     772:	4f 87       	std	Y+15, r20	; 0x0f
     774:	58 8b       	std	Y+16, r21	; 0x10
     776:	be 01       	movw	r22, r28
     778:	67 5f       	subi	r22, 0xF7	; 247
     77a:	7f 4f       	sbci	r23, 0xFF	; 255
     77c:	cb 01       	movw	r24, r22
     77e:	0e 94 a9 04 	call	0x952	; 0x952 <__pack_f>
     782:	68 96       	adiw	r28, 0x18	; 24
     784:	ea e0       	ldi	r30, 0x0A	; 10
     786:	0c 94 1f 19 	jmp	0x323e	; 0x323e <__epilogue_restores__+0x10>

0000078a <__gtsf2>:
     78a:	a8 e1       	ldi	r26, 0x18	; 24
     78c:	b0 e0       	ldi	r27, 0x00	; 0
     78e:	eb ec       	ldi	r30, 0xCB	; 203
     790:	f3 e0       	ldi	r31, 0x03	; 3
     792:	0c 94 07 19 	jmp	0x320e	; 0x320e <__prologue_saves__+0x18>
     796:	69 83       	std	Y+1, r22	; 0x01
     798:	7a 83       	std	Y+2, r23	; 0x02
     79a:	8b 83       	std	Y+3, r24	; 0x03
     79c:	9c 83       	std	Y+4, r25	; 0x04
     79e:	2d 83       	std	Y+5, r18	; 0x05
     7a0:	3e 83       	std	Y+6, r19	; 0x06
     7a2:	4f 83       	std	Y+7, r20	; 0x07
     7a4:	58 87       	std	Y+8, r21	; 0x08
     7a6:	89 e0       	ldi	r24, 0x09	; 9
     7a8:	e8 2e       	mov	r14, r24
     7aa:	f1 2c       	mov	r15, r1
     7ac:	ec 0e       	add	r14, r28
     7ae:	fd 1e       	adc	r15, r29
     7b0:	ce 01       	movw	r24, r28
     7b2:	01 96       	adiw	r24, 0x01	; 1
     7b4:	b7 01       	movw	r22, r14
     7b6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ba:	8e 01       	movw	r16, r28
     7bc:	0f 5e       	subi	r16, 0xEF	; 239
     7be:	1f 4f       	sbci	r17, 0xFF	; 255
     7c0:	ce 01       	movw	r24, r28
     7c2:	05 96       	adiw	r24, 0x05	; 5
     7c4:	b8 01       	movw	r22, r16
     7c6:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     7ca:	89 85       	ldd	r24, Y+9	; 0x09
     7cc:	82 30       	cpi	r24, 0x02	; 2
     7ce:	40 f0       	brcs	.+16     	; 0x7e0 <__gtsf2+0x56>
     7d0:	89 89       	ldd	r24, Y+17	; 0x11
     7d2:	82 30       	cpi	r24, 0x02	; 2
     7d4:	28 f0       	brcs	.+10     	; 0x7e0 <__gtsf2+0x56>
     7d6:	c7 01       	movw	r24, r14
     7d8:	b8 01       	movw	r22, r16
     7da:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     7de:	01 c0       	rjmp	.+2      	; 0x7e2 <__gtsf2+0x58>
     7e0:	8f ef       	ldi	r24, 0xFF	; 255
     7e2:	68 96       	adiw	r28, 0x18	; 24
     7e4:	e6 e0       	ldi	r30, 0x06	; 6
     7e6:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__epilogue_restores__+0x18>

000007ea <__gesf2>:
     7ea:	a8 e1       	ldi	r26, 0x18	; 24
     7ec:	b0 e0       	ldi	r27, 0x00	; 0
     7ee:	eb ef       	ldi	r30, 0xFB	; 251
     7f0:	f3 e0       	ldi	r31, 0x03	; 3
     7f2:	0c 94 07 19 	jmp	0x320e	; 0x320e <__prologue_saves__+0x18>
     7f6:	69 83       	std	Y+1, r22	; 0x01
     7f8:	7a 83       	std	Y+2, r23	; 0x02
     7fa:	8b 83       	std	Y+3, r24	; 0x03
     7fc:	9c 83       	std	Y+4, r25	; 0x04
     7fe:	2d 83       	std	Y+5, r18	; 0x05
     800:	3e 83       	std	Y+6, r19	; 0x06
     802:	4f 83       	std	Y+7, r20	; 0x07
     804:	58 87       	std	Y+8, r21	; 0x08
     806:	89 e0       	ldi	r24, 0x09	; 9
     808:	e8 2e       	mov	r14, r24
     80a:	f1 2c       	mov	r15, r1
     80c:	ec 0e       	add	r14, r28
     80e:	fd 1e       	adc	r15, r29
     810:	ce 01       	movw	r24, r28
     812:	01 96       	adiw	r24, 0x01	; 1
     814:	b7 01       	movw	r22, r14
     816:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     81a:	8e 01       	movw	r16, r28
     81c:	0f 5e       	subi	r16, 0xEF	; 239
     81e:	1f 4f       	sbci	r17, 0xFF	; 255
     820:	ce 01       	movw	r24, r28
     822:	05 96       	adiw	r24, 0x05	; 5
     824:	b8 01       	movw	r22, r16
     826:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     82a:	89 85       	ldd	r24, Y+9	; 0x09
     82c:	82 30       	cpi	r24, 0x02	; 2
     82e:	40 f0       	brcs	.+16     	; 0x840 <__gesf2+0x56>
     830:	89 89       	ldd	r24, Y+17	; 0x11
     832:	82 30       	cpi	r24, 0x02	; 2
     834:	28 f0       	brcs	.+10     	; 0x840 <__gesf2+0x56>
     836:	c7 01       	movw	r24, r14
     838:	b8 01       	movw	r22, r16
     83a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     83e:	01 c0       	rjmp	.+2      	; 0x842 <__gesf2+0x58>
     840:	8f ef       	ldi	r24, 0xFF	; 255
     842:	68 96       	adiw	r28, 0x18	; 24
     844:	e6 e0       	ldi	r30, 0x06	; 6
     846:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__epilogue_restores__+0x18>

0000084a <__ltsf2>:
     84a:	a8 e1       	ldi	r26, 0x18	; 24
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	eb e2       	ldi	r30, 0x2B	; 43
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	0c 94 07 19 	jmp	0x320e	; 0x320e <__prologue_saves__+0x18>
     856:	69 83       	std	Y+1, r22	; 0x01
     858:	7a 83       	std	Y+2, r23	; 0x02
     85a:	8b 83       	std	Y+3, r24	; 0x03
     85c:	9c 83       	std	Y+4, r25	; 0x04
     85e:	2d 83       	std	Y+5, r18	; 0x05
     860:	3e 83       	std	Y+6, r19	; 0x06
     862:	4f 83       	std	Y+7, r20	; 0x07
     864:	58 87       	std	Y+8, r21	; 0x08
     866:	89 e0       	ldi	r24, 0x09	; 9
     868:	e8 2e       	mov	r14, r24
     86a:	f1 2c       	mov	r15, r1
     86c:	ec 0e       	add	r14, r28
     86e:	fd 1e       	adc	r15, r29
     870:	ce 01       	movw	r24, r28
     872:	01 96       	adiw	r24, 0x01	; 1
     874:	b7 01       	movw	r22, r14
     876:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     87a:	8e 01       	movw	r16, r28
     87c:	0f 5e       	subi	r16, 0xEF	; 239
     87e:	1f 4f       	sbci	r17, 0xFF	; 255
     880:	ce 01       	movw	r24, r28
     882:	05 96       	adiw	r24, 0x05	; 5
     884:	b8 01       	movw	r22, r16
     886:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     88a:	89 85       	ldd	r24, Y+9	; 0x09
     88c:	82 30       	cpi	r24, 0x02	; 2
     88e:	40 f0       	brcs	.+16     	; 0x8a0 <__stack+0x41>
     890:	89 89       	ldd	r24, Y+17	; 0x11
     892:	82 30       	cpi	r24, 0x02	; 2
     894:	28 f0       	brcs	.+10     	; 0x8a0 <__stack+0x41>
     896:	c7 01       	movw	r24, r14
     898:	b8 01       	movw	r22, r16
     89a:	0e 94 f6 05 	call	0xbec	; 0xbec <__fpcmp_parts_f>
     89e:	01 c0       	rjmp	.+2      	; 0x8a2 <__stack+0x43>
     8a0:	81 e0       	ldi	r24, 0x01	; 1
     8a2:	68 96       	adiw	r28, 0x18	; 24
     8a4:	e6 e0       	ldi	r30, 0x06	; 6
     8a6:	0c 94 23 19 	jmp	0x3246	; 0x3246 <__epilogue_restores__+0x18>

000008aa <__fixsfsi>:
     8aa:	ac e0       	ldi	r26, 0x0C	; 12
     8ac:	b0 e0       	ldi	r27, 0x00	; 0
     8ae:	eb e5       	ldi	r30, 0x5B	; 91
     8b0:	f4 e0       	ldi	r31, 0x04	; 4
     8b2:	0c 94 0b 19 	jmp	0x3216	; 0x3216 <__prologue_saves__+0x20>
     8b6:	69 83       	std	Y+1, r22	; 0x01
     8b8:	7a 83       	std	Y+2, r23	; 0x02
     8ba:	8b 83       	std	Y+3, r24	; 0x03
     8bc:	9c 83       	std	Y+4, r25	; 0x04
     8be:	ce 01       	movw	r24, r28
     8c0:	01 96       	adiw	r24, 0x01	; 1
     8c2:	be 01       	movw	r22, r28
     8c4:	6b 5f       	subi	r22, 0xFB	; 251
     8c6:	7f 4f       	sbci	r23, 0xFF	; 255
     8c8:	0e 94 7e 05 	call	0xafc	; 0xafc <__unpack_f>
     8cc:	8d 81       	ldd	r24, Y+5	; 0x05
     8ce:	82 30       	cpi	r24, 0x02	; 2
     8d0:	61 f1       	breq	.+88     	; 0x92a <__fixsfsi+0x80>
     8d2:	82 30       	cpi	r24, 0x02	; 2
     8d4:	50 f1       	brcs	.+84     	; 0x92a <__fixsfsi+0x80>
     8d6:	84 30       	cpi	r24, 0x04	; 4
     8d8:	21 f4       	brne	.+8      	; 0x8e2 <__fixsfsi+0x38>
     8da:	8e 81       	ldd	r24, Y+6	; 0x06
     8dc:	88 23       	and	r24, r24
     8de:	51 f1       	breq	.+84     	; 0x934 <__fixsfsi+0x8a>
     8e0:	2e c0       	rjmp	.+92     	; 0x93e <__fixsfsi+0x94>
     8e2:	2f 81       	ldd	r18, Y+7	; 0x07
     8e4:	38 85       	ldd	r19, Y+8	; 0x08
     8e6:	37 fd       	sbrc	r19, 7
     8e8:	20 c0       	rjmp	.+64     	; 0x92a <__fixsfsi+0x80>
     8ea:	6e 81       	ldd	r22, Y+6	; 0x06
     8ec:	2f 31       	cpi	r18, 0x1F	; 31
     8ee:	31 05       	cpc	r19, r1
     8f0:	1c f0       	brlt	.+6      	; 0x8f8 <__fixsfsi+0x4e>
     8f2:	66 23       	and	r22, r22
     8f4:	f9 f0       	breq	.+62     	; 0x934 <__fixsfsi+0x8a>
     8f6:	23 c0       	rjmp	.+70     	; 0x93e <__fixsfsi+0x94>
     8f8:	8e e1       	ldi	r24, 0x1E	; 30
     8fa:	90 e0       	ldi	r25, 0x00	; 0
     8fc:	82 1b       	sub	r24, r18
     8fe:	93 0b       	sbc	r25, r19
     900:	29 85       	ldd	r18, Y+9	; 0x09
     902:	3a 85       	ldd	r19, Y+10	; 0x0a
     904:	4b 85       	ldd	r20, Y+11	; 0x0b
     906:	5c 85       	ldd	r21, Y+12	; 0x0c
     908:	04 c0       	rjmp	.+8      	; 0x912 <__fixsfsi+0x68>
     90a:	56 95       	lsr	r21
     90c:	47 95       	ror	r20
     90e:	37 95       	ror	r19
     910:	27 95       	ror	r18
     912:	8a 95       	dec	r24
     914:	d2 f7       	brpl	.-12     	; 0x90a <__fixsfsi+0x60>
     916:	66 23       	and	r22, r22
     918:	b1 f0       	breq	.+44     	; 0x946 <__fixsfsi+0x9c>
     91a:	50 95       	com	r21
     91c:	40 95       	com	r20
     91e:	30 95       	com	r19
     920:	21 95       	neg	r18
     922:	3f 4f       	sbci	r19, 0xFF	; 255
     924:	4f 4f       	sbci	r20, 0xFF	; 255
     926:	5f 4f       	sbci	r21, 0xFF	; 255
     928:	0e c0       	rjmp	.+28     	; 0x946 <__fixsfsi+0x9c>
     92a:	20 e0       	ldi	r18, 0x00	; 0
     92c:	30 e0       	ldi	r19, 0x00	; 0
     92e:	40 e0       	ldi	r20, 0x00	; 0
     930:	50 e0       	ldi	r21, 0x00	; 0
     932:	09 c0       	rjmp	.+18     	; 0x946 <__fixsfsi+0x9c>
     934:	2f ef       	ldi	r18, 0xFF	; 255
     936:	3f ef       	ldi	r19, 0xFF	; 255
     938:	4f ef       	ldi	r20, 0xFF	; 255
     93a:	5f e7       	ldi	r21, 0x7F	; 127
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__fixsfsi+0x9c>
     93e:	20 e0       	ldi	r18, 0x00	; 0
     940:	30 e0       	ldi	r19, 0x00	; 0
     942:	40 e0       	ldi	r20, 0x00	; 0
     944:	50 e8       	ldi	r21, 0x80	; 128
     946:	b9 01       	movw	r22, r18
     948:	ca 01       	movw	r24, r20
     94a:	2c 96       	adiw	r28, 0x0c	; 12
     94c:	e2 e0       	ldi	r30, 0x02	; 2
     94e:	0c 94 27 19 	jmp	0x324e	; 0x324e <__epilogue_restores__+0x20>

00000952 <__pack_f>:
     952:	df 92       	push	r13
     954:	ef 92       	push	r14
     956:	ff 92       	push	r15
     958:	0f 93       	push	r16
     95a:	1f 93       	push	r17
     95c:	fc 01       	movw	r30, r24
     95e:	e4 80       	ldd	r14, Z+4	; 0x04
     960:	f5 80       	ldd	r15, Z+5	; 0x05
     962:	06 81       	ldd	r16, Z+6	; 0x06
     964:	17 81       	ldd	r17, Z+7	; 0x07
     966:	d1 80       	ldd	r13, Z+1	; 0x01
     968:	80 81       	ld	r24, Z
     96a:	82 30       	cpi	r24, 0x02	; 2
     96c:	48 f4       	brcc	.+18     	; 0x980 <__pack_f+0x2e>
     96e:	80 e0       	ldi	r24, 0x00	; 0
     970:	90 e0       	ldi	r25, 0x00	; 0
     972:	a0 e1       	ldi	r26, 0x10	; 16
     974:	b0 e0       	ldi	r27, 0x00	; 0
     976:	e8 2a       	or	r14, r24
     978:	f9 2a       	or	r15, r25
     97a:	0a 2b       	or	r16, r26
     97c:	1b 2b       	or	r17, r27
     97e:	a5 c0       	rjmp	.+330    	; 0xaca <__pack_f+0x178>
     980:	84 30       	cpi	r24, 0x04	; 4
     982:	09 f4       	brne	.+2      	; 0x986 <__pack_f+0x34>
     984:	9f c0       	rjmp	.+318    	; 0xac4 <__pack_f+0x172>
     986:	82 30       	cpi	r24, 0x02	; 2
     988:	21 f4       	brne	.+8      	; 0x992 <__pack_f+0x40>
     98a:	ee 24       	eor	r14, r14
     98c:	ff 24       	eor	r15, r15
     98e:	87 01       	movw	r16, r14
     990:	05 c0       	rjmp	.+10     	; 0x99c <__pack_f+0x4a>
     992:	e1 14       	cp	r14, r1
     994:	f1 04       	cpc	r15, r1
     996:	01 05       	cpc	r16, r1
     998:	11 05       	cpc	r17, r1
     99a:	19 f4       	brne	.+6      	; 0x9a2 <__pack_f+0x50>
     99c:	e0 e0       	ldi	r30, 0x00	; 0
     99e:	f0 e0       	ldi	r31, 0x00	; 0
     9a0:	96 c0       	rjmp	.+300    	; 0xace <__pack_f+0x17c>
     9a2:	62 81       	ldd	r22, Z+2	; 0x02
     9a4:	73 81       	ldd	r23, Z+3	; 0x03
     9a6:	9f ef       	ldi	r25, 0xFF	; 255
     9a8:	62 38       	cpi	r22, 0x82	; 130
     9aa:	79 07       	cpc	r23, r25
     9ac:	0c f0       	brlt	.+2      	; 0x9b0 <__pack_f+0x5e>
     9ae:	5b c0       	rjmp	.+182    	; 0xa66 <__pack_f+0x114>
     9b0:	22 e8       	ldi	r18, 0x82	; 130
     9b2:	3f ef       	ldi	r19, 0xFF	; 255
     9b4:	26 1b       	sub	r18, r22
     9b6:	37 0b       	sbc	r19, r23
     9b8:	2a 31       	cpi	r18, 0x1A	; 26
     9ba:	31 05       	cpc	r19, r1
     9bc:	2c f0       	brlt	.+10     	; 0x9c8 <__pack_f+0x76>
     9be:	20 e0       	ldi	r18, 0x00	; 0
     9c0:	30 e0       	ldi	r19, 0x00	; 0
     9c2:	40 e0       	ldi	r20, 0x00	; 0
     9c4:	50 e0       	ldi	r21, 0x00	; 0
     9c6:	2a c0       	rjmp	.+84     	; 0xa1c <__pack_f+0xca>
     9c8:	b8 01       	movw	r22, r16
     9ca:	a7 01       	movw	r20, r14
     9cc:	02 2e       	mov	r0, r18
     9ce:	04 c0       	rjmp	.+8      	; 0x9d8 <__pack_f+0x86>
     9d0:	76 95       	lsr	r23
     9d2:	67 95       	ror	r22
     9d4:	57 95       	ror	r21
     9d6:	47 95       	ror	r20
     9d8:	0a 94       	dec	r0
     9da:	d2 f7       	brpl	.-12     	; 0x9d0 <__pack_f+0x7e>
     9dc:	81 e0       	ldi	r24, 0x01	; 1
     9de:	90 e0       	ldi	r25, 0x00	; 0
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	04 c0       	rjmp	.+8      	; 0x9ee <__pack_f+0x9c>
     9e6:	88 0f       	add	r24, r24
     9e8:	99 1f       	adc	r25, r25
     9ea:	aa 1f       	adc	r26, r26
     9ec:	bb 1f       	adc	r27, r27
     9ee:	2a 95       	dec	r18
     9f0:	d2 f7       	brpl	.-12     	; 0x9e6 <__pack_f+0x94>
     9f2:	01 97       	sbiw	r24, 0x01	; 1
     9f4:	a1 09       	sbc	r26, r1
     9f6:	b1 09       	sbc	r27, r1
     9f8:	8e 21       	and	r24, r14
     9fa:	9f 21       	and	r25, r15
     9fc:	a0 23       	and	r26, r16
     9fe:	b1 23       	and	r27, r17
     a00:	00 97       	sbiw	r24, 0x00	; 0
     a02:	a1 05       	cpc	r26, r1
     a04:	b1 05       	cpc	r27, r1
     a06:	21 f0       	breq	.+8      	; 0xa10 <__pack_f+0xbe>
     a08:	81 e0       	ldi	r24, 0x01	; 1
     a0a:	90 e0       	ldi	r25, 0x00	; 0
     a0c:	a0 e0       	ldi	r26, 0x00	; 0
     a0e:	b0 e0       	ldi	r27, 0x00	; 0
     a10:	9a 01       	movw	r18, r20
     a12:	ab 01       	movw	r20, r22
     a14:	28 2b       	or	r18, r24
     a16:	39 2b       	or	r19, r25
     a18:	4a 2b       	or	r20, r26
     a1a:	5b 2b       	or	r21, r27
     a1c:	da 01       	movw	r26, r20
     a1e:	c9 01       	movw	r24, r18
     a20:	8f 77       	andi	r24, 0x7F	; 127
     a22:	90 70       	andi	r25, 0x00	; 0
     a24:	a0 70       	andi	r26, 0x00	; 0
     a26:	b0 70       	andi	r27, 0x00	; 0
     a28:	80 34       	cpi	r24, 0x40	; 64
     a2a:	91 05       	cpc	r25, r1
     a2c:	a1 05       	cpc	r26, r1
     a2e:	b1 05       	cpc	r27, r1
     a30:	39 f4       	brne	.+14     	; 0xa40 <__pack_f+0xee>
     a32:	27 ff       	sbrs	r18, 7
     a34:	09 c0       	rjmp	.+18     	; 0xa48 <__pack_f+0xf6>
     a36:	20 5c       	subi	r18, 0xC0	; 192
     a38:	3f 4f       	sbci	r19, 0xFF	; 255
     a3a:	4f 4f       	sbci	r20, 0xFF	; 255
     a3c:	5f 4f       	sbci	r21, 0xFF	; 255
     a3e:	04 c0       	rjmp	.+8      	; 0xa48 <__pack_f+0xf6>
     a40:	21 5c       	subi	r18, 0xC1	; 193
     a42:	3f 4f       	sbci	r19, 0xFF	; 255
     a44:	4f 4f       	sbci	r20, 0xFF	; 255
     a46:	5f 4f       	sbci	r21, 0xFF	; 255
     a48:	e0 e0       	ldi	r30, 0x00	; 0
     a4a:	f0 e0       	ldi	r31, 0x00	; 0
     a4c:	20 30       	cpi	r18, 0x00	; 0
     a4e:	a0 e0       	ldi	r26, 0x00	; 0
     a50:	3a 07       	cpc	r19, r26
     a52:	a0 e0       	ldi	r26, 0x00	; 0
     a54:	4a 07       	cpc	r20, r26
     a56:	a0 e4       	ldi	r26, 0x40	; 64
     a58:	5a 07       	cpc	r21, r26
     a5a:	10 f0       	brcs	.+4      	; 0xa60 <__pack_f+0x10e>
     a5c:	e1 e0       	ldi	r30, 0x01	; 1
     a5e:	f0 e0       	ldi	r31, 0x00	; 0
     a60:	79 01       	movw	r14, r18
     a62:	8a 01       	movw	r16, r20
     a64:	27 c0       	rjmp	.+78     	; 0xab4 <__pack_f+0x162>
     a66:	60 38       	cpi	r22, 0x80	; 128
     a68:	71 05       	cpc	r23, r1
     a6a:	64 f5       	brge	.+88     	; 0xac4 <__pack_f+0x172>
     a6c:	fb 01       	movw	r30, r22
     a6e:	e1 58       	subi	r30, 0x81	; 129
     a70:	ff 4f       	sbci	r31, 0xFF	; 255
     a72:	d8 01       	movw	r26, r16
     a74:	c7 01       	movw	r24, r14
     a76:	8f 77       	andi	r24, 0x7F	; 127
     a78:	90 70       	andi	r25, 0x00	; 0
     a7a:	a0 70       	andi	r26, 0x00	; 0
     a7c:	b0 70       	andi	r27, 0x00	; 0
     a7e:	80 34       	cpi	r24, 0x40	; 64
     a80:	91 05       	cpc	r25, r1
     a82:	a1 05       	cpc	r26, r1
     a84:	b1 05       	cpc	r27, r1
     a86:	39 f4       	brne	.+14     	; 0xa96 <__pack_f+0x144>
     a88:	e7 fe       	sbrs	r14, 7
     a8a:	0d c0       	rjmp	.+26     	; 0xaa6 <__pack_f+0x154>
     a8c:	80 e4       	ldi	r24, 0x40	; 64
     a8e:	90 e0       	ldi	r25, 0x00	; 0
     a90:	a0 e0       	ldi	r26, 0x00	; 0
     a92:	b0 e0       	ldi	r27, 0x00	; 0
     a94:	04 c0       	rjmp	.+8      	; 0xa9e <__pack_f+0x14c>
     a96:	8f e3       	ldi	r24, 0x3F	; 63
     a98:	90 e0       	ldi	r25, 0x00	; 0
     a9a:	a0 e0       	ldi	r26, 0x00	; 0
     a9c:	b0 e0       	ldi	r27, 0x00	; 0
     a9e:	e8 0e       	add	r14, r24
     aa0:	f9 1e       	adc	r15, r25
     aa2:	0a 1f       	adc	r16, r26
     aa4:	1b 1f       	adc	r17, r27
     aa6:	17 ff       	sbrs	r17, 7
     aa8:	05 c0       	rjmp	.+10     	; 0xab4 <__pack_f+0x162>
     aaa:	16 95       	lsr	r17
     aac:	07 95       	ror	r16
     aae:	f7 94       	ror	r15
     ab0:	e7 94       	ror	r14
     ab2:	31 96       	adiw	r30, 0x01	; 1
     ab4:	87 e0       	ldi	r24, 0x07	; 7
     ab6:	16 95       	lsr	r17
     ab8:	07 95       	ror	r16
     aba:	f7 94       	ror	r15
     abc:	e7 94       	ror	r14
     abe:	8a 95       	dec	r24
     ac0:	d1 f7       	brne	.-12     	; 0xab6 <__pack_f+0x164>
     ac2:	05 c0       	rjmp	.+10     	; 0xace <__pack_f+0x17c>
     ac4:	ee 24       	eor	r14, r14
     ac6:	ff 24       	eor	r15, r15
     ac8:	87 01       	movw	r16, r14
     aca:	ef ef       	ldi	r30, 0xFF	; 255
     acc:	f0 e0       	ldi	r31, 0x00	; 0
     ace:	6e 2f       	mov	r22, r30
     ad0:	67 95       	ror	r22
     ad2:	66 27       	eor	r22, r22
     ad4:	67 95       	ror	r22
     ad6:	90 2f       	mov	r25, r16
     ad8:	9f 77       	andi	r25, 0x7F	; 127
     ada:	d7 94       	ror	r13
     adc:	dd 24       	eor	r13, r13
     ade:	d7 94       	ror	r13
     ae0:	8e 2f       	mov	r24, r30
     ae2:	86 95       	lsr	r24
     ae4:	49 2f       	mov	r20, r25
     ae6:	46 2b       	or	r20, r22
     ae8:	58 2f       	mov	r21, r24
     aea:	5d 29       	or	r21, r13
     aec:	b7 01       	movw	r22, r14
     aee:	ca 01       	movw	r24, r20
     af0:	1f 91       	pop	r17
     af2:	0f 91       	pop	r16
     af4:	ff 90       	pop	r15
     af6:	ef 90       	pop	r14
     af8:	df 90       	pop	r13
     afa:	08 95       	ret

00000afc <__unpack_f>:
     afc:	fc 01       	movw	r30, r24
     afe:	db 01       	movw	r26, r22
     b00:	40 81       	ld	r20, Z
     b02:	51 81       	ldd	r21, Z+1	; 0x01
     b04:	22 81       	ldd	r18, Z+2	; 0x02
     b06:	62 2f       	mov	r22, r18
     b08:	6f 77       	andi	r22, 0x7F	; 127
     b0a:	70 e0       	ldi	r23, 0x00	; 0
     b0c:	22 1f       	adc	r18, r18
     b0e:	22 27       	eor	r18, r18
     b10:	22 1f       	adc	r18, r18
     b12:	93 81       	ldd	r25, Z+3	; 0x03
     b14:	89 2f       	mov	r24, r25
     b16:	88 0f       	add	r24, r24
     b18:	82 2b       	or	r24, r18
     b1a:	28 2f       	mov	r18, r24
     b1c:	30 e0       	ldi	r19, 0x00	; 0
     b1e:	99 1f       	adc	r25, r25
     b20:	99 27       	eor	r25, r25
     b22:	99 1f       	adc	r25, r25
     b24:	11 96       	adiw	r26, 0x01	; 1
     b26:	9c 93       	st	X, r25
     b28:	11 97       	sbiw	r26, 0x01	; 1
     b2a:	21 15       	cp	r18, r1
     b2c:	31 05       	cpc	r19, r1
     b2e:	a9 f5       	brne	.+106    	; 0xb9a <__unpack_f+0x9e>
     b30:	41 15       	cp	r20, r1
     b32:	51 05       	cpc	r21, r1
     b34:	61 05       	cpc	r22, r1
     b36:	71 05       	cpc	r23, r1
     b38:	11 f4       	brne	.+4      	; 0xb3e <__unpack_f+0x42>
     b3a:	82 e0       	ldi	r24, 0x02	; 2
     b3c:	37 c0       	rjmp	.+110    	; 0xbac <__unpack_f+0xb0>
     b3e:	82 e8       	ldi	r24, 0x82	; 130
     b40:	9f ef       	ldi	r25, 0xFF	; 255
     b42:	13 96       	adiw	r26, 0x03	; 3
     b44:	9c 93       	st	X, r25
     b46:	8e 93       	st	-X, r24
     b48:	12 97       	sbiw	r26, 0x02	; 2
     b4a:	9a 01       	movw	r18, r20
     b4c:	ab 01       	movw	r20, r22
     b4e:	67 e0       	ldi	r22, 0x07	; 7
     b50:	22 0f       	add	r18, r18
     b52:	33 1f       	adc	r19, r19
     b54:	44 1f       	adc	r20, r20
     b56:	55 1f       	adc	r21, r21
     b58:	6a 95       	dec	r22
     b5a:	d1 f7       	brne	.-12     	; 0xb50 <__unpack_f+0x54>
     b5c:	83 e0       	ldi	r24, 0x03	; 3
     b5e:	8c 93       	st	X, r24
     b60:	0d c0       	rjmp	.+26     	; 0xb7c <__unpack_f+0x80>
     b62:	22 0f       	add	r18, r18
     b64:	33 1f       	adc	r19, r19
     b66:	44 1f       	adc	r20, r20
     b68:	55 1f       	adc	r21, r21
     b6a:	12 96       	adiw	r26, 0x02	; 2
     b6c:	8d 91       	ld	r24, X+
     b6e:	9c 91       	ld	r25, X
     b70:	13 97       	sbiw	r26, 0x03	; 3
     b72:	01 97       	sbiw	r24, 0x01	; 1
     b74:	13 96       	adiw	r26, 0x03	; 3
     b76:	9c 93       	st	X, r25
     b78:	8e 93       	st	-X, r24
     b7a:	12 97       	sbiw	r26, 0x02	; 2
     b7c:	20 30       	cpi	r18, 0x00	; 0
     b7e:	80 e0       	ldi	r24, 0x00	; 0
     b80:	38 07       	cpc	r19, r24
     b82:	80 e0       	ldi	r24, 0x00	; 0
     b84:	48 07       	cpc	r20, r24
     b86:	80 e4       	ldi	r24, 0x40	; 64
     b88:	58 07       	cpc	r21, r24
     b8a:	58 f3       	brcs	.-42     	; 0xb62 <__unpack_f+0x66>
     b8c:	14 96       	adiw	r26, 0x04	; 4
     b8e:	2d 93       	st	X+, r18
     b90:	3d 93       	st	X+, r19
     b92:	4d 93       	st	X+, r20
     b94:	5c 93       	st	X, r21
     b96:	17 97       	sbiw	r26, 0x07	; 7
     b98:	08 95       	ret
     b9a:	2f 3f       	cpi	r18, 0xFF	; 255
     b9c:	31 05       	cpc	r19, r1
     b9e:	79 f4       	brne	.+30     	; 0xbbe <__unpack_f+0xc2>
     ba0:	41 15       	cp	r20, r1
     ba2:	51 05       	cpc	r21, r1
     ba4:	61 05       	cpc	r22, r1
     ba6:	71 05       	cpc	r23, r1
     ba8:	19 f4       	brne	.+6      	; 0xbb0 <__unpack_f+0xb4>
     baa:	84 e0       	ldi	r24, 0x04	; 4
     bac:	8c 93       	st	X, r24
     bae:	08 95       	ret
     bb0:	64 ff       	sbrs	r22, 4
     bb2:	03 c0       	rjmp	.+6      	; 0xbba <__unpack_f+0xbe>
     bb4:	81 e0       	ldi	r24, 0x01	; 1
     bb6:	8c 93       	st	X, r24
     bb8:	12 c0       	rjmp	.+36     	; 0xbde <__unpack_f+0xe2>
     bba:	1c 92       	st	X, r1
     bbc:	10 c0       	rjmp	.+32     	; 0xbde <__unpack_f+0xe2>
     bbe:	2f 57       	subi	r18, 0x7F	; 127
     bc0:	30 40       	sbci	r19, 0x00	; 0
     bc2:	13 96       	adiw	r26, 0x03	; 3
     bc4:	3c 93       	st	X, r19
     bc6:	2e 93       	st	-X, r18
     bc8:	12 97       	sbiw	r26, 0x02	; 2
     bca:	83 e0       	ldi	r24, 0x03	; 3
     bcc:	8c 93       	st	X, r24
     bce:	87 e0       	ldi	r24, 0x07	; 7
     bd0:	44 0f       	add	r20, r20
     bd2:	55 1f       	adc	r21, r21
     bd4:	66 1f       	adc	r22, r22
     bd6:	77 1f       	adc	r23, r23
     bd8:	8a 95       	dec	r24
     bda:	d1 f7       	brne	.-12     	; 0xbd0 <__unpack_f+0xd4>
     bdc:	70 64       	ori	r23, 0x40	; 64
     bde:	14 96       	adiw	r26, 0x04	; 4
     be0:	4d 93       	st	X+, r20
     be2:	5d 93       	st	X+, r21
     be4:	6d 93       	st	X+, r22
     be6:	7c 93       	st	X, r23
     be8:	17 97       	sbiw	r26, 0x07	; 7
     bea:	08 95       	ret

00000bec <__fpcmp_parts_f>:
     bec:	1f 93       	push	r17
     bee:	dc 01       	movw	r26, r24
     bf0:	fb 01       	movw	r30, r22
     bf2:	9c 91       	ld	r25, X
     bf4:	92 30       	cpi	r25, 0x02	; 2
     bf6:	08 f4       	brcc	.+2      	; 0xbfa <__fpcmp_parts_f+0xe>
     bf8:	47 c0       	rjmp	.+142    	; 0xc88 <__fpcmp_parts_f+0x9c>
     bfa:	80 81       	ld	r24, Z
     bfc:	82 30       	cpi	r24, 0x02	; 2
     bfe:	08 f4       	brcc	.+2      	; 0xc02 <__fpcmp_parts_f+0x16>
     c00:	43 c0       	rjmp	.+134    	; 0xc88 <__fpcmp_parts_f+0x9c>
     c02:	94 30       	cpi	r25, 0x04	; 4
     c04:	51 f4       	brne	.+20     	; 0xc1a <__fpcmp_parts_f+0x2e>
     c06:	11 96       	adiw	r26, 0x01	; 1
     c08:	1c 91       	ld	r17, X
     c0a:	84 30       	cpi	r24, 0x04	; 4
     c0c:	99 f5       	brne	.+102    	; 0xc74 <__fpcmp_parts_f+0x88>
     c0e:	81 81       	ldd	r24, Z+1	; 0x01
     c10:	68 2f       	mov	r22, r24
     c12:	70 e0       	ldi	r23, 0x00	; 0
     c14:	61 1b       	sub	r22, r17
     c16:	71 09       	sbc	r23, r1
     c18:	3f c0       	rjmp	.+126    	; 0xc98 <__fpcmp_parts_f+0xac>
     c1a:	84 30       	cpi	r24, 0x04	; 4
     c1c:	21 f0       	breq	.+8      	; 0xc26 <__fpcmp_parts_f+0x3a>
     c1e:	92 30       	cpi	r25, 0x02	; 2
     c20:	31 f4       	brne	.+12     	; 0xc2e <__fpcmp_parts_f+0x42>
     c22:	82 30       	cpi	r24, 0x02	; 2
     c24:	b9 f1       	breq	.+110    	; 0xc94 <__fpcmp_parts_f+0xa8>
     c26:	81 81       	ldd	r24, Z+1	; 0x01
     c28:	88 23       	and	r24, r24
     c2a:	89 f1       	breq	.+98     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c2c:	2d c0       	rjmp	.+90     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c2e:	11 96       	adiw	r26, 0x01	; 1
     c30:	1c 91       	ld	r17, X
     c32:	11 97       	sbiw	r26, 0x01	; 1
     c34:	82 30       	cpi	r24, 0x02	; 2
     c36:	f1 f0       	breq	.+60     	; 0xc74 <__fpcmp_parts_f+0x88>
     c38:	81 81       	ldd	r24, Z+1	; 0x01
     c3a:	18 17       	cp	r17, r24
     c3c:	d9 f4       	brne	.+54     	; 0xc74 <__fpcmp_parts_f+0x88>
     c3e:	12 96       	adiw	r26, 0x02	; 2
     c40:	2d 91       	ld	r18, X+
     c42:	3c 91       	ld	r19, X
     c44:	13 97       	sbiw	r26, 0x03	; 3
     c46:	82 81       	ldd	r24, Z+2	; 0x02
     c48:	93 81       	ldd	r25, Z+3	; 0x03
     c4a:	82 17       	cp	r24, r18
     c4c:	93 07       	cpc	r25, r19
     c4e:	94 f0       	brlt	.+36     	; 0xc74 <__fpcmp_parts_f+0x88>
     c50:	28 17       	cp	r18, r24
     c52:	39 07       	cpc	r19, r25
     c54:	bc f0       	brlt	.+46     	; 0xc84 <__fpcmp_parts_f+0x98>
     c56:	14 96       	adiw	r26, 0x04	; 4
     c58:	8d 91       	ld	r24, X+
     c5a:	9d 91       	ld	r25, X+
     c5c:	0d 90       	ld	r0, X+
     c5e:	bc 91       	ld	r27, X
     c60:	a0 2d       	mov	r26, r0
     c62:	24 81       	ldd	r18, Z+4	; 0x04
     c64:	35 81       	ldd	r19, Z+5	; 0x05
     c66:	46 81       	ldd	r20, Z+6	; 0x06
     c68:	57 81       	ldd	r21, Z+7	; 0x07
     c6a:	28 17       	cp	r18, r24
     c6c:	39 07       	cpc	r19, r25
     c6e:	4a 07       	cpc	r20, r26
     c70:	5b 07       	cpc	r21, r27
     c72:	18 f4       	brcc	.+6      	; 0xc7a <__fpcmp_parts_f+0x8e>
     c74:	11 23       	and	r17, r17
     c76:	41 f0       	breq	.+16     	; 0xc88 <__fpcmp_parts_f+0x9c>
     c78:	0a c0       	rjmp	.+20     	; 0xc8e <__fpcmp_parts_f+0xa2>
     c7a:	82 17       	cp	r24, r18
     c7c:	93 07       	cpc	r25, r19
     c7e:	a4 07       	cpc	r26, r20
     c80:	b5 07       	cpc	r27, r21
     c82:	40 f4       	brcc	.+16     	; 0xc94 <__fpcmp_parts_f+0xa8>
     c84:	11 23       	and	r17, r17
     c86:	19 f0       	breq	.+6      	; 0xc8e <__fpcmp_parts_f+0xa2>
     c88:	61 e0       	ldi	r22, 0x01	; 1
     c8a:	70 e0       	ldi	r23, 0x00	; 0
     c8c:	05 c0       	rjmp	.+10     	; 0xc98 <__fpcmp_parts_f+0xac>
     c8e:	6f ef       	ldi	r22, 0xFF	; 255
     c90:	7f ef       	ldi	r23, 0xFF	; 255
     c92:	02 c0       	rjmp	.+4      	; 0xc98 <__fpcmp_parts_f+0xac>
     c94:	60 e0       	ldi	r22, 0x00	; 0
     c96:	70 e0       	ldi	r23, 0x00	; 0
     c98:	cb 01       	movw	r24, r22
     c9a:	1f 91       	pop	r17
     c9c:	08 95       	ret

00000c9e <DIO_VidSetPinValue>:
#include "DIO_interface.h"

/*------------------------------------Pins functions------------------------------------------------*/

void DIO_VidSetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Value) //Setting pin value to High or Low
{
     c9e:	df 93       	push	r29
     ca0:	cf 93       	push	r28
     ca2:	cd b7       	in	r28, 0x3d	; 61
     ca4:	de b7       	in	r29, 0x3e	; 62
     ca6:	27 97       	sbiw	r28, 0x07	; 7
     ca8:	0f b6       	in	r0, 0x3f	; 63
     caa:	f8 94       	cli
     cac:	de bf       	out	0x3e, r29	; 62
     cae:	0f be       	out	0x3f, r0	; 63
     cb0:	cd bf       	out	0x3d, r28	; 61
     cb2:	89 83       	std	Y+1, r24	; 0x01
     cb4:	6a 83       	std	Y+2, r22	; 0x02
     cb6:	4b 83       	std	Y+3, r20	; 0x03
    if (Copy_u8Value == high)
     cb8:	8b 81       	ldd	r24, Y+3	; 0x03
     cba:	81 30       	cpi	r24, 0x01	; 1
     cbc:	09 f0       	breq	.+2      	; 0xcc0 <DIO_VidSetPinValue+0x22>
     cbe:	70 c0       	rjmp	.+224    	; 0xda0 <DIO_VidSetPinValue+0x102>
    {
        switch (Copy_u8Port)
     cc0:	89 81       	ldd	r24, Y+1	; 0x01
     cc2:	28 2f       	mov	r18, r24
     cc4:	30 e0       	ldi	r19, 0x00	; 0
     cc6:	3f 83       	std	Y+7, r19	; 0x07
     cc8:	2e 83       	std	Y+6, r18	; 0x06
     cca:	8e 81       	ldd	r24, Y+6	; 0x06
     ccc:	9f 81       	ldd	r25, Y+7	; 0x07
     cce:	82 30       	cpi	r24, 0x02	; 2
     cd0:	91 05       	cpc	r25, r1
     cd2:	51 f1       	breq	.+84     	; 0xd28 <DIO_VidSetPinValue+0x8a>
     cd4:	2e 81       	ldd	r18, Y+6	; 0x06
     cd6:	3f 81       	ldd	r19, Y+7	; 0x07
     cd8:	23 30       	cpi	r18, 0x03	; 3
     cda:	31 05       	cpc	r19, r1
     cdc:	34 f4       	brge	.+12     	; 0xcea <DIO_VidSetPinValue+0x4c>
     cde:	8e 81       	ldd	r24, Y+6	; 0x06
     ce0:	9f 81       	ldd	r25, Y+7	; 0x07
     ce2:	81 30       	cpi	r24, 0x01	; 1
     ce4:	91 05       	cpc	r25, r1
     ce6:	61 f0       	breq	.+24     	; 0xd00 <DIO_VidSetPinValue+0x62>
     ce8:	d3 c0       	rjmp	.+422    	; 0xe90 <DIO_VidSetPinValue+0x1f2>
     cea:	2e 81       	ldd	r18, Y+6	; 0x06
     cec:	3f 81       	ldd	r19, Y+7	; 0x07
     cee:	23 30       	cpi	r18, 0x03	; 3
     cf0:	31 05       	cpc	r19, r1
     cf2:	71 f1       	breq	.+92     	; 0xd50 <DIO_VidSetPinValue+0xb2>
     cf4:	8e 81       	ldd	r24, Y+6	; 0x06
     cf6:	9f 81       	ldd	r25, Y+7	; 0x07
     cf8:	84 30       	cpi	r24, 0x04	; 4
     cfa:	91 05       	cpc	r25, r1
     cfc:	e9 f1       	breq	.+122    	; 0xd78 <DIO_VidSetPinValue+0xda>
     cfe:	c8 c0       	rjmp	.+400    	; 0xe90 <DIO_VidSetPinValue+0x1f2>
        {

        case (Port_A):
            SET_BIT(PORTA, Copy_u8Pin);
     d00:	ab e3       	ldi	r26, 0x3B	; 59
     d02:	b0 e0       	ldi	r27, 0x00	; 0
     d04:	eb e3       	ldi	r30, 0x3B	; 59
     d06:	f0 e0       	ldi	r31, 0x00	; 0
     d08:	80 81       	ld	r24, Z
     d0a:	48 2f       	mov	r20, r24
     d0c:	8a 81       	ldd	r24, Y+2	; 0x02
     d0e:	28 2f       	mov	r18, r24
     d10:	30 e0       	ldi	r19, 0x00	; 0
     d12:	81 e0       	ldi	r24, 0x01	; 1
     d14:	90 e0       	ldi	r25, 0x00	; 0
     d16:	02 2e       	mov	r0, r18
     d18:	02 c0       	rjmp	.+4      	; 0xd1e <DIO_VidSetPinValue+0x80>
     d1a:	88 0f       	add	r24, r24
     d1c:	99 1f       	adc	r25, r25
     d1e:	0a 94       	dec	r0
     d20:	e2 f7       	brpl	.-8      	; 0xd1a <DIO_VidSetPinValue+0x7c>
     d22:	84 2b       	or	r24, r20
     d24:	8c 93       	st	X, r24
     d26:	b4 c0       	rjmp	.+360    	; 0xe90 <DIO_VidSetPinValue+0x1f2>
            break;
        case (Port_B):
            SET_BIT(PORTB, Copy_u8Pin);
     d28:	a8 e3       	ldi	r26, 0x38	; 56
     d2a:	b0 e0       	ldi	r27, 0x00	; 0
     d2c:	e8 e3       	ldi	r30, 0x38	; 56
     d2e:	f0 e0       	ldi	r31, 0x00	; 0
     d30:	80 81       	ld	r24, Z
     d32:	48 2f       	mov	r20, r24
     d34:	8a 81       	ldd	r24, Y+2	; 0x02
     d36:	28 2f       	mov	r18, r24
     d38:	30 e0       	ldi	r19, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 2e       	mov	r0, r18
     d40:	02 c0       	rjmp	.+4      	; 0xd46 <DIO_VidSetPinValue+0xa8>
     d42:	88 0f       	add	r24, r24
     d44:	99 1f       	adc	r25, r25
     d46:	0a 94       	dec	r0
     d48:	e2 f7       	brpl	.-8      	; 0xd42 <DIO_VidSetPinValue+0xa4>
     d4a:	84 2b       	or	r24, r20
     d4c:	8c 93       	st	X, r24
     d4e:	a0 c0       	rjmp	.+320    	; 0xe90 <DIO_VidSetPinValue+0x1f2>
            break;
        case (Port_C):
            SET_BIT(PORTC, Copy_u8Pin);
     d50:	a5 e3       	ldi	r26, 0x35	; 53
     d52:	b0 e0       	ldi	r27, 0x00	; 0
     d54:	e5 e3       	ldi	r30, 0x35	; 53
     d56:	f0 e0       	ldi	r31, 0x00	; 0
     d58:	80 81       	ld	r24, Z
     d5a:	48 2f       	mov	r20, r24
     d5c:	8a 81       	ldd	r24, Y+2	; 0x02
     d5e:	28 2f       	mov	r18, r24
     d60:	30 e0       	ldi	r19, 0x00	; 0
     d62:	81 e0       	ldi	r24, 0x01	; 1
     d64:	90 e0       	ldi	r25, 0x00	; 0
     d66:	02 2e       	mov	r0, r18
     d68:	02 c0       	rjmp	.+4      	; 0xd6e <DIO_VidSetPinValue+0xd0>
     d6a:	88 0f       	add	r24, r24
     d6c:	99 1f       	adc	r25, r25
     d6e:	0a 94       	dec	r0
     d70:	e2 f7       	brpl	.-8      	; 0xd6a <DIO_VidSetPinValue+0xcc>
     d72:	84 2b       	or	r24, r20
     d74:	8c 93       	st	X, r24
     d76:	8c c0       	rjmp	.+280    	; 0xe90 <DIO_VidSetPinValue+0x1f2>
            break;
        case (Port_D):
            SET_BIT(PORTD, Copy_u8Pin);
     d78:	a2 e3       	ldi	r26, 0x32	; 50
     d7a:	b0 e0       	ldi	r27, 0x00	; 0
     d7c:	e2 e3       	ldi	r30, 0x32	; 50
     d7e:	f0 e0       	ldi	r31, 0x00	; 0
     d80:	80 81       	ld	r24, Z
     d82:	48 2f       	mov	r20, r24
     d84:	8a 81       	ldd	r24, Y+2	; 0x02
     d86:	28 2f       	mov	r18, r24
     d88:	30 e0       	ldi	r19, 0x00	; 0
     d8a:	81 e0       	ldi	r24, 0x01	; 1
     d8c:	90 e0       	ldi	r25, 0x00	; 0
     d8e:	02 2e       	mov	r0, r18
     d90:	02 c0       	rjmp	.+4      	; 0xd96 <DIO_VidSetPinValue+0xf8>
     d92:	88 0f       	add	r24, r24
     d94:	99 1f       	adc	r25, r25
     d96:	0a 94       	dec	r0
     d98:	e2 f7       	brpl	.-8      	; 0xd92 <DIO_VidSetPinValue+0xf4>
     d9a:	84 2b       	or	r24, r20
     d9c:	8c 93       	st	X, r24
     d9e:	78 c0       	rjmp	.+240    	; 0xe90 <DIO_VidSetPinValue+0x1f2>
            break;
        }
    }

    else if (Copy_u8Value == low)
     da0:	8b 81       	ldd	r24, Y+3	; 0x03
     da2:	88 23       	and	r24, r24
     da4:	09 f0       	breq	.+2      	; 0xda8 <DIO_VidSetPinValue+0x10a>
     da6:	74 c0       	rjmp	.+232    	; 0xe90 <DIO_VidSetPinValue+0x1f2>
    {
        switch (Copy_u8Port)
     da8:	89 81       	ldd	r24, Y+1	; 0x01
     daa:	28 2f       	mov	r18, r24
     dac:	30 e0       	ldi	r19, 0x00	; 0
     dae:	3d 83       	std	Y+5, r19	; 0x05
     db0:	2c 83       	std	Y+4, r18	; 0x04
     db2:	8c 81       	ldd	r24, Y+4	; 0x04
     db4:	9d 81       	ldd	r25, Y+5	; 0x05
     db6:	82 30       	cpi	r24, 0x02	; 2
     db8:	91 05       	cpc	r25, r1
     dba:	61 f1       	breq	.+88     	; 0xe14 <DIO_VidSetPinValue+0x176>
     dbc:	2c 81       	ldd	r18, Y+4	; 0x04
     dbe:	3d 81       	ldd	r19, Y+5	; 0x05
     dc0:	23 30       	cpi	r18, 0x03	; 3
     dc2:	31 05       	cpc	r19, r1
     dc4:	34 f4       	brge	.+12     	; 0xdd2 <DIO_VidSetPinValue+0x134>
     dc6:	8c 81       	ldd	r24, Y+4	; 0x04
     dc8:	9d 81       	ldd	r25, Y+5	; 0x05
     dca:	81 30       	cpi	r24, 0x01	; 1
     dcc:	91 05       	cpc	r25, r1
     dce:	69 f0       	breq	.+26     	; 0xdea <DIO_VidSetPinValue+0x14c>
     dd0:	5f c0       	rjmp	.+190    	; 0xe90 <DIO_VidSetPinValue+0x1f2>
     dd2:	2c 81       	ldd	r18, Y+4	; 0x04
     dd4:	3d 81       	ldd	r19, Y+5	; 0x05
     dd6:	23 30       	cpi	r18, 0x03	; 3
     dd8:	31 05       	cpc	r19, r1
     dda:	89 f1       	breq	.+98     	; 0xe3e <DIO_VidSetPinValue+0x1a0>
     ddc:	8c 81       	ldd	r24, Y+4	; 0x04
     dde:	9d 81       	ldd	r25, Y+5	; 0x05
     de0:	84 30       	cpi	r24, 0x04	; 4
     de2:	91 05       	cpc	r25, r1
     de4:	09 f4       	brne	.+2      	; 0xde8 <DIO_VidSetPinValue+0x14a>
     de6:	40 c0       	rjmp	.+128    	; 0xe68 <DIO_VidSetPinValue+0x1ca>
     de8:	53 c0       	rjmp	.+166    	; 0xe90 <DIO_VidSetPinValue+0x1f2>
        {

        case (Port_A):
            CLR_BIT(PORTA, Copy_u8Pin);
     dea:	ab e3       	ldi	r26, 0x3B	; 59
     dec:	b0 e0       	ldi	r27, 0x00	; 0
     dee:	eb e3       	ldi	r30, 0x3B	; 59
     df0:	f0 e0       	ldi	r31, 0x00	; 0
     df2:	80 81       	ld	r24, Z
     df4:	48 2f       	mov	r20, r24
     df6:	8a 81       	ldd	r24, Y+2	; 0x02
     df8:	28 2f       	mov	r18, r24
     dfa:	30 e0       	ldi	r19, 0x00	; 0
     dfc:	81 e0       	ldi	r24, 0x01	; 1
     dfe:	90 e0       	ldi	r25, 0x00	; 0
     e00:	02 2e       	mov	r0, r18
     e02:	02 c0       	rjmp	.+4      	; 0xe08 <DIO_VidSetPinValue+0x16a>
     e04:	88 0f       	add	r24, r24
     e06:	99 1f       	adc	r25, r25
     e08:	0a 94       	dec	r0
     e0a:	e2 f7       	brpl	.-8      	; 0xe04 <DIO_VidSetPinValue+0x166>
     e0c:	80 95       	com	r24
     e0e:	84 23       	and	r24, r20
     e10:	8c 93       	st	X, r24
     e12:	3e c0       	rjmp	.+124    	; 0xe90 <DIO_VidSetPinValue+0x1f2>
            break;
        case (Port_B):
            CLR_BIT(PORTB, Copy_u8Pin);
     e14:	a8 e3       	ldi	r26, 0x38	; 56
     e16:	b0 e0       	ldi	r27, 0x00	; 0
     e18:	e8 e3       	ldi	r30, 0x38	; 56
     e1a:	f0 e0       	ldi	r31, 0x00	; 0
     e1c:	80 81       	ld	r24, Z
     e1e:	48 2f       	mov	r20, r24
     e20:	8a 81       	ldd	r24, Y+2	; 0x02
     e22:	28 2f       	mov	r18, r24
     e24:	30 e0       	ldi	r19, 0x00	; 0
     e26:	81 e0       	ldi	r24, 0x01	; 1
     e28:	90 e0       	ldi	r25, 0x00	; 0
     e2a:	02 2e       	mov	r0, r18
     e2c:	02 c0       	rjmp	.+4      	; 0xe32 <DIO_VidSetPinValue+0x194>
     e2e:	88 0f       	add	r24, r24
     e30:	99 1f       	adc	r25, r25
     e32:	0a 94       	dec	r0
     e34:	e2 f7       	brpl	.-8      	; 0xe2e <DIO_VidSetPinValue+0x190>
     e36:	80 95       	com	r24
     e38:	84 23       	and	r24, r20
     e3a:	8c 93       	st	X, r24
     e3c:	29 c0       	rjmp	.+82     	; 0xe90 <DIO_VidSetPinValue+0x1f2>
            break;
        case (Port_C):
            CLR_BIT(PORTC, Copy_u8Pin);
     e3e:	a5 e3       	ldi	r26, 0x35	; 53
     e40:	b0 e0       	ldi	r27, 0x00	; 0
     e42:	e5 e3       	ldi	r30, 0x35	; 53
     e44:	f0 e0       	ldi	r31, 0x00	; 0
     e46:	80 81       	ld	r24, Z
     e48:	48 2f       	mov	r20, r24
     e4a:	8a 81       	ldd	r24, Y+2	; 0x02
     e4c:	28 2f       	mov	r18, r24
     e4e:	30 e0       	ldi	r19, 0x00	; 0
     e50:	81 e0       	ldi	r24, 0x01	; 1
     e52:	90 e0       	ldi	r25, 0x00	; 0
     e54:	02 2e       	mov	r0, r18
     e56:	02 c0       	rjmp	.+4      	; 0xe5c <DIO_VidSetPinValue+0x1be>
     e58:	88 0f       	add	r24, r24
     e5a:	99 1f       	adc	r25, r25
     e5c:	0a 94       	dec	r0
     e5e:	e2 f7       	brpl	.-8      	; 0xe58 <DIO_VidSetPinValue+0x1ba>
     e60:	80 95       	com	r24
     e62:	84 23       	and	r24, r20
     e64:	8c 93       	st	X, r24
     e66:	14 c0       	rjmp	.+40     	; 0xe90 <DIO_VidSetPinValue+0x1f2>
            break;
        case (Port_D):
            CLR_BIT(PORTD, Copy_u8Pin);
     e68:	a2 e3       	ldi	r26, 0x32	; 50
     e6a:	b0 e0       	ldi	r27, 0x00	; 0
     e6c:	e2 e3       	ldi	r30, 0x32	; 50
     e6e:	f0 e0       	ldi	r31, 0x00	; 0
     e70:	80 81       	ld	r24, Z
     e72:	48 2f       	mov	r20, r24
     e74:	8a 81       	ldd	r24, Y+2	; 0x02
     e76:	28 2f       	mov	r18, r24
     e78:	30 e0       	ldi	r19, 0x00	; 0
     e7a:	81 e0       	ldi	r24, 0x01	; 1
     e7c:	90 e0       	ldi	r25, 0x00	; 0
     e7e:	02 2e       	mov	r0, r18
     e80:	02 c0       	rjmp	.+4      	; 0xe86 <DIO_VidSetPinValue+0x1e8>
     e82:	88 0f       	add	r24, r24
     e84:	99 1f       	adc	r25, r25
     e86:	0a 94       	dec	r0
     e88:	e2 f7       	brpl	.-8      	; 0xe82 <DIO_VidSetPinValue+0x1e4>
     e8a:	80 95       	com	r24
     e8c:	84 23       	and	r24, r20
     e8e:	8c 93       	st	X, r24
            break;
        }
    }
}
     e90:	27 96       	adiw	r28, 0x07	; 7
     e92:	0f b6       	in	r0, 0x3f	; 63
     e94:	f8 94       	cli
     e96:	de bf       	out	0x3e, r29	; 62
     e98:	0f be       	out	0x3f, r0	; 63
     e9a:	cd bf       	out	0x3d, r28	; 61
     e9c:	cf 91       	pop	r28
     e9e:	df 91       	pop	r29
     ea0:	08 95       	ret

00000ea2 <DIO_VidSetPinMode>:

void DIO_VidSetPinMode(u8 Copy_u8Port, u8 Copy_u8Pin, u8 Copy_u8Mode) //Setting pin mode to Input or Output
{
     ea2:	df 93       	push	r29
     ea4:	cf 93       	push	r28
     ea6:	cd b7       	in	r28, 0x3d	; 61
     ea8:	de b7       	in	r29, 0x3e	; 62
     eaa:	27 97       	sbiw	r28, 0x07	; 7
     eac:	0f b6       	in	r0, 0x3f	; 63
     eae:	f8 94       	cli
     eb0:	de bf       	out	0x3e, r29	; 62
     eb2:	0f be       	out	0x3f, r0	; 63
     eb4:	cd bf       	out	0x3d, r28	; 61
     eb6:	89 83       	std	Y+1, r24	; 0x01
     eb8:	6a 83       	std	Y+2, r22	; 0x02
     eba:	4b 83       	std	Y+3, r20	; 0x03
    //Check for input mode 0 for input
    if (Copy_u8Mode == input)
     ebc:	8b 81       	ldd	r24, Y+3	; 0x03
     ebe:	88 23       	and	r24, r24
     ec0:	09 f0       	breq	.+2      	; 0xec4 <DIO_VidSetPinMode+0x22>
     ec2:	75 c0       	rjmp	.+234    	; 0xfae <DIO_VidSetPinMode+0x10c>
    {
        //Set pin as input
        switch (Copy_u8Port)
     ec4:	89 81       	ldd	r24, Y+1	; 0x01
     ec6:	28 2f       	mov	r18, r24
     ec8:	30 e0       	ldi	r19, 0x00	; 0
     eca:	3f 83       	std	Y+7, r19	; 0x07
     ecc:	2e 83       	std	Y+6, r18	; 0x06
     ece:	8e 81       	ldd	r24, Y+6	; 0x06
     ed0:	9f 81       	ldd	r25, Y+7	; 0x07
     ed2:	82 30       	cpi	r24, 0x02	; 2
     ed4:	91 05       	cpc	r25, r1
     ed6:	61 f1       	breq	.+88     	; 0xf30 <DIO_VidSetPinMode+0x8e>
     ed8:	2e 81       	ldd	r18, Y+6	; 0x06
     eda:	3f 81       	ldd	r19, Y+7	; 0x07
     edc:	23 30       	cpi	r18, 0x03	; 3
     ede:	31 05       	cpc	r19, r1
     ee0:	34 f4       	brge	.+12     	; 0xeee <DIO_VidSetPinMode+0x4c>
     ee2:	8e 81       	ldd	r24, Y+6	; 0x06
     ee4:	9f 81       	ldd	r25, Y+7	; 0x07
     ee6:	81 30       	cpi	r24, 0x01	; 1
     ee8:	91 05       	cpc	r25, r1
     eea:	69 f0       	breq	.+26     	; 0xf06 <DIO_VidSetPinMode+0x64>
     eec:	d3 c0       	rjmp	.+422    	; 0x1094 <DIO_VidSetPinMode+0x1f2>
     eee:	2e 81       	ldd	r18, Y+6	; 0x06
     ef0:	3f 81       	ldd	r19, Y+7	; 0x07
     ef2:	23 30       	cpi	r18, 0x03	; 3
     ef4:	31 05       	cpc	r19, r1
     ef6:	89 f1       	breq	.+98     	; 0xf5a <DIO_VidSetPinMode+0xb8>
     ef8:	8e 81       	ldd	r24, Y+6	; 0x06
     efa:	9f 81       	ldd	r25, Y+7	; 0x07
     efc:	84 30       	cpi	r24, 0x04	; 4
     efe:	91 05       	cpc	r25, r1
     f00:	09 f4       	brne	.+2      	; 0xf04 <DIO_VidSetPinMode+0x62>
     f02:	40 c0       	rjmp	.+128    	; 0xf84 <DIO_VidSetPinMode+0xe2>
     f04:	c7 c0       	rjmp	.+398    	; 0x1094 <DIO_VidSetPinMode+0x1f2>
        {

        case (Port_A):
            CLR_BIT(DDRA, Copy_u8Pin);
     f06:	aa e3       	ldi	r26, 0x3A	; 58
     f08:	b0 e0       	ldi	r27, 0x00	; 0
     f0a:	ea e3       	ldi	r30, 0x3A	; 58
     f0c:	f0 e0       	ldi	r31, 0x00	; 0
     f0e:	80 81       	ld	r24, Z
     f10:	48 2f       	mov	r20, r24
     f12:	8a 81       	ldd	r24, Y+2	; 0x02
     f14:	28 2f       	mov	r18, r24
     f16:	30 e0       	ldi	r19, 0x00	; 0
     f18:	81 e0       	ldi	r24, 0x01	; 1
     f1a:	90 e0       	ldi	r25, 0x00	; 0
     f1c:	02 2e       	mov	r0, r18
     f1e:	02 c0       	rjmp	.+4      	; 0xf24 <DIO_VidSetPinMode+0x82>
     f20:	88 0f       	add	r24, r24
     f22:	99 1f       	adc	r25, r25
     f24:	0a 94       	dec	r0
     f26:	e2 f7       	brpl	.-8      	; 0xf20 <DIO_VidSetPinMode+0x7e>
     f28:	80 95       	com	r24
     f2a:	84 23       	and	r24, r20
     f2c:	8c 93       	st	X, r24
     f2e:	b2 c0       	rjmp	.+356    	; 0x1094 <DIO_VidSetPinMode+0x1f2>
            break;
        case (Port_B):
            CLR_BIT(DDRB, Copy_u8Pin);
     f30:	a7 e3       	ldi	r26, 0x37	; 55
     f32:	b0 e0       	ldi	r27, 0x00	; 0
     f34:	e7 e3       	ldi	r30, 0x37	; 55
     f36:	f0 e0       	ldi	r31, 0x00	; 0
     f38:	80 81       	ld	r24, Z
     f3a:	48 2f       	mov	r20, r24
     f3c:	8a 81       	ldd	r24, Y+2	; 0x02
     f3e:	28 2f       	mov	r18, r24
     f40:	30 e0       	ldi	r19, 0x00	; 0
     f42:	81 e0       	ldi	r24, 0x01	; 1
     f44:	90 e0       	ldi	r25, 0x00	; 0
     f46:	02 2e       	mov	r0, r18
     f48:	02 c0       	rjmp	.+4      	; 0xf4e <DIO_VidSetPinMode+0xac>
     f4a:	88 0f       	add	r24, r24
     f4c:	99 1f       	adc	r25, r25
     f4e:	0a 94       	dec	r0
     f50:	e2 f7       	brpl	.-8      	; 0xf4a <DIO_VidSetPinMode+0xa8>
     f52:	80 95       	com	r24
     f54:	84 23       	and	r24, r20
     f56:	8c 93       	st	X, r24
     f58:	9d c0       	rjmp	.+314    	; 0x1094 <DIO_VidSetPinMode+0x1f2>
            break;
        case (Port_C):
            CLR_BIT(DDRC, Copy_u8Pin);
     f5a:	a4 e3       	ldi	r26, 0x34	; 52
     f5c:	b0 e0       	ldi	r27, 0x00	; 0
     f5e:	e4 e3       	ldi	r30, 0x34	; 52
     f60:	f0 e0       	ldi	r31, 0x00	; 0
     f62:	80 81       	ld	r24, Z
     f64:	48 2f       	mov	r20, r24
     f66:	8a 81       	ldd	r24, Y+2	; 0x02
     f68:	28 2f       	mov	r18, r24
     f6a:	30 e0       	ldi	r19, 0x00	; 0
     f6c:	81 e0       	ldi	r24, 0x01	; 1
     f6e:	90 e0       	ldi	r25, 0x00	; 0
     f70:	02 2e       	mov	r0, r18
     f72:	02 c0       	rjmp	.+4      	; 0xf78 <DIO_VidSetPinMode+0xd6>
     f74:	88 0f       	add	r24, r24
     f76:	99 1f       	adc	r25, r25
     f78:	0a 94       	dec	r0
     f7a:	e2 f7       	brpl	.-8      	; 0xf74 <DIO_VidSetPinMode+0xd2>
     f7c:	80 95       	com	r24
     f7e:	84 23       	and	r24, r20
     f80:	8c 93       	st	X, r24
     f82:	88 c0       	rjmp	.+272    	; 0x1094 <DIO_VidSetPinMode+0x1f2>
            break;
        case (Port_D):
            CLR_BIT(DDRD, Copy_u8Pin);
     f84:	a1 e3       	ldi	r26, 0x31	; 49
     f86:	b0 e0       	ldi	r27, 0x00	; 0
     f88:	e1 e3       	ldi	r30, 0x31	; 49
     f8a:	f0 e0       	ldi	r31, 0x00	; 0
     f8c:	80 81       	ld	r24, Z
     f8e:	48 2f       	mov	r20, r24
     f90:	8a 81       	ldd	r24, Y+2	; 0x02
     f92:	28 2f       	mov	r18, r24
     f94:	30 e0       	ldi	r19, 0x00	; 0
     f96:	81 e0       	ldi	r24, 0x01	; 1
     f98:	90 e0       	ldi	r25, 0x00	; 0
     f9a:	02 2e       	mov	r0, r18
     f9c:	02 c0       	rjmp	.+4      	; 0xfa2 <DIO_VidSetPinMode+0x100>
     f9e:	88 0f       	add	r24, r24
     fa0:	99 1f       	adc	r25, r25
     fa2:	0a 94       	dec	r0
     fa4:	e2 f7       	brpl	.-8      	; 0xf9e <DIO_VidSetPinMode+0xfc>
     fa6:	80 95       	com	r24
     fa8:	84 23       	and	r24, r20
     faa:	8c 93       	st	X, r24
     fac:	73 c0       	rjmp	.+230    	; 0x1094 <DIO_VidSetPinMode+0x1f2>
            break;
        }
    }
    //check for mode 1 for output */

    else if (Copy_u8Mode == output)
     fae:	8b 81       	ldd	r24, Y+3	; 0x03
     fb0:	81 30       	cpi	r24, 0x01	; 1
     fb2:	09 f0       	breq	.+2      	; 0xfb6 <DIO_VidSetPinMode+0x114>
     fb4:	6f c0       	rjmp	.+222    	; 0x1094 <DIO_VidSetPinMode+0x1f2>
    {

        switch (Copy_u8Port)
     fb6:	89 81       	ldd	r24, Y+1	; 0x01
     fb8:	28 2f       	mov	r18, r24
     fba:	30 e0       	ldi	r19, 0x00	; 0
     fbc:	3d 83       	std	Y+5, r19	; 0x05
     fbe:	2c 83       	std	Y+4, r18	; 0x04
     fc0:	8c 81       	ldd	r24, Y+4	; 0x04
     fc2:	9d 81       	ldd	r25, Y+5	; 0x05
     fc4:	82 30       	cpi	r24, 0x02	; 2
     fc6:	91 05       	cpc	r25, r1
     fc8:	51 f1       	breq	.+84     	; 0x101e <DIO_VidSetPinMode+0x17c>
     fca:	2c 81       	ldd	r18, Y+4	; 0x04
     fcc:	3d 81       	ldd	r19, Y+5	; 0x05
     fce:	23 30       	cpi	r18, 0x03	; 3
     fd0:	31 05       	cpc	r19, r1
     fd2:	34 f4       	brge	.+12     	; 0xfe0 <DIO_VidSetPinMode+0x13e>
     fd4:	8c 81       	ldd	r24, Y+4	; 0x04
     fd6:	9d 81       	ldd	r25, Y+5	; 0x05
     fd8:	81 30       	cpi	r24, 0x01	; 1
     fda:	91 05       	cpc	r25, r1
     fdc:	61 f0       	breq	.+24     	; 0xff6 <DIO_VidSetPinMode+0x154>
     fde:	5a c0       	rjmp	.+180    	; 0x1094 <DIO_VidSetPinMode+0x1f2>
     fe0:	2c 81       	ldd	r18, Y+4	; 0x04
     fe2:	3d 81       	ldd	r19, Y+5	; 0x05
     fe4:	23 30       	cpi	r18, 0x03	; 3
     fe6:	31 05       	cpc	r19, r1
     fe8:	71 f1       	breq	.+92     	; 0x1046 <DIO_VidSetPinMode+0x1a4>
     fea:	8c 81       	ldd	r24, Y+4	; 0x04
     fec:	9d 81       	ldd	r25, Y+5	; 0x05
     fee:	84 30       	cpi	r24, 0x04	; 4
     ff0:	91 05       	cpc	r25, r1
     ff2:	e9 f1       	breq	.+122    	; 0x106e <DIO_VidSetPinMode+0x1cc>
     ff4:	4f c0       	rjmp	.+158    	; 0x1094 <DIO_VidSetPinMode+0x1f2>
        {
            //Set pin as output
        case (Port_A):
            SET_BIT(DDRA, Copy_u8Pin);
     ff6:	aa e3       	ldi	r26, 0x3A	; 58
     ff8:	b0 e0       	ldi	r27, 0x00	; 0
     ffa:	ea e3       	ldi	r30, 0x3A	; 58
     ffc:	f0 e0       	ldi	r31, 0x00	; 0
     ffe:	80 81       	ld	r24, Z
    1000:	48 2f       	mov	r20, r24
    1002:	8a 81       	ldd	r24, Y+2	; 0x02
    1004:	28 2f       	mov	r18, r24
    1006:	30 e0       	ldi	r19, 0x00	; 0
    1008:	81 e0       	ldi	r24, 0x01	; 1
    100a:	90 e0       	ldi	r25, 0x00	; 0
    100c:	02 2e       	mov	r0, r18
    100e:	02 c0       	rjmp	.+4      	; 0x1014 <DIO_VidSetPinMode+0x172>
    1010:	88 0f       	add	r24, r24
    1012:	99 1f       	adc	r25, r25
    1014:	0a 94       	dec	r0
    1016:	e2 f7       	brpl	.-8      	; 0x1010 <DIO_VidSetPinMode+0x16e>
    1018:	84 2b       	or	r24, r20
    101a:	8c 93       	st	X, r24
    101c:	3b c0       	rjmp	.+118    	; 0x1094 <DIO_VidSetPinMode+0x1f2>
            break;
        case (Port_B):
            SET_BIT(DDRB, Copy_u8Pin);
    101e:	a7 e3       	ldi	r26, 0x37	; 55
    1020:	b0 e0       	ldi	r27, 0x00	; 0
    1022:	e7 e3       	ldi	r30, 0x37	; 55
    1024:	f0 e0       	ldi	r31, 0x00	; 0
    1026:	80 81       	ld	r24, Z
    1028:	48 2f       	mov	r20, r24
    102a:	8a 81       	ldd	r24, Y+2	; 0x02
    102c:	28 2f       	mov	r18, r24
    102e:	30 e0       	ldi	r19, 0x00	; 0
    1030:	81 e0       	ldi	r24, 0x01	; 1
    1032:	90 e0       	ldi	r25, 0x00	; 0
    1034:	02 2e       	mov	r0, r18
    1036:	02 c0       	rjmp	.+4      	; 0x103c <DIO_VidSetPinMode+0x19a>
    1038:	88 0f       	add	r24, r24
    103a:	99 1f       	adc	r25, r25
    103c:	0a 94       	dec	r0
    103e:	e2 f7       	brpl	.-8      	; 0x1038 <DIO_VidSetPinMode+0x196>
    1040:	84 2b       	or	r24, r20
    1042:	8c 93       	st	X, r24
    1044:	27 c0       	rjmp	.+78     	; 0x1094 <DIO_VidSetPinMode+0x1f2>
            break;
        case (Port_C):
            SET_BIT(DDRC, Copy_u8Pin);
    1046:	a4 e3       	ldi	r26, 0x34	; 52
    1048:	b0 e0       	ldi	r27, 0x00	; 0
    104a:	e4 e3       	ldi	r30, 0x34	; 52
    104c:	f0 e0       	ldi	r31, 0x00	; 0
    104e:	80 81       	ld	r24, Z
    1050:	48 2f       	mov	r20, r24
    1052:	8a 81       	ldd	r24, Y+2	; 0x02
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	81 e0       	ldi	r24, 0x01	; 1
    105a:	90 e0       	ldi	r25, 0x00	; 0
    105c:	02 2e       	mov	r0, r18
    105e:	02 c0       	rjmp	.+4      	; 0x1064 <DIO_VidSetPinMode+0x1c2>
    1060:	88 0f       	add	r24, r24
    1062:	99 1f       	adc	r25, r25
    1064:	0a 94       	dec	r0
    1066:	e2 f7       	brpl	.-8      	; 0x1060 <DIO_VidSetPinMode+0x1be>
    1068:	84 2b       	or	r24, r20
    106a:	8c 93       	st	X, r24
    106c:	13 c0       	rjmp	.+38     	; 0x1094 <DIO_VidSetPinMode+0x1f2>
            break;
        case (Port_D):
            SET_BIT(DDRD, Copy_u8Pin);
    106e:	a1 e3       	ldi	r26, 0x31	; 49
    1070:	b0 e0       	ldi	r27, 0x00	; 0
    1072:	e1 e3       	ldi	r30, 0x31	; 49
    1074:	f0 e0       	ldi	r31, 0x00	; 0
    1076:	80 81       	ld	r24, Z
    1078:	48 2f       	mov	r20, r24
    107a:	8a 81       	ldd	r24, Y+2	; 0x02
    107c:	28 2f       	mov	r18, r24
    107e:	30 e0       	ldi	r19, 0x00	; 0
    1080:	81 e0       	ldi	r24, 0x01	; 1
    1082:	90 e0       	ldi	r25, 0x00	; 0
    1084:	02 2e       	mov	r0, r18
    1086:	02 c0       	rjmp	.+4      	; 0x108c <DIO_VidSetPinMode+0x1ea>
    1088:	88 0f       	add	r24, r24
    108a:	99 1f       	adc	r25, r25
    108c:	0a 94       	dec	r0
    108e:	e2 f7       	brpl	.-8      	; 0x1088 <DIO_VidSetPinMode+0x1e6>
    1090:	84 2b       	or	r24, r20
    1092:	8c 93       	st	X, r24
            break;
        }
    }
}
    1094:	27 96       	adiw	r28, 0x07	; 7
    1096:	0f b6       	in	r0, 0x3f	; 63
    1098:	f8 94       	cli
    109a:	de bf       	out	0x3e, r29	; 62
    109c:	0f be       	out	0x3f, r0	; 63
    109e:	cd bf       	out	0x3d, r28	; 61
    10a0:	cf 91       	pop	r28
    10a2:	df 91       	pop	r29
    10a4:	08 95       	ret

000010a6 <DIO_VidGetPinValue>:

void DIO_VidGetPinValue(u8 Copy_u8Port, u8 Copy_u8Pin, u8 *Copy_Pu8PinValue) //Getting current pin value
{
    10a6:	df 93       	push	r29
    10a8:	cf 93       	push	r28
    10aa:	00 d0       	rcall	.+0      	; 0x10ac <DIO_VidGetPinValue+0x6>
    10ac:	00 d0       	rcall	.+0      	; 0x10ae <DIO_VidGetPinValue+0x8>
    10ae:	00 d0       	rcall	.+0      	; 0x10b0 <DIO_VidGetPinValue+0xa>
    10b0:	cd b7       	in	r28, 0x3d	; 61
    10b2:	de b7       	in	r29, 0x3e	; 62
    10b4:	89 83       	std	Y+1, r24	; 0x01
    10b6:	6a 83       	std	Y+2, r22	; 0x02
    10b8:	5c 83       	std	Y+4, r21	; 0x04
    10ba:	4b 83       	std	Y+3, r20	; 0x03

    switch (Copy_u8Port)
    10bc:	89 81       	ldd	r24, Y+1	; 0x01
    10be:	28 2f       	mov	r18, r24
    10c0:	30 e0       	ldi	r19, 0x00	; 0
    10c2:	3e 83       	std	Y+6, r19	; 0x06
    10c4:	2d 83       	std	Y+5, r18	; 0x05
    10c6:	4d 81       	ldd	r20, Y+5	; 0x05
    10c8:	5e 81       	ldd	r21, Y+6	; 0x06
    10ca:	42 30       	cpi	r20, 0x02	; 2
    10cc:	51 05       	cpc	r21, r1
    10ce:	59 f1       	breq	.+86     	; 0x1126 <DIO_VidGetPinValue+0x80>
    10d0:	8d 81       	ldd	r24, Y+5	; 0x05
    10d2:	9e 81       	ldd	r25, Y+6	; 0x06
    10d4:	83 30       	cpi	r24, 0x03	; 3
    10d6:	91 05       	cpc	r25, r1
    10d8:	34 f4       	brge	.+12     	; 0x10e6 <DIO_VidGetPinValue+0x40>
    10da:	2d 81       	ldd	r18, Y+5	; 0x05
    10dc:	3e 81       	ldd	r19, Y+6	; 0x06
    10de:	21 30       	cpi	r18, 0x01	; 1
    10e0:	31 05       	cpc	r19, r1
    10e2:	69 f0       	breq	.+26     	; 0x10fe <DIO_VidGetPinValue+0x58>
    10e4:	5b c0       	rjmp	.+182    	; 0x119c <DIO_VidGetPinValue+0xf6>
    10e6:	4d 81       	ldd	r20, Y+5	; 0x05
    10e8:	5e 81       	ldd	r21, Y+6	; 0x06
    10ea:	43 30       	cpi	r20, 0x03	; 3
    10ec:	51 05       	cpc	r21, r1
    10ee:	79 f1       	breq	.+94     	; 0x114e <DIO_VidGetPinValue+0xa8>
    10f0:	8d 81       	ldd	r24, Y+5	; 0x05
    10f2:	9e 81       	ldd	r25, Y+6	; 0x06
    10f4:	84 30       	cpi	r24, 0x04	; 4
    10f6:	91 05       	cpc	r25, r1
    10f8:	09 f4       	brne	.+2      	; 0x10fc <DIO_VidGetPinValue+0x56>
    10fa:	3d c0       	rjmp	.+122    	; 0x1176 <DIO_VidGetPinValue+0xd0>
    10fc:	4f c0       	rjmp	.+158    	; 0x119c <DIO_VidGetPinValue+0xf6>
    {
        //Set pin as output
    case (Port_A):
        *Copy_Pu8PinValue = GET_BIT(PINA, Copy_u8Pin);
    10fe:	e9 e3       	ldi	r30, 0x39	; 57
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	80 81       	ld	r24, Z
    1104:	28 2f       	mov	r18, r24
    1106:	30 e0       	ldi	r19, 0x00	; 0
    1108:	8a 81       	ldd	r24, Y+2	; 0x02
    110a:	88 2f       	mov	r24, r24
    110c:	90 e0       	ldi	r25, 0x00	; 0
    110e:	a9 01       	movw	r20, r18
    1110:	02 c0       	rjmp	.+4      	; 0x1116 <DIO_VidGetPinValue+0x70>
    1112:	55 95       	asr	r21
    1114:	47 95       	ror	r20
    1116:	8a 95       	dec	r24
    1118:	e2 f7       	brpl	.-8      	; 0x1112 <DIO_VidGetPinValue+0x6c>
    111a:	ca 01       	movw	r24, r20
    111c:	81 70       	andi	r24, 0x01	; 1
    111e:	eb 81       	ldd	r30, Y+3	; 0x03
    1120:	fc 81       	ldd	r31, Y+4	; 0x04
    1122:	80 83       	st	Z, r24
    1124:	3b c0       	rjmp	.+118    	; 0x119c <DIO_VidGetPinValue+0xf6>
        break;
    case (Port_B):
        *Copy_Pu8PinValue = GET_BIT(PINB, Copy_u8Pin);
    1126:	e6 e3       	ldi	r30, 0x36	; 54
    1128:	f0 e0       	ldi	r31, 0x00	; 0
    112a:	80 81       	ld	r24, Z
    112c:	28 2f       	mov	r18, r24
    112e:	30 e0       	ldi	r19, 0x00	; 0
    1130:	8a 81       	ldd	r24, Y+2	; 0x02
    1132:	88 2f       	mov	r24, r24
    1134:	90 e0       	ldi	r25, 0x00	; 0
    1136:	a9 01       	movw	r20, r18
    1138:	02 c0       	rjmp	.+4      	; 0x113e <DIO_VidGetPinValue+0x98>
    113a:	55 95       	asr	r21
    113c:	47 95       	ror	r20
    113e:	8a 95       	dec	r24
    1140:	e2 f7       	brpl	.-8      	; 0x113a <DIO_VidGetPinValue+0x94>
    1142:	ca 01       	movw	r24, r20
    1144:	81 70       	andi	r24, 0x01	; 1
    1146:	eb 81       	ldd	r30, Y+3	; 0x03
    1148:	fc 81       	ldd	r31, Y+4	; 0x04
    114a:	80 83       	st	Z, r24
    114c:	27 c0       	rjmp	.+78     	; 0x119c <DIO_VidGetPinValue+0xf6>
        break;
    case (Port_C):
        *Copy_Pu8PinValue = GET_BIT(PINC, Copy_u8Pin);
    114e:	e3 e3       	ldi	r30, 0x33	; 51
    1150:	f0 e0       	ldi	r31, 0x00	; 0
    1152:	80 81       	ld	r24, Z
    1154:	28 2f       	mov	r18, r24
    1156:	30 e0       	ldi	r19, 0x00	; 0
    1158:	8a 81       	ldd	r24, Y+2	; 0x02
    115a:	88 2f       	mov	r24, r24
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	a9 01       	movw	r20, r18
    1160:	02 c0       	rjmp	.+4      	; 0x1166 <DIO_VidGetPinValue+0xc0>
    1162:	55 95       	asr	r21
    1164:	47 95       	ror	r20
    1166:	8a 95       	dec	r24
    1168:	e2 f7       	brpl	.-8      	; 0x1162 <DIO_VidGetPinValue+0xbc>
    116a:	ca 01       	movw	r24, r20
    116c:	81 70       	andi	r24, 0x01	; 1
    116e:	eb 81       	ldd	r30, Y+3	; 0x03
    1170:	fc 81       	ldd	r31, Y+4	; 0x04
    1172:	80 83       	st	Z, r24
    1174:	13 c0       	rjmp	.+38     	; 0x119c <DIO_VidGetPinValue+0xf6>
        break;
    case (Port_D):
        *Copy_Pu8PinValue = GET_BIT(PIND, Copy_u8Pin);
    1176:	e0 e3       	ldi	r30, 0x30	; 48
    1178:	f0 e0       	ldi	r31, 0x00	; 0
    117a:	80 81       	ld	r24, Z
    117c:	28 2f       	mov	r18, r24
    117e:	30 e0       	ldi	r19, 0x00	; 0
    1180:	8a 81       	ldd	r24, Y+2	; 0x02
    1182:	88 2f       	mov	r24, r24
    1184:	90 e0       	ldi	r25, 0x00	; 0
    1186:	a9 01       	movw	r20, r18
    1188:	02 c0       	rjmp	.+4      	; 0x118e <DIO_VidGetPinValue+0xe8>
    118a:	55 95       	asr	r21
    118c:	47 95       	ror	r20
    118e:	8a 95       	dec	r24
    1190:	e2 f7       	brpl	.-8      	; 0x118a <DIO_VidGetPinValue+0xe4>
    1192:	ca 01       	movw	r24, r20
    1194:	81 70       	andi	r24, 0x01	; 1
    1196:	eb 81       	ldd	r30, Y+3	; 0x03
    1198:	fc 81       	ldd	r31, Y+4	; 0x04
    119a:	80 83       	st	Z, r24
        break;
    }
}
    119c:	26 96       	adiw	r28, 0x06	; 6
    119e:	0f b6       	in	r0, 0x3f	; 63
    11a0:	f8 94       	cli
    11a2:	de bf       	out	0x3e, r29	; 62
    11a4:	0f be       	out	0x3f, r0	; 63
    11a6:	cd bf       	out	0x3d, r28	; 61
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <DIO_VidSetPortValue>:

/*------------------------------------Ports functions------------------------------------------------*/

void DIO_VidSetPortValue(u8 Copy_u8Port, u8 Copy_u8Value) //Setting all pins values on port to High or Low  
{
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <DIO_VidSetPortValue+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <DIO_VidSetPortValue+0x8>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	89 83       	std	Y+1, r24	; 0x01
    11bc:	6a 83       	std	Y+2, r22	; 0x02

    switch (Copy_u8Port)
    11be:	89 81       	ldd	r24, Y+1	; 0x01
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3c 83       	std	Y+4, r19	; 0x04
    11c6:	2b 83       	std	Y+3, r18	; 0x03
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	82 30       	cpi	r24, 0x02	; 2
    11ce:	91 05       	cpc	r25, r1
    11d0:	d9 f0       	breq	.+54     	; 0x1208 <DIO_VidSetPortValue+0x5a>
    11d2:	2b 81       	ldd	r18, Y+3	; 0x03
    11d4:	3c 81       	ldd	r19, Y+4	; 0x04
    11d6:	23 30       	cpi	r18, 0x03	; 3
    11d8:	31 05       	cpc	r19, r1
    11da:	34 f4       	brge	.+12     	; 0x11e8 <DIO_VidSetPortValue+0x3a>
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	81 30       	cpi	r24, 0x01	; 1
    11e2:	91 05       	cpc	r25, r1
    11e4:	61 f0       	breq	.+24     	; 0x11fe <DIO_VidSetPortValue+0x50>
    11e6:	1e c0       	rjmp	.+60     	; 0x1224 <DIO_VidSetPortValue+0x76>
    11e8:	2b 81       	ldd	r18, Y+3	; 0x03
    11ea:	3c 81       	ldd	r19, Y+4	; 0x04
    11ec:	23 30       	cpi	r18, 0x03	; 3
    11ee:	31 05       	cpc	r19, r1
    11f0:	81 f0       	breq	.+32     	; 0x1212 <DIO_VidSetPortValue+0x64>
    11f2:	8b 81       	ldd	r24, Y+3	; 0x03
    11f4:	9c 81       	ldd	r25, Y+4	; 0x04
    11f6:	84 30       	cpi	r24, 0x04	; 4
    11f8:	91 05       	cpc	r25, r1
    11fa:	81 f0       	breq	.+32     	; 0x121c <DIO_VidSetPortValue+0x6e>
    11fc:	13 c0       	rjmp	.+38     	; 0x1224 <DIO_VidSetPortValue+0x76>
    {
        //Set pin as output
    case (Port_A):
        PORTA = Copy_u8Value;
    11fe:	eb e3       	ldi	r30, 0x3B	; 59
    1200:	f0 e0       	ldi	r31, 0x00	; 0
    1202:	8a 81       	ldd	r24, Y+2	; 0x02
    1204:	80 83       	st	Z, r24
    1206:	0e c0       	rjmp	.+28     	; 0x1224 <DIO_VidSetPortValue+0x76>
        break;
    case (Port_B):
        PORTB = Copy_u8Value;
    1208:	e8 e3       	ldi	r30, 0x38	; 56
    120a:	f0 e0       	ldi	r31, 0x00	; 0
    120c:	8a 81       	ldd	r24, Y+2	; 0x02
    120e:	80 83       	st	Z, r24
    1210:	09 c0       	rjmp	.+18     	; 0x1224 <DIO_VidSetPortValue+0x76>
        break;
    case (Port_C):
        PORTC = Copy_u8Value;
    1212:	e5 e3       	ldi	r30, 0x35	; 53
    1214:	f0 e0       	ldi	r31, 0x00	; 0
    1216:	8a 81       	ldd	r24, Y+2	; 0x02
    1218:	80 83       	st	Z, r24
    121a:	04 c0       	rjmp	.+8      	; 0x1224 <DIO_VidSetPortValue+0x76>
        break;
    case (Port_D):
        PORTD = Copy_u8Value;
    121c:	e2 e3       	ldi	r30, 0x32	; 50
    121e:	f0 e0       	ldi	r31, 0x00	; 0
    1220:	8a 81       	ldd	r24, Y+2	; 0x02
    1222:	80 83       	st	Z, r24
        break;
    }
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <DIO_VidSetPortMode>:

void DIO_VidSetPortMode(u8 Copy_u8Port, u8 Copy_u8Mode) //Setting all pins modes on port to Input or Output
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	00 d0       	rcall	.+0      	; 0x1238 <DIO_VidSetPortMode+0x6>
    1238:	00 d0       	rcall	.+0      	; 0x123a <DIO_VidSetPortMode+0x8>
    123a:	cd b7       	in	r28, 0x3d	; 61
    123c:	de b7       	in	r29, 0x3e	; 62
    123e:	89 83       	std	Y+1, r24	; 0x01
    1240:	6a 83       	std	Y+2, r22	; 0x02

    switch (Copy_u8Port)
    1242:	89 81       	ldd	r24, Y+1	; 0x01
    1244:	28 2f       	mov	r18, r24
    1246:	30 e0       	ldi	r19, 0x00	; 0
    1248:	3c 83       	std	Y+4, r19	; 0x04
    124a:	2b 83       	std	Y+3, r18	; 0x03
    124c:	8b 81       	ldd	r24, Y+3	; 0x03
    124e:	9c 81       	ldd	r25, Y+4	; 0x04
    1250:	82 30       	cpi	r24, 0x02	; 2
    1252:	91 05       	cpc	r25, r1
    1254:	d9 f0       	breq	.+54     	; 0x128c <DIO_VidSetPortMode+0x5a>
    1256:	2b 81       	ldd	r18, Y+3	; 0x03
    1258:	3c 81       	ldd	r19, Y+4	; 0x04
    125a:	23 30       	cpi	r18, 0x03	; 3
    125c:	31 05       	cpc	r19, r1
    125e:	34 f4       	brge	.+12     	; 0x126c <DIO_VidSetPortMode+0x3a>
    1260:	8b 81       	ldd	r24, Y+3	; 0x03
    1262:	9c 81       	ldd	r25, Y+4	; 0x04
    1264:	81 30       	cpi	r24, 0x01	; 1
    1266:	91 05       	cpc	r25, r1
    1268:	61 f0       	breq	.+24     	; 0x1282 <DIO_VidSetPortMode+0x50>
    126a:	1e c0       	rjmp	.+60     	; 0x12a8 <DIO_VidSetPortMode+0x76>
    126c:	2b 81       	ldd	r18, Y+3	; 0x03
    126e:	3c 81       	ldd	r19, Y+4	; 0x04
    1270:	23 30       	cpi	r18, 0x03	; 3
    1272:	31 05       	cpc	r19, r1
    1274:	81 f0       	breq	.+32     	; 0x1296 <DIO_VidSetPortMode+0x64>
    1276:	8b 81       	ldd	r24, Y+3	; 0x03
    1278:	9c 81       	ldd	r25, Y+4	; 0x04
    127a:	84 30       	cpi	r24, 0x04	; 4
    127c:	91 05       	cpc	r25, r1
    127e:	81 f0       	breq	.+32     	; 0x12a0 <DIO_VidSetPortMode+0x6e>
    1280:	13 c0       	rjmp	.+38     	; 0x12a8 <DIO_VidSetPortMode+0x76>
    {
        /*Set pin as output */
    case (Port_A):
        DDRA = Copy_u8Mode;
    1282:	ea e3       	ldi	r30, 0x3A	; 58
    1284:	f0 e0       	ldi	r31, 0x00	; 0
    1286:	8a 81       	ldd	r24, Y+2	; 0x02
    1288:	80 83       	st	Z, r24
    128a:	0e c0       	rjmp	.+28     	; 0x12a8 <DIO_VidSetPortMode+0x76>
        break;
    case (Port_B):
        DDRB = Copy_u8Mode;
    128c:	e7 e3       	ldi	r30, 0x37	; 55
    128e:	f0 e0       	ldi	r31, 0x00	; 0
    1290:	8a 81       	ldd	r24, Y+2	; 0x02
    1292:	80 83       	st	Z, r24
    1294:	09 c0       	rjmp	.+18     	; 0x12a8 <DIO_VidSetPortMode+0x76>
        break;
    case (Port_C):
        DDRC = Copy_u8Mode;
    1296:	e4 e3       	ldi	r30, 0x34	; 52
    1298:	f0 e0       	ldi	r31, 0x00	; 0
    129a:	8a 81       	ldd	r24, Y+2	; 0x02
    129c:	80 83       	st	Z, r24
    129e:	04 c0       	rjmp	.+8      	; 0x12a8 <DIO_VidSetPortMode+0x76>
        break;
    case (Port_D):
        DDRD = Copy_u8Mode;
    12a0:	e1 e3       	ldi	r30, 0x31	; 49
    12a2:	f0 e0       	ldi	r31, 0x00	; 0
    12a4:	8a 81       	ldd	r24, Y+2	; 0x02
    12a6:	80 83       	st	Z, r24
        break;
    }
}
    12a8:	0f 90       	pop	r0
    12aa:	0f 90       	pop	r0
    12ac:	0f 90       	pop	r0
    12ae:	0f 90       	pop	r0
    12b0:	cf 91       	pop	r28
    12b2:	df 91       	pop	r29
    12b4:	08 95       	ret

000012b6 <DIO_VidGetPortValue>:

void DIO_VidGetPortValue(u8 Copy_u8Port, u8 *Copy_Pu8PortValue) //Getting current pins values on port
{
    12b6:	df 93       	push	r29
    12b8:	cf 93       	push	r28
    12ba:	00 d0       	rcall	.+0      	; 0x12bc <DIO_VidGetPortValue+0x6>
    12bc:	00 d0       	rcall	.+0      	; 0x12be <DIO_VidGetPortValue+0x8>
    12be:	0f 92       	push	r0
    12c0:	cd b7       	in	r28, 0x3d	; 61
    12c2:	de b7       	in	r29, 0x3e	; 62
    12c4:	89 83       	std	Y+1, r24	; 0x01
    12c6:	7b 83       	std	Y+3, r23	; 0x03
    12c8:	6a 83       	std	Y+2, r22	; 0x02

    switch (Copy_u8Port)
    12ca:	89 81       	ldd	r24, Y+1	; 0x01
    12cc:	28 2f       	mov	r18, r24
    12ce:	30 e0       	ldi	r19, 0x00	; 0
    12d0:	3d 83       	std	Y+5, r19	; 0x05
    12d2:	2c 83       	std	Y+4, r18	; 0x04
    12d4:	8c 81       	ldd	r24, Y+4	; 0x04
    12d6:	9d 81       	ldd	r25, Y+5	; 0x05
    12d8:	82 30       	cpi	r24, 0x02	; 2
    12da:	91 05       	cpc	r25, r1
    12dc:	e9 f0       	breq	.+58     	; 0x1318 <DIO_VidGetPortValue+0x62>
    12de:	2c 81       	ldd	r18, Y+4	; 0x04
    12e0:	3d 81       	ldd	r19, Y+5	; 0x05
    12e2:	23 30       	cpi	r18, 0x03	; 3
    12e4:	31 05       	cpc	r19, r1
    12e6:	34 f4       	brge	.+12     	; 0x12f4 <DIO_VidGetPortValue+0x3e>
    12e8:	8c 81       	ldd	r24, Y+4	; 0x04
    12ea:	9d 81       	ldd	r25, Y+5	; 0x05
    12ec:	81 30       	cpi	r24, 0x01	; 1
    12ee:	91 05       	cpc	r25, r1
    12f0:	61 f0       	breq	.+24     	; 0x130a <DIO_VidGetPortValue+0x54>
    12f2:	26 c0       	rjmp	.+76     	; 0x1340 <DIO_VidGetPortValue+0x8a>
    12f4:	2c 81       	ldd	r18, Y+4	; 0x04
    12f6:	3d 81       	ldd	r19, Y+5	; 0x05
    12f8:	23 30       	cpi	r18, 0x03	; 3
    12fa:	31 05       	cpc	r19, r1
    12fc:	a1 f0       	breq	.+40     	; 0x1326 <DIO_VidGetPortValue+0x70>
    12fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1300:	9d 81       	ldd	r25, Y+5	; 0x05
    1302:	84 30       	cpi	r24, 0x04	; 4
    1304:	91 05       	cpc	r25, r1
    1306:	b1 f0       	breq	.+44     	; 0x1334 <DIO_VidGetPortValue+0x7e>
    1308:	1b c0       	rjmp	.+54     	; 0x1340 <DIO_VidGetPortValue+0x8a>
    {
    case (Port_A):
        *Copy_Pu8PortValue = PINA;
    130a:	e9 e3       	ldi	r30, 0x39	; 57
    130c:	f0 e0       	ldi	r31, 0x00	; 0
    130e:	80 81       	ld	r24, Z
    1310:	ea 81       	ldd	r30, Y+2	; 0x02
    1312:	fb 81       	ldd	r31, Y+3	; 0x03
    1314:	80 83       	st	Z, r24
    1316:	14 c0       	rjmp	.+40     	; 0x1340 <DIO_VidGetPortValue+0x8a>
        break;
    case (Port_B):
        *Copy_Pu8PortValue = PINB;
    1318:	e6 e3       	ldi	r30, 0x36	; 54
    131a:	f0 e0       	ldi	r31, 0x00	; 0
    131c:	80 81       	ld	r24, Z
    131e:	ea 81       	ldd	r30, Y+2	; 0x02
    1320:	fb 81       	ldd	r31, Y+3	; 0x03
    1322:	80 83       	st	Z, r24
    1324:	0d c0       	rjmp	.+26     	; 0x1340 <DIO_VidGetPortValue+0x8a>
        break;
    case (Port_C):
        *Copy_Pu8PortValue = PINC;
    1326:	e3 e3       	ldi	r30, 0x33	; 51
    1328:	f0 e0       	ldi	r31, 0x00	; 0
    132a:	80 81       	ld	r24, Z
    132c:	ea 81       	ldd	r30, Y+2	; 0x02
    132e:	fb 81       	ldd	r31, Y+3	; 0x03
    1330:	80 83       	st	Z, r24
    1332:	06 c0       	rjmp	.+12     	; 0x1340 <DIO_VidGetPortValue+0x8a>
        break;
    case (Port_D):
        *Copy_Pu8PortValue = PIND;
    1334:	e0 e3       	ldi	r30, 0x30	; 48
    1336:	f0 e0       	ldi	r31, 0x00	; 0
    1338:	80 81       	ld	r24, Z
    133a:	ea 81       	ldd	r30, Y+2	; 0x02
    133c:	fb 81       	ldd	r31, Y+3	; 0x03
    133e:	80 83       	st	Z, r24
        break;
    }
}
    1340:	0f 90       	pop	r0
    1342:	0f 90       	pop	r0
    1344:	0f 90       	pop	r0
    1346:	0f 90       	pop	r0
    1348:	0f 90       	pop	r0
    134a:	cf 91       	pop	r28
    134c:	df 91       	pop	r29
    134e:	08 95       	ret

00001350 <GIE_VidEnable>:
#include "GIE_interface.h"    // Including header file for GIE Enable/Disable funtions
#include "GIE_private.h"      //Including header file including memory addresses for GIE prot and BIT number

//GIE enable
void GIE_VidEnable()
{
    1350:	df 93       	push	r29
    1352:	cf 93       	push	r28
    1354:	cd b7       	in	r28, 0x3d	; 61
    1356:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(SREG, SREG_I_BIT);
    1358:	af e5       	ldi	r26, 0x5F	; 95
    135a:	b0 e0       	ldi	r27, 0x00	; 0
    135c:	ef e5       	ldi	r30, 0x5F	; 95
    135e:	f0 e0       	ldi	r31, 0x00	; 0
    1360:	80 81       	ld	r24, Z
    1362:	80 68       	ori	r24, 0x80	; 128
    1364:	8c 93       	st	X, r24
}
    1366:	cf 91       	pop	r28
    1368:	df 91       	pop	r29
    136a:	08 95       	ret

0000136c <GIE_VidDisable>:

//GIE disable
void GIE_VidDisable()
{
    136c:	df 93       	push	r29
    136e:	cf 93       	push	r28
    1370:	cd b7       	in	r28, 0x3d	; 61
    1372:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(SREG, SREG_I_BIT);
    1374:	af e5       	ldi	r26, 0x5F	; 95
    1376:	b0 e0       	ldi	r27, 0x00	; 0
    1378:	ef e5       	ldi	r30, 0x5F	; 95
    137a:	f0 e0       	ldi	r31, 0x00	; 0
    137c:	80 81       	ld	r24, Z
    137e:	8f 77       	andi	r24, 0x7F	; 127
    1380:	8c 93       	st	X, r24
}
    1382:	cf 91       	pop	r28
    1384:	df 91       	pop	r29
    1386:	08 95       	ret

00001388 <SPI_VidInit>:
#include "SPI_private.h"
#include "SPI_config.h"
#include "SPI_interface.h"

void SPI_VidInit()
{
    1388:	df 93       	push	r29
    138a:	cf 93       	push	r28
    138c:	cd b7       	in	r28, 0x3d	; 61
    138e:	de b7       	in	r29, 0x3e	; 62
    if (SPI_SELECTROLE == SPI_MASTER)
    {
        SET_BIT(SPCR, SPCR_MSTR);
    1390:	ad e2       	ldi	r26, 0x2D	; 45
    1392:	b0 e0       	ldi	r27, 0x00	; 0
    1394:	ed e2       	ldi	r30, 0x2D	; 45
    1396:	f0 e0       	ldi	r31, 0x00	; 0
    1398:	80 81       	ld	r24, Z
    139a:	80 61       	ori	r24, 0x10	; 16
    139c:	8c 93       	st	X, r24
    if (SPI_CLKPHASE == SPI_SETUP)
    {
        SET_BIT(SPCR, SPCR_CPHA);
    }

    SPCR |= SPI_SPRBITS;
    139e:	ad e2       	ldi	r26, 0x2D	; 45
    13a0:	b0 e0       	ldi	r27, 0x00	; 0
    13a2:	ed e2       	ldi	r30, 0x2D	; 45
    13a4:	f0 e0       	ldi	r31, 0x00	; 0
    13a6:	80 81       	ld	r24, Z
    13a8:	81 60       	ori	r24, 0x01	; 1
    13aa:	8c 93       	st	X, r24

    //if Double SPI Speed is selected
    if (SPI_CLKRATE > 3)
        SET_BIT(SPSR, SPSR_SPI2X);

    SET_BIT(SPCR, SPCR_SPE);
    13ac:	ad e2       	ldi	r26, 0x2D	; 45
    13ae:	b0 e0       	ldi	r27, 0x00	; 0
    13b0:	ed e2       	ldi	r30, 0x2D	; 45
    13b2:	f0 e0       	ldi	r31, 0x00	; 0
    13b4:	80 81       	ld	r24, Z
    13b6:	80 64       	ori	r24, 0x40	; 64
    13b8:	8c 93       	st	X, r24
}
    13ba:	cf 91       	pop	r28
    13bc:	df 91       	pop	r29
    13be:	08 95       	ret

000013c0 <SPI_VidSendByte>:

void SPI_VidSendByte(u8 Copy_u8Data)
{
    13c0:	df 93       	push	r29
    13c2:	cf 93       	push	r28
    13c4:	0f 92       	push	r0
    13c6:	cd b7       	in	r28, 0x3d	; 61
    13c8:	de b7       	in	r29, 0x3e	; 62
    13ca:	89 83       	std	Y+1, r24	; 0x01
    SPDR = Copy_u8Data;
    13cc:	ef e2       	ldi	r30, 0x2F	; 47
    13ce:	f0 e0       	ldi	r31, 0x00	; 0
    13d0:	89 81       	ldd	r24, Y+1	; 0x01
    13d2:	80 83       	st	Z, r24
    while (GET_BIT(SPSR, SPSR_SPIF) == 0)
    13d4:	ee e2       	ldi	r30, 0x2E	; 46
    13d6:	f0 e0       	ldi	r31, 0x00	; 0
    13d8:	80 81       	ld	r24, Z
    13da:	88 23       	and	r24, r24
    13dc:	dc f7       	brge	.-10     	; 0x13d4 <SPI_VidSendByte+0x14>
        ;
}
    13de:	0f 90       	pop	r0
    13e0:	cf 91       	pop	r28
    13e2:	df 91       	pop	r29
    13e4:	08 95       	ret

000013e6 <SPI_u8ReceiveByte>:

u8 SPI_u8ReceiveByte()
{
    13e6:	df 93       	push	r29
    13e8:	cf 93       	push	r28
    13ea:	cd b7       	in	r28, 0x3d	; 61
    13ec:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(SPSR, SPSR_SPIF) == 0)
    13ee:	ee e2       	ldi	r30, 0x2E	; 46
    13f0:	f0 e0       	ldi	r31, 0x00	; 0
    13f2:	80 81       	ld	r24, Z
    13f4:	88 23       	and	r24, r24
    13f6:	dc f7       	brge	.-10     	; 0x13ee <SPI_u8ReceiveByte+0x8>
        ;
    return SPDR;
    13f8:	ef e2       	ldi	r30, 0x2F	; 47
    13fa:	f0 e0       	ldi	r31, 0x00	; 0
    13fc:	80 81       	ld	r24, Z
}
    13fe:	cf 91       	pop	r28
    1400:	df 91       	pop	r29
    1402:	08 95       	ret

00001404 <SPI_u8TranceiveByte>:

u8 SPI_u8TranceiveByte(u8 Copy_u8Data)
{
    1404:	df 93       	push	r29
    1406:	cf 93       	push	r28
    1408:	0f 92       	push	r0
    140a:	cd b7       	in	r28, 0x3d	; 61
    140c:	de b7       	in	r29, 0x3e	; 62
    140e:	89 83       	std	Y+1, r24	; 0x01
    SPDR = Copy_u8Data;
    1410:	ef e2       	ldi	r30, 0x2F	; 47
    1412:	f0 e0       	ldi	r31, 0x00	; 0
    1414:	89 81       	ldd	r24, Y+1	; 0x01
    1416:	80 83       	st	Z, r24
    
    while (GET_BIT(SPSR, SPSR_SPIF) == 0)
    1418:	ee e2       	ldi	r30, 0x2E	; 46
    141a:	f0 e0       	ldi	r31, 0x00	; 0
    141c:	80 81       	ld	r24, Z
    141e:	88 23       	and	r24, r24
    1420:	dc f7       	brge	.-10     	; 0x1418 <SPI_u8TranceiveByte+0x14>
        ;

    return SPDR;
    1422:	ef e2       	ldi	r30, 0x2F	; 47
    1424:	f0 e0       	ldi	r31, 0x00	; 0
    1426:	80 81       	ld	r24, Z
}
    1428:	0f 90       	pop	r0
    142a:	cf 91       	pop	r28
    142c:	df 91       	pop	r29
    142e:	08 95       	ret

00001430 <SPI_VidSendString>:

void SPI_VidSendString(u8 *Copy_String)
{
    1430:	df 93       	push	r29
    1432:	cf 93       	push	r28
    1434:	00 d0       	rcall	.+0      	; 0x1436 <SPI_VidSendString+0x6>
    1436:	cd b7       	in	r28, 0x3d	; 61
    1438:	de b7       	in	r29, 0x3e	; 62
    143a:	9a 83       	std	Y+2, r25	; 0x02
    143c:	89 83       	std	Y+1, r24	; 0x01
    143e:	0a c0       	rjmp	.+20     	; 0x1454 <SPI_VidSendString+0x24>
    while (*Copy_String)
    {
        SPI_VidSendByte(*Copy_String);
    1440:	e9 81       	ldd	r30, Y+1	; 0x01
    1442:	fa 81       	ldd	r31, Y+2	; 0x02
    1444:	80 81       	ld	r24, Z
    1446:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <SPI_VidSendByte>
        Copy_String++;
    144a:	89 81       	ldd	r24, Y+1	; 0x01
    144c:	9a 81       	ldd	r25, Y+2	; 0x02
    144e:	01 96       	adiw	r24, 0x01	; 1
    1450:	9a 83       	std	Y+2, r25	; 0x02
    1452:	89 83       	std	Y+1, r24	; 0x01
    return SPDR;
}

void SPI_VidSendString(u8 *Copy_String)
{
    while (*Copy_String)
    1454:	e9 81       	ldd	r30, Y+1	; 0x01
    1456:	fa 81       	ldd	r31, Y+2	; 0x02
    1458:	80 81       	ld	r24, Z
    145a:	88 23       	and	r24, r24
    145c:	89 f7       	brne	.-30     	; 0x1440 <SPI_VidSendString+0x10>
    {
        SPI_VidSendByte(*Copy_String);
        Copy_String++;
    }
}
    145e:	0f 90       	pop	r0
    1460:	0f 90       	pop	r0
    1462:	cf 91       	pop	r28
    1464:	df 91       	pop	r29
    1466:	08 95       	ret

00001468 <SPI_VidReceiveString>:

void SPI_VidReceiveString(u8 *Copy_String)
{
    1468:	0f 93       	push	r16
    146a:	1f 93       	push	r17
    146c:	df 93       	push	r29
    146e:	cf 93       	push	r28
    1470:	00 d0       	rcall	.+0      	; 0x1472 <SPI_VidReceiveString+0xa>
    1472:	0f 92       	push	r0
    1474:	cd b7       	in	r28, 0x3d	; 61
    1476:	de b7       	in	r29, 0x3e	; 62
    1478:	9b 83       	std	Y+3, r25	; 0x03
    147a:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0;
    147c:	19 82       	std	Y+1, r1	; 0x01
    Copy_String[i] = SPI_u8ReceiveByte();
    147e:	89 81       	ldd	r24, Y+1	; 0x01
    1480:	28 2f       	mov	r18, r24
    1482:	30 e0       	ldi	r19, 0x00	; 0
    1484:	8a 81       	ldd	r24, Y+2	; 0x02
    1486:	9b 81       	ldd	r25, Y+3	; 0x03
    1488:	8c 01       	movw	r16, r24
    148a:	02 0f       	add	r16, r18
    148c:	13 1f       	adc	r17, r19
    148e:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <SPI_u8ReceiveByte>
    1492:	f8 01       	movw	r30, r16
    1494:	80 83       	st	Z, r24
    1496:	0f c0       	rjmp	.+30     	; 0x14b6 <SPI_VidReceiveString+0x4e>
    while (Copy_String[i] != '#')
    {
        i++;
    1498:	89 81       	ldd	r24, Y+1	; 0x01
    149a:	8f 5f       	subi	r24, 0xFF	; 255
    149c:	89 83       	std	Y+1, r24	; 0x01
        Copy_String[i] = SPI_u8ReceiveByte();
    149e:	89 81       	ldd	r24, Y+1	; 0x01
    14a0:	28 2f       	mov	r18, r24
    14a2:	30 e0       	ldi	r19, 0x00	; 0
    14a4:	8a 81       	ldd	r24, Y+2	; 0x02
    14a6:	9b 81       	ldd	r25, Y+3	; 0x03
    14a8:	8c 01       	movw	r16, r24
    14aa:	02 0f       	add	r16, r18
    14ac:	13 1f       	adc	r17, r19
    14ae:	0e 94 f3 09 	call	0x13e6	; 0x13e6 <SPI_u8ReceiveByte>
    14b2:	f8 01       	movw	r30, r16
    14b4:	80 83       	st	Z, r24

void SPI_VidReceiveString(u8 *Copy_String)
{
    u8 i = 0;
    Copy_String[i] = SPI_u8ReceiveByte();
    while (Copy_String[i] != '#')
    14b6:	89 81       	ldd	r24, Y+1	; 0x01
    14b8:	28 2f       	mov	r18, r24
    14ba:	30 e0       	ldi	r19, 0x00	; 0
    14bc:	8a 81       	ldd	r24, Y+2	; 0x02
    14be:	9b 81       	ldd	r25, Y+3	; 0x03
    14c0:	fc 01       	movw	r30, r24
    14c2:	e2 0f       	add	r30, r18
    14c4:	f3 1f       	adc	r31, r19
    14c6:	80 81       	ld	r24, Z
    14c8:	83 32       	cpi	r24, 0x23	; 35
    14ca:	31 f7       	brne	.-52     	; 0x1498 <SPI_VidReceiveString+0x30>
    {
        i++;
        Copy_String[i] = SPI_u8ReceiveByte();
    }
    Copy_String[i] = '\0';
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	28 2f       	mov	r18, r24
    14d0:	30 e0       	ldi	r19, 0x00	; 0
    14d2:	8a 81       	ldd	r24, Y+2	; 0x02
    14d4:	9b 81       	ldd	r25, Y+3	; 0x03
    14d6:	fc 01       	movw	r30, r24
    14d8:	e2 0f       	add	r30, r18
    14da:	f3 1f       	adc	r31, r19
    14dc:	10 82       	st	Z, r1
}
    14de:	0f 90       	pop	r0
    14e0:	0f 90       	pop	r0
    14e2:	0f 90       	pop	r0
    14e4:	cf 91       	pop	r28
    14e6:	df 91       	pop	r29
    14e8:	1f 91       	pop	r17
    14ea:	0f 91       	pop	r16
    14ec:	08 95       	ret

000014ee <__vector_12>:

/* The ISR of Serial Transfer Complete */
void __vector_12(void)
{
    14ee:	1f 92       	push	r1
    14f0:	0f 92       	push	r0
    14f2:	0f b6       	in	r0, 0x3f	; 63
    14f4:	0f 92       	push	r0
    14f6:	11 24       	eor	r1, r1
    14f8:	df 93       	push	r29
    14fa:	cf 93       	push	r28
    14fc:	cd b7       	in	r28, 0x3d	; 61
    14fe:	de b7       	in	r29, 0x3e	; 62
}
    1500:	cf 91       	pop	r28
    1502:	df 91       	pop	r29
    1504:	0f 90       	pop	r0
    1506:	0f be       	out	0x3f, r0	; 63
    1508:	0f 90       	pop	r0
    150a:	1f 90       	pop	r1
    150c:	18 95       	reti

0000150e <TMR_VidInit>:
static u16 TMR_u16DutyCycle;

static void (*PVCallBack[TMR_NO_OF_TIMERS])(void) = {NULL, NULL, NULL};

void TMR_VidInit()
{
    150e:	df 93       	push	r29
    1510:	cf 93       	push	r28
    1512:	cd b7       	in	r28, 0x3d	; 61
    1514:	de b7       	in	r29, 0x3e	; 62

    /* Setting the initialization for Timer0 */
    if (TMR_TIMER0_INIT_STATE == TMR_DISABLE)
    {
        CLR_BIT(TCCR0, TCCR0_CS00);
    1516:	a3 e5       	ldi	r26, 0x53	; 83
    1518:	b0 e0       	ldi	r27, 0x00	; 0
    151a:	e3 e5       	ldi	r30, 0x53	; 83
    151c:	f0 e0       	ldi	r31, 0x00	; 0
    151e:	80 81       	ld	r24, Z
    1520:	8e 7f       	andi	r24, 0xFE	; 254
    1522:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, TCCR0_CS01);
    1524:	a3 e5       	ldi	r26, 0x53	; 83
    1526:	b0 e0       	ldi	r27, 0x00	; 0
    1528:	e3 e5       	ldi	r30, 0x53	; 83
    152a:	f0 e0       	ldi	r31, 0x00	; 0
    152c:	80 81       	ld	r24, Z
    152e:	8d 7f       	andi	r24, 0xFD	; 253
    1530:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, TCCR0_CS02);
    1532:	a3 e5       	ldi	r26, 0x53	; 83
    1534:	b0 e0       	ldi	r27, 0x00	; 0
    1536:	e3 e5       	ldi	r30, 0x53	; 83
    1538:	f0 e0       	ldi	r31, 0x00	; 0
    153a:	80 81       	ld	r24, Z
    153c:	8b 7f       	andi	r24, 0xFB	; 251
    153e:	8c 93       	st	X, r24
                SET_BIT(TIMSK, TIMSK_TICIE1);
            }
        }
        else if (TMR_TIMER1_MODE == TMR_CTC)
        {
            SET_BIT(TCCR1B, TCCR1B_WGM12);
    1540:	ae e4       	ldi	r26, 0x4E	; 78
    1542:	b0 e0       	ldi	r27, 0x00	; 0
    1544:	ee e4       	ldi	r30, 0x4E	; 78
    1546:	f0 e0       	ldi	r31, 0x00	; 0
    1548:	80 81       	ld	r24, Z
    154a:	88 60       	ori	r24, 0x08	; 8
    154c:	8c 93       	st	X, r24

            /* Checking Timer/Counter1A CTC Interrupt Enable bit */
            if (TMR_TIMER1A_COMP_STATE == TMR_ENABLE)
            {
                SET_BIT(TIMSK, TIMSK_OCIE1A);
    154e:	a9 e5       	ldi	r26, 0x59	; 89
    1550:	b0 e0       	ldi	r27, 0x00	; 0
    1552:	e9 e5       	ldi	r30, 0x59	; 89
    1554:	f0 e0       	ldi	r31, 0x00	; 0
    1556:	80 81       	ld	r24, Z
    1558:	80 61       	ori	r24, 0x10	; 16
    155a:	8c 93       	st	X, r24
            {
                SET_BIT(TIMSK, TIMSK_OCIE1B);
            }
            else
            {
                CLR_BIT(TIMSK, TIMSK_OCIE1B);
    155c:	a9 e5       	ldi	r26, 0x59	; 89
    155e:	b0 e0       	ldi	r27, 0x00	; 0
    1560:	e9 e5       	ldi	r30, 0x59	; 89
    1562:	f0 e0       	ldi	r31, 0x00	; 0
    1564:	80 81       	ld	r24, Z
    1566:	87 7f       	andi	r24, 0xF7	; 247
    1568:	8c 93       	st	X, r24
            }
            /* Checking Timer/Counter1 CTC Interrupt Enable bit */
            if (TMR_TIMER1_CTC_INT == TMR_EN_INT)
            {
                SET_BIT(TIMSK, TIMSK_OCIE1B);
    156a:	a9 e5       	ldi	r26, 0x59	; 89
    156c:	b0 e0       	ldi	r27, 0x00	; 0
    156e:	e9 e5       	ldi	r30, 0x59	; 89
    1570:	f0 e0       	ldi	r31, 0x00	; 0
    1572:	80 81       	ld	r24, Z
    1574:	88 60       	ori	r24, 0x08	; 8
    1576:	8c 93       	st	X, r24
                SET_BIT(TIMSK, TIMSK_OCIE1A);
    1578:	a9 e5       	ldi	r26, 0x59	; 89
    157a:	b0 e0       	ldi	r27, 0x00	; 0
    157c:	e9 e5       	ldi	r30, 0x59	; 89
    157e:	f0 e0       	ldi	r31, 0x00	; 0
    1580:	80 81       	ld	r24, Z
    1582:	80 61       	ori	r24, 0x10	; 16
    1584:	8c 93       	st	X, r24
        {
        case TMR_NORMAL:

            if (TMR_TIMER1A_COPT_STATE == TMR_ENABLE)
            {
                CLR_BIT(TCCR1A, TCCR1A_COM1A0);
    1586:	af e4       	ldi	r26, 0x4F	; 79
    1588:	b0 e0       	ldi	r27, 0x00	; 0
    158a:	ef e4       	ldi	r30, 0x4F	; 79
    158c:	f0 e0       	ldi	r31, 0x00	; 0
    158e:	80 81       	ld	r24, Z
    1590:	8f 7b       	andi	r24, 0xBF	; 191
    1592:	8c 93       	st	X, r24
                CLR_BIT(TCCR1A, TCCR1A_COM1A1);
    1594:	af e4       	ldi	r26, 0x4F	; 79
    1596:	b0 e0       	ldi	r27, 0x00	; 0
    1598:	ef e4       	ldi	r30, 0x4F	; 79
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	80 81       	ld	r24, Z
    159e:	8f 77       	andi	r24, 0x7F	; 127
    15a0:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, TCCR1B_CS10);
            break;
        }
        case TMR_PRESCALER_1024:
        {
            SET_BIT(TCCR1B, TCCR1B_CS10);
    15a2:	ae e4       	ldi	r26, 0x4E	; 78
    15a4:	b0 e0       	ldi	r27, 0x00	; 0
    15a6:	ee e4       	ldi	r30, 0x4E	; 78
    15a8:	f0 e0       	ldi	r31, 0x00	; 0
    15aa:	80 81       	ld	r24, Z
    15ac:	81 60       	ori	r24, 0x01	; 1
    15ae:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_CS12);
    15b0:	ae e4       	ldi	r26, 0x4E	; 78
    15b2:	b0 e0       	ldi	r27, 0x00	; 0
    15b4:	ee e4       	ldi	r30, 0x4E	; 78
    15b6:	f0 e0       	ldi	r31, 0x00	; 0
    15b8:	80 81       	ld	r24, Z
    15ba:	84 60       	ori	r24, 0x04	; 4
    15bc:	8c 93       	st	X, r24
            CLR_BIT(TCCR1B, TCCR1B_CS11);
    15be:	ae e4       	ldi	r26, 0x4E	; 78
    15c0:	b0 e0       	ldi	r27, 0x00	; 0
    15c2:	ee e4       	ldi	r30, 0x4E	; 78
    15c4:	f0 e0       	ldi	r31, 0x00	; 0
    15c6:	80 81       	ld	r24, Z
    15c8:	8d 7f       	andi	r24, 0xFD	; 253
    15ca:	8c 93       	st	X, r24
            SET_BIT(TCCR1B, TCCR1B_CS10);
            CLR_BIT(TCCR1B, TCCR1B_CS11);
            CLR_BIT(TCCR1B, TCCR1B_CS12);
        }
        }
        TMR_u8Timer1CtrlRegValue = TCCR1B;
    15cc:	ee e4       	ldi	r30, 0x4E	; 78
    15ce:	f0 e0       	ldi	r31, 0x00	; 0
    15d0:	80 81       	ld	r24, Z
    15d2:	80 93 a8 00 	sts	0x00A8, r24
    }

    /* Setting the initialization for Timer2 */
    if (TMR_TIMER2_INIT_STATE == TMR_DISABLE)
    {
        CLR_BIT(TCCR2, TCCR2_CS20);
    15d6:	a5 e4       	ldi	r26, 0x45	; 69
    15d8:	b0 e0       	ldi	r27, 0x00	; 0
    15da:	e5 e4       	ldi	r30, 0x45	; 69
    15dc:	f0 e0       	ldi	r31, 0x00	; 0
    15de:	80 81       	ld	r24, Z
    15e0:	8e 7f       	andi	r24, 0xFE	; 254
    15e2:	8c 93       	st	X, r24
        CLR_BIT(TCCR2, TCCR2_CS21);
    15e4:	a5 e4       	ldi	r26, 0x45	; 69
    15e6:	b0 e0       	ldi	r27, 0x00	; 0
    15e8:	e5 e4       	ldi	r30, 0x45	; 69
    15ea:	f0 e0       	ldi	r31, 0x00	; 0
    15ec:	80 81       	ld	r24, Z
    15ee:	8d 7f       	andi	r24, 0xFD	; 253
    15f0:	8c 93       	st	X, r24
        CLR_BIT(TCCR2, TCCR2_CS22);
    15f2:	a5 e4       	ldi	r26, 0x45	; 69
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	e5 e4       	ldi	r30, 0x45	; 69
    15f8:	f0 e0       	ldi	r31, 0x00	; 0
    15fa:	80 81       	ld	r24, Z
    15fc:	8b 7f       	andi	r24, 0xFB	; 251
    15fe:	8c 93       	st	X, r24
            break;
        }
        }
        TMR_u8Timer2CtrlRegValue = TCCR2;
    }
}
    1600:	cf 91       	pop	r28
    1602:	df 91       	pop	r29
    1604:	08 95       	ret

00001606 <TMR_VidDisableTimer>:

void TMR_VidDisableTimer(u8 Copy_u8TimerNb)
{
    1606:	df 93       	push	r29
    1608:	cf 93       	push	r28
    160a:	00 d0       	rcall	.+0      	; 0x160c <TMR_VidDisableTimer+0x6>
    160c:	0f 92       	push	r0
    160e:	cd b7       	in	r28, 0x3d	; 61
    1610:	de b7       	in	r29, 0x3e	; 62
    1612:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8TimerNb)
    1614:	89 81       	ldd	r24, Y+1	; 0x01
    1616:	28 2f       	mov	r18, r24
    1618:	30 e0       	ldi	r19, 0x00	; 0
    161a:	3b 83       	std	Y+3, r19	; 0x03
    161c:	2a 83       	std	Y+2, r18	; 0x02
    161e:	8a 81       	ldd	r24, Y+2	; 0x02
    1620:	9b 81       	ldd	r25, Y+3	; 0x03
    1622:	81 30       	cpi	r24, 0x01	; 1
    1624:	91 05       	cpc	r25, r1
    1626:	01 f1       	breq	.+64     	; 0x1668 <TMR_VidDisableTimer+0x62>
    1628:	2a 81       	ldd	r18, Y+2	; 0x02
    162a:	3b 81       	ldd	r19, Y+3	; 0x03
    162c:	22 30       	cpi	r18, 0x02	; 2
    162e:	31 05       	cpc	r19, r1
    1630:	89 f1       	breq	.+98     	; 0x1694 <TMR_VidDisableTimer+0x8e>
    1632:	8a 81       	ldd	r24, Y+2	; 0x02
    1634:	9b 81       	ldd	r25, Y+3	; 0x03
    1636:	00 97       	sbiw	r24, 0x00	; 0
    1638:	09 f0       	breq	.+2      	; 0x163c <TMR_VidDisableTimer+0x36>
    163a:	41 c0       	rjmp	.+130    	; 0x16be <TMR_VidDisableTimer+0xb8>
    {
    case TMR_TIMER0:
    {
        CLR_BIT(TCCR0, TCCR0_CS00);
    163c:	a3 e5       	ldi	r26, 0x53	; 83
    163e:	b0 e0       	ldi	r27, 0x00	; 0
    1640:	e3 e5       	ldi	r30, 0x53	; 83
    1642:	f0 e0       	ldi	r31, 0x00	; 0
    1644:	80 81       	ld	r24, Z
    1646:	8e 7f       	andi	r24, 0xFE	; 254
    1648:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, TCCR0_CS01);
    164a:	a3 e5       	ldi	r26, 0x53	; 83
    164c:	b0 e0       	ldi	r27, 0x00	; 0
    164e:	e3 e5       	ldi	r30, 0x53	; 83
    1650:	f0 e0       	ldi	r31, 0x00	; 0
    1652:	80 81       	ld	r24, Z
    1654:	8d 7f       	andi	r24, 0xFD	; 253
    1656:	8c 93       	st	X, r24
        CLR_BIT(TCCR0, TCCR0_CS02);
    1658:	a3 e5       	ldi	r26, 0x53	; 83
    165a:	b0 e0       	ldi	r27, 0x00	; 0
    165c:	e3 e5       	ldi	r30, 0x53	; 83
    165e:	f0 e0       	ldi	r31, 0x00	; 0
    1660:	80 81       	ld	r24, Z
    1662:	8b 7f       	andi	r24, 0xFB	; 251
    1664:	8c 93       	st	X, r24
    1666:	2b c0       	rjmp	.+86     	; 0x16be <TMR_VidDisableTimer+0xb8>
        break;
    }
    case TMR_TIMER1:
    {
        CLR_BIT(TCCR1B, TCCR1B_CS10);
    1668:	ae e4       	ldi	r26, 0x4E	; 78
    166a:	b0 e0       	ldi	r27, 0x00	; 0
    166c:	ee e4       	ldi	r30, 0x4E	; 78
    166e:	f0 e0       	ldi	r31, 0x00	; 0
    1670:	80 81       	ld	r24, Z
    1672:	8e 7f       	andi	r24, 0xFE	; 254
    1674:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, TCCR1B_CS11);
    1676:	ae e4       	ldi	r26, 0x4E	; 78
    1678:	b0 e0       	ldi	r27, 0x00	; 0
    167a:	ee e4       	ldi	r30, 0x4E	; 78
    167c:	f0 e0       	ldi	r31, 0x00	; 0
    167e:	80 81       	ld	r24, Z
    1680:	8d 7f       	andi	r24, 0xFD	; 253
    1682:	8c 93       	st	X, r24
        CLR_BIT(TCCR1B, TCCR1B_CS12);
    1684:	ae e4       	ldi	r26, 0x4E	; 78
    1686:	b0 e0       	ldi	r27, 0x00	; 0
    1688:	ee e4       	ldi	r30, 0x4E	; 78
    168a:	f0 e0       	ldi	r31, 0x00	; 0
    168c:	80 81       	ld	r24, Z
    168e:	8b 7f       	andi	r24, 0xFB	; 251
    1690:	8c 93       	st	X, r24
    1692:	15 c0       	rjmp	.+42     	; 0x16be <TMR_VidDisableTimer+0xb8>
        break;
    }
    case TMR_TIMER2:
    {
        CLR_BIT(TCCR2, TCCR2_CS20);
    1694:	a5 e4       	ldi	r26, 0x45	; 69
    1696:	b0 e0       	ldi	r27, 0x00	; 0
    1698:	e5 e4       	ldi	r30, 0x45	; 69
    169a:	f0 e0       	ldi	r31, 0x00	; 0
    169c:	80 81       	ld	r24, Z
    169e:	8e 7f       	andi	r24, 0xFE	; 254
    16a0:	8c 93       	st	X, r24
        CLR_BIT(TCCR2, TCCR2_CS21);
    16a2:	a5 e4       	ldi	r26, 0x45	; 69
    16a4:	b0 e0       	ldi	r27, 0x00	; 0
    16a6:	e5 e4       	ldi	r30, 0x45	; 69
    16a8:	f0 e0       	ldi	r31, 0x00	; 0
    16aa:	80 81       	ld	r24, Z
    16ac:	8d 7f       	andi	r24, 0xFD	; 253
    16ae:	8c 93       	st	X, r24
        CLR_BIT(TCCR2, TCCR2_CS22);
    16b0:	a5 e4       	ldi	r26, 0x45	; 69
    16b2:	b0 e0       	ldi	r27, 0x00	; 0
    16b4:	e5 e4       	ldi	r30, 0x45	; 69
    16b6:	f0 e0       	ldi	r31, 0x00	; 0
    16b8:	80 81       	ld	r24, Z
    16ba:	8b 7f       	andi	r24, 0xFB	; 251
    16bc:	8c 93       	st	X, r24
        break;
    }
    }
}
    16be:	0f 90       	pop	r0
    16c0:	0f 90       	pop	r0
    16c2:	0f 90       	pop	r0
    16c4:	cf 91       	pop	r28
    16c6:	df 91       	pop	r29
    16c8:	08 95       	ret

000016ca <TMR_VidEnableTimer>:

void TMR_VidEnableTimer(u8 Copy_u8TimerNb)
{
    16ca:	df 93       	push	r29
    16cc:	cf 93       	push	r28
    16ce:	00 d0       	rcall	.+0      	; 0x16d0 <TMR_VidEnableTimer+0x6>
    16d0:	0f 92       	push	r0
    16d2:	cd b7       	in	r28, 0x3d	; 61
    16d4:	de b7       	in	r29, 0x3e	; 62
    16d6:	89 83       	std	Y+1, r24	; 0x01
    switch (Copy_u8TimerNb)
    16d8:	89 81       	ldd	r24, Y+1	; 0x01
    16da:	28 2f       	mov	r18, r24
    16dc:	30 e0       	ldi	r19, 0x00	; 0
    16de:	3b 83       	std	Y+3, r19	; 0x03
    16e0:	2a 83       	std	Y+2, r18	; 0x02
    16e2:	8a 81       	ldd	r24, Y+2	; 0x02
    16e4:	9b 81       	ldd	r25, Y+3	; 0x03
    16e6:	81 30       	cpi	r24, 0x01	; 1
    16e8:	91 05       	cpc	r25, r1
    16ea:	79 f0       	breq	.+30     	; 0x170a <TMR_VidEnableTimer+0x40>
    16ec:	2a 81       	ldd	r18, Y+2	; 0x02
    16ee:	3b 81       	ldd	r19, Y+3	; 0x03
    16f0:	22 30       	cpi	r18, 0x02	; 2
    16f2:	31 05       	cpc	r19, r1
    16f4:	81 f0       	breq	.+32     	; 0x1716 <TMR_VidEnableTimer+0x4c>
    16f6:	8a 81       	ldd	r24, Y+2	; 0x02
    16f8:	9b 81       	ldd	r25, Y+3	; 0x03
    16fa:	00 97       	sbiw	r24, 0x00	; 0
    16fc:	89 f4       	brne	.+34     	; 0x1720 <TMR_VidEnableTimer+0x56>
    {
    case TMR_TIMER0:
    {
        TCCR0 = TMR_u8Timer0CtrlRegValue;
    16fe:	e3 e5       	ldi	r30, 0x53	; 83
    1700:	f0 e0       	ldi	r31, 0x00	; 0
    1702:	80 91 a7 00 	lds	r24, 0x00A7
    1706:	80 83       	st	Z, r24
    1708:	0b c0       	rjmp	.+22     	; 0x1720 <TMR_VidEnableTimer+0x56>
        break;
    }
    case TMR_TIMER1:
    {
        TCCR1B = TMR_u8Timer1CtrlRegValue;
    170a:	ee e4       	ldi	r30, 0x4E	; 78
    170c:	f0 e0       	ldi	r31, 0x00	; 0
    170e:	80 91 a8 00 	lds	r24, 0x00A8
    1712:	80 83       	st	Z, r24
    1714:	05 c0       	rjmp	.+10     	; 0x1720 <TMR_VidEnableTimer+0x56>
        break;
    }
    case TMR_TIMER2:
    {
        TCCR2 = TMR_u8Timer2CtrlRegValue;
    1716:	e5 e4       	ldi	r30, 0x45	; 69
    1718:	f0 e0       	ldi	r31, 0x00	; 0
    171a:	80 91 a9 00 	lds	r24, 0x00A9
    171e:	80 83       	st	Z, r24
        break;
    }
    }
}
    1720:	0f 90       	pop	r0
    1722:	0f 90       	pop	r0
    1724:	0f 90       	pop	r0
    1726:	cf 91       	pop	r28
    1728:	df 91       	pop	r29
    172a:	08 95       	ret

0000172c <TMR_VidSetDutyCycle>:

void TMR_VidSetDutyCycle(u8 Copy_u8TimerNb, u8 Copy_u8DutyCycle)
{
    172c:	df 93       	push	r29
    172e:	cf 93       	push	r28
    1730:	00 d0       	rcall	.+0      	; 0x1732 <TMR_VidSetDutyCycle+0x6>
    1732:	00 d0       	rcall	.+0      	; 0x1734 <TMR_VidSetDutyCycle+0x8>
    1734:	00 d0       	rcall	.+0      	; 0x1736 <TMR_VidSetDutyCycle+0xa>
    1736:	cd b7       	in	r28, 0x3d	; 61
    1738:	de b7       	in	r29, 0x3e	; 62
    173a:	8b 83       	std	Y+3, r24	; 0x03
    173c:	6c 83       	std	Y+4, r22	; 0x04

    u16 Local_u16CompareValue;
    
    switch (Copy_u8TimerNb)
    173e:	8b 81       	ldd	r24, Y+3	; 0x03
    1740:	28 2f       	mov	r18, r24
    1742:	30 e0       	ldi	r19, 0x00	; 0
    1744:	3e 83       	std	Y+6, r19	; 0x06
    1746:	2d 83       	std	Y+5, r18	; 0x05
    1748:	8d 81       	ldd	r24, Y+5	; 0x05
    174a:	9e 81       	ldd	r25, Y+6	; 0x06
    174c:	81 30       	cpi	r24, 0x01	; 1
    174e:	91 05       	cpc	r25, r1
    1750:	31 f1       	breq	.+76     	; 0x179e <TMR_VidSetDutyCycle+0x72>
    1752:	2d 81       	ldd	r18, Y+5	; 0x05
    1754:	3e 81       	ldd	r19, Y+6	; 0x06
    1756:	22 30       	cpi	r18, 0x02	; 2
    1758:	31 05       	cpc	r19, r1
    175a:	09 f4       	brne	.+2      	; 0x175e <TMR_VidSetDutyCycle+0x32>
    175c:	42 c0       	rjmp	.+132    	; 0x17e2 <TMR_VidSetDutyCycle+0xb6>
    175e:	8d 81       	ldd	r24, Y+5	; 0x05
    1760:	9e 81       	ldd	r25, Y+6	; 0x06
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	09 f0       	breq	.+2      	; 0x1768 <TMR_VidSetDutyCycle+0x3c>
    1766:	57 c0       	rjmp	.+174    	; 0x1816 <TMR_VidSetDutyCycle+0xea>
    {
    case TMR_TIMER0:
    {
        OCR0 = ((Copy_u8DutyCycle * (TMR_MAXVAL_TIMER02_REG - 1)) / 100);
    1768:	ec e5       	ldi	r30, 0x5C	; 92
    176a:	f0 e0       	ldi	r31, 0x00	; 0
    176c:	8c 81       	ldd	r24, Y+4	; 0x04
    176e:	48 2f       	mov	r20, r24
    1770:	50 e0       	ldi	r21, 0x00	; 0
    1772:	ca 01       	movw	r24, r20
    1774:	9c 01       	movw	r18, r24
    1776:	22 0f       	add	r18, r18
    1778:	33 1f       	adc	r19, r19
    177a:	c9 01       	movw	r24, r18
    177c:	96 95       	lsr	r25
    177e:	98 2f       	mov	r25, r24
    1780:	88 27       	eor	r24, r24
    1782:	97 95       	ror	r25
    1784:	87 95       	ror	r24
    1786:	82 1b       	sub	r24, r18
    1788:	93 0b       	sbc	r25, r19
    178a:	84 0f       	add	r24, r20
    178c:	95 1f       	adc	r25, r21
    178e:	24 e6       	ldi	r18, 0x64	; 100
    1790:	30 e0       	ldi	r19, 0x00	; 0
    1792:	b9 01       	movw	r22, r18
    1794:	0e 94 ab 18 	call	0x3156	; 0x3156 <__divmodhi4>
    1798:	cb 01       	movw	r24, r22
    179a:	80 83       	st	Z, r24
    179c:	3c c0       	rjmp	.+120    	; 0x1816 <TMR_VidSetDutyCycle+0xea>
        break;
    }
    case TMR_TIMER1:
    {
        Local_u16CompareValue = ((Copy_u8DutyCycle * (TMR_MAXVAL_TIMER1_REG - 1)) / 100);
    179e:	8c 81       	ldd	r24, Y+4	; 0x04
    17a0:	88 2f       	mov	r24, r24
    17a2:	90 e0       	ldi	r25, 0x00	; 0
    17a4:	a0 e0       	ldi	r26, 0x00	; 0
    17a6:	b0 e0       	ldi	r27, 0x00	; 0
    17a8:	2f ef       	ldi	r18, 0xFF	; 255
    17aa:	3f ef       	ldi	r19, 0xFF	; 255
    17ac:	40 e0       	ldi	r20, 0x00	; 0
    17ae:	50 e0       	ldi	r21, 0x00	; 0
    17b0:	bc 01       	movw	r22, r24
    17b2:	cd 01       	movw	r24, r26
    17b4:	0e 94 78 18 	call	0x30f0	; 0x30f0 <__mulsi3>
    17b8:	dc 01       	movw	r26, r24
    17ba:	cb 01       	movw	r24, r22
    17bc:	24 e6       	ldi	r18, 0x64	; 100
    17be:	30 e0       	ldi	r19, 0x00	; 0
    17c0:	40 e0       	ldi	r20, 0x00	; 0
    17c2:	50 e0       	ldi	r21, 0x00	; 0
    17c4:	bc 01       	movw	r22, r24
    17c6:	cd 01       	movw	r24, r26
    17c8:	0e 94 be 18 	call	0x317c	; 0x317c <__divmodsi4>
    17cc:	da 01       	movw	r26, r20
    17ce:	c9 01       	movw	r24, r18
    17d0:	9a 83       	std	Y+2, r25	; 0x02
    17d2:	89 83       	std	Y+1, r24	; 0x01
        if (TMR_TIMER1A_COPT_STATE == TMR_ENABLE)
        {
            OCRA1 = Local_u16CompareValue;
    17d4:	ea e4       	ldi	r30, 0x4A	; 74
    17d6:	f0 e0       	ldi	r31, 0x00	; 0
    17d8:	89 81       	ldd	r24, Y+1	; 0x01
    17da:	9a 81       	ldd	r25, Y+2	; 0x02
    17dc:	91 83       	std	Z+1, r25	; 0x01
    17de:	80 83       	st	Z, r24
    17e0:	1a c0       	rjmp	.+52     	; 0x1816 <TMR_VidSetDutyCycle+0xea>
        }
        break;
    }
    case TMR_TIMER2:
    {
        OCR2 = ((Copy_u8DutyCycle * (TMR_MAXVAL_TIMER02_REG - 1)) / 100);
    17e2:	e3 e4       	ldi	r30, 0x43	; 67
    17e4:	f0 e0       	ldi	r31, 0x00	; 0
    17e6:	8c 81       	ldd	r24, Y+4	; 0x04
    17e8:	48 2f       	mov	r20, r24
    17ea:	50 e0       	ldi	r21, 0x00	; 0
    17ec:	ca 01       	movw	r24, r20
    17ee:	9c 01       	movw	r18, r24
    17f0:	22 0f       	add	r18, r18
    17f2:	33 1f       	adc	r19, r19
    17f4:	c9 01       	movw	r24, r18
    17f6:	96 95       	lsr	r25
    17f8:	98 2f       	mov	r25, r24
    17fa:	88 27       	eor	r24, r24
    17fc:	97 95       	ror	r25
    17fe:	87 95       	ror	r24
    1800:	82 1b       	sub	r24, r18
    1802:	93 0b       	sbc	r25, r19
    1804:	84 0f       	add	r24, r20
    1806:	95 1f       	adc	r25, r21
    1808:	24 e6       	ldi	r18, 0x64	; 100
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	b9 01       	movw	r22, r18
    180e:	0e 94 ab 18 	call	0x3156	; 0x3156 <__divmodhi4>
    1812:	cb 01       	movw	r24, r22
    1814:	80 83       	st	Z, r24
        break;
    }
    }
}
    1816:	26 96       	adiw	r28, 0x06	; 6
    1818:	0f b6       	in	r0, 0x3f	; 63
    181a:	f8 94       	cli
    181c:	de bf       	out	0x3e, r29	; 62
    181e:	0f be       	out	0x3f, r0	; 63
    1820:	cd bf       	out	0x3d, r28	; 61
    1822:	cf 91       	pop	r28
    1824:	df 91       	pop	r29
    1826:	08 95       	ret

00001828 <TMR_VidSetPWM>:

void TMR_VidSetPWM(u16 Copy_u16ReqCompValue)
{
    1828:	df 93       	push	r29
    182a:	cf 93       	push	r28
    182c:	00 d0       	rcall	.+0      	; 0x182e <TMR_VidSetPWM+0x6>
    182e:	cd b7       	in	r28, 0x3d	; 61
    1830:	de b7       	in	r29, 0x3e	; 62
    1832:	9a 83       	std	Y+2, r25	; 0x02
    1834:	89 83       	std	Y+1, r24	; 0x01
        else if (TMR_TIMER1_COPT_MODE == TMR_SET_OCX)
        {
            OCRB1 = TMR_ICR1_VAL - Copy_u16ReqCompValue;
        }
    }
}
    1836:	0f 90       	pop	r0
    1838:	0f 90       	pop	r0
    183a:	cf 91       	pop	r28
    183c:	df 91       	pop	r29
    183e:	08 95       	ret

00001840 <TMR_VidSetCallBack>:

void TMR_VidSetCallBack(u8 Copy_u8TimerNb, void (*Copy_PVCallBack)(void))
{
    1840:	df 93       	push	r29
    1842:	cf 93       	push	r28
    1844:	00 d0       	rcall	.+0      	; 0x1846 <TMR_VidSetCallBack+0x6>
    1846:	0f 92       	push	r0
    1848:	cd b7       	in	r28, 0x3d	; 61
    184a:	de b7       	in	r29, 0x3e	; 62
    184c:	89 83       	std	Y+1, r24	; 0x01
    184e:	7b 83       	std	Y+3, r23	; 0x03
    1850:	6a 83       	std	Y+2, r22	; 0x02
    TCNT0 = TMR_u32Timer0Preload;
    1852:	e2 e5       	ldi	r30, 0x52	; 82
    1854:	f0 e0       	ldi	r31, 0x00	; 0
    1856:	80 91 92 00 	lds	r24, 0x0092
    185a:	90 91 93 00 	lds	r25, 0x0093
    185e:	80 83       	st	Z, r24
    TCNT1 = TMR_u32Timer1Preload;
    1860:	ec e4       	ldi	r30, 0x4C	; 76
    1862:	f0 e0       	ldi	r31, 0x00	; 0
    1864:	80 91 94 00 	lds	r24, 0x0094
    1868:	90 91 95 00 	lds	r25, 0x0095
    186c:	91 83       	std	Z+1, r25	; 0x01
    186e:	80 83       	st	Z, r24
    TCNT2 = TMR_u32Timer2Preload;
    1870:	e4 e4       	ldi	r30, 0x44	; 68
    1872:	f0 e0       	ldi	r31, 0x00	; 0
    1874:	80 91 96 00 	lds	r24, 0x0096
    1878:	90 91 97 00 	lds	r25, 0x0097
    187c:	80 83       	st	Z, r24

    PVCallBack[Copy_u8TimerNb] = Copy_PVCallBack;
    187e:	89 81       	ldd	r24, Y+1	; 0x01
    1880:	88 2f       	mov	r24, r24
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	88 0f       	add	r24, r24
    1886:	99 1f       	adc	r25, r25
    1888:	fc 01       	movw	r30, r24
    188a:	e4 56       	subi	r30, 0x64	; 100
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	8a 81       	ldd	r24, Y+2	; 0x02
    1890:	9b 81       	ldd	r25, Y+3	; 0x03
    1892:	91 83       	std	Z+1, r25	; 0x01
    1894:	80 83       	st	Z, r24
    DIO_VidSetPinValue(Port_C, Pin_7, high);
    1896:	83 e0       	ldi	r24, 0x03	; 3
    1898:	67 e0       	ldi	r22, 0x07	; 7
    189a:	41 e0       	ldi	r20, 0x01	; 1
    189c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinValue>
}
    18a0:	0f 90       	pop	r0
    18a2:	0f 90       	pop	r0
    18a4:	0f 90       	pop	r0
    18a6:	cf 91       	pop	r28
    18a8:	df 91       	pop	r29
    18aa:	08 95       	ret

000018ac <TMR_VidEnableIcuInterrupt>:

/*-----------------------------Functions related to Input Capture Mode----------------------------------*/

void TMR_VidEnableIcuInterrupt()
{
    18ac:	df 93       	push	r29
    18ae:	cf 93       	push	r28
    18b0:	cd b7       	in	r28, 0x3d	; 61
    18b2:	de b7       	in	r29, 0x3e	; 62
    SET_BIT(TIMSK, TIMSK_TICIE1);
    18b4:	a9 e5       	ldi	r26, 0x59	; 89
    18b6:	b0 e0       	ldi	r27, 0x00	; 0
    18b8:	e9 e5       	ldi	r30, 0x59	; 89
    18ba:	f0 e0       	ldi	r31, 0x00	; 0
    18bc:	80 81       	ld	r24, Z
    18be:	80 62       	ori	r24, 0x20	; 32
    18c0:	8c 93       	st	X, r24
}
    18c2:	cf 91       	pop	r28
    18c4:	df 91       	pop	r29
    18c6:	08 95       	ret

000018c8 <TMR_VidDisbleIcuInterrupt>:

void TMR_VidDisbleIcuInterrupt()
{
    18c8:	df 93       	push	r29
    18ca:	cf 93       	push	r28
    18cc:	cd b7       	in	r28, 0x3d	; 61
    18ce:	de b7       	in	r29, 0x3e	; 62
    CLR_BIT(TIMSK, TIMSK_TICIE1);
    18d0:	a9 e5       	ldi	r26, 0x59	; 89
    18d2:	b0 e0       	ldi	r27, 0x00	; 0
    18d4:	e9 e5       	ldi	r30, 0x59	; 89
    18d6:	f0 e0       	ldi	r31, 0x00	; 0
    18d8:	80 81       	ld	r24, Z
    18da:	8f 7d       	andi	r24, 0xDF	; 223
    18dc:	8c 93       	st	X, r24
}
    18de:	cf 91       	pop	r28
    18e0:	df 91       	pop	r29
    18e2:	08 95       	ret

000018e4 <TMR_u16GetPeriod>:

u16 TMR_u16GetPeriod()
{
    18e4:	df 93       	push	r29
    18e6:	cf 93       	push	r28
    18e8:	cd b7       	in	r28, 0x3d	; 61
    18ea:	de b7       	in	r29, 0x3e	; 62
    return TMR_u16TotalTime * TMR_TIMER1_TICKTIME;
    18ec:	80 91 ac 00 	lds	r24, 0x00AC
    18f0:	90 91 ad 00 	lds	r25, 0x00AD
    18f4:	96 95       	lsr	r25
    18f6:	98 2f       	mov	r25, r24
    18f8:	88 27       	eor	r24, r24
    18fa:	97 95       	ror	r25
    18fc:	87 95       	ror	r24
}
    18fe:	cf 91       	pop	r28
    1900:	df 91       	pop	r29
    1902:	08 95       	ret

00001904 <TMR_u16GetDutyCycle>:

u16 TMR_u16GetDutyCycle()
{
    1904:	df 93       	push	r29
    1906:	cf 93       	push	r28
    1908:	cd b7       	in	r28, 0x3d	; 61
    190a:	de b7       	in	r29, 0x3e	; 62

    return TMR_u16DutyCycle;
    190c:	80 91 ae 00 	lds	r24, 0x00AE
    1910:	90 91 af 00 	lds	r25, 0x00AF
}
    1914:	cf 91       	pop	r28
    1916:	df 91       	pop	r29
    1918:	08 95       	ret

0000191a <TMR_u16OnTime>:

u16 TMR_u16OnTime()
{
    191a:	df 93       	push	r29
    191c:	cf 93       	push	r28
    191e:	cd b7       	in	r28, 0x3d	; 61
    1920:	de b7       	in	r29, 0x3e	; 62

    return TMR_u16ONTime * TMR_TIMER1_TICKTIME;
    1922:	80 91 aa 00 	lds	r24, 0x00AA
    1926:	90 91 ab 00 	lds	r25, 0x00AB
    192a:	96 95       	lsr	r25
    192c:	98 2f       	mov	r25, r24
    192e:	88 27       	eor	r24, r24
    1930:	97 95       	ror	r25
    1932:	87 95       	ror	r24
}
    1934:	cf 91       	pop	r28
    1936:	df 91       	pop	r29
    1938:	08 95       	ret

0000193a <TMR_u16OffTime>:

u16 TMR_u16OffTime()
{
    193a:	df 93       	push	r29
    193c:	cf 93       	push	r28
    193e:	cd b7       	in	r28, 0x3d	; 61
    1940:	de b7       	in	r29, 0x3e	; 62

    return (TMR_u16TotalTime - TMR_u16ONTime) * TMR_TIMER1_TICKTIME;
    1942:	20 91 ac 00 	lds	r18, 0x00AC
    1946:	30 91 ad 00 	lds	r19, 0x00AD
    194a:	80 91 aa 00 	lds	r24, 0x00AA
    194e:	90 91 ab 00 	lds	r25, 0x00AB
    1952:	a9 01       	movw	r20, r18
    1954:	48 1b       	sub	r20, r24
    1956:	59 0b       	sbc	r21, r25
    1958:	ca 01       	movw	r24, r20
    195a:	96 95       	lsr	r25
    195c:	98 2f       	mov	r25, r24
    195e:	88 27       	eor	r24, r24
    1960:	97 95       	ror	r25
    1962:	87 95       	ror	r24
}
    1964:	cf 91       	pop	r28
    1966:	df 91       	pop	r29
    1968:	08 95       	ret

0000196a <__vector_6>:

/*ISR of Input Capture interrupts */
void __vector_6()
{
    196a:	1f 92       	push	r1
    196c:	0f 92       	push	r0
    196e:	0f b6       	in	r0, 0x3f	; 63
    1970:	0f 92       	push	r0
    1972:	11 24       	eor	r1, r1
    1974:	2f 93       	push	r18
    1976:	3f 93       	push	r19
    1978:	4f 93       	push	r20
    197a:	5f 93       	push	r21
    197c:	6f 93       	push	r22
    197e:	7f 93       	push	r23
    1980:	8f 93       	push	r24
    1982:	9f 93       	push	r25
    1984:	af 93       	push	r26
    1986:	bf 93       	push	r27
    1988:	ef 93       	push	r30
    198a:	ff 93       	push	r31
    198c:	df 93       	push	r29
    198e:	cf 93       	push	r28
    1990:	cd b7       	in	r28, 0x3d	; 61
    1992:	de b7       	in	r29, 0x3e	; 62
    static u8 Local_u8Flag = 0;
    static u16 Local_u16StartTime = 0;
    static u16 Local_u16StopTime = 0;

    if (Local_u8Flag == 0)
    1994:	80 91 a6 00 	lds	r24, 0x00A6
    1998:	88 23       	and	r24, r24
    199a:	09 f0       	breq	.+2      	; 0x199e <__vector_6+0x34>
    199c:	4d c0       	rjmp	.+154    	; 0x1a38 <__vector_6+0xce>
    {
        Local_u8Flag = 1;
    199e:	81 e0       	ldi	r24, 0x01	; 1
    19a0:	80 93 a6 00 	sts	0x00A6, r24
        TMR_u16TotalTime = ICR1 - Local_u16StartTime;
    19a4:	e6 e4       	ldi	r30, 0x46	; 70
    19a6:	f0 e0       	ldi	r31, 0x00	; 0
    19a8:	20 81       	ld	r18, Z
    19aa:	31 81       	ldd	r19, Z+1	; 0x01
    19ac:	80 91 a4 00 	lds	r24, 0x00A4
    19b0:	90 91 a5 00 	lds	r25, 0x00A5
    19b4:	a9 01       	movw	r20, r18
    19b6:	48 1b       	sub	r20, r24
    19b8:	59 0b       	sbc	r21, r25
    19ba:	ca 01       	movw	r24, r20
    19bc:	90 93 ad 00 	sts	0x00AD, r25
    19c0:	80 93 ac 00 	sts	0x00AC, r24
        TMR_u16ONTime = Local_u16StopTime - Local_u16StartTime;
    19c4:	20 91 a2 00 	lds	r18, 0x00A2
    19c8:	30 91 a3 00 	lds	r19, 0x00A3
    19cc:	80 91 a4 00 	lds	r24, 0x00A4
    19d0:	90 91 a5 00 	lds	r25, 0x00A5
    19d4:	a9 01       	movw	r20, r18
    19d6:	48 1b       	sub	r20, r24
    19d8:	59 0b       	sbc	r21, r25
    19da:	ca 01       	movw	r24, r20
    19dc:	90 93 ab 00 	sts	0x00AB, r25
    19e0:	80 93 aa 00 	sts	0x00AA, r24
        Local_u16StartTime = ICR1;
    19e4:	e6 e4       	ldi	r30, 0x46	; 70
    19e6:	f0 e0       	ldi	r31, 0x00	; 0
    19e8:	80 81       	ld	r24, Z
    19ea:	91 81       	ldd	r25, Z+1	; 0x01
    19ec:	90 93 a5 00 	sts	0x00A5, r25
    19f0:	80 93 a4 00 	sts	0x00A4, r24
        TMR_u16DutyCycle = ((TMR_u16ONTime * 100) / TMR_u16TotalTime);
    19f4:	20 91 aa 00 	lds	r18, 0x00AA
    19f8:	30 91 ab 00 	lds	r19, 0x00AB
    19fc:	84 e6       	ldi	r24, 0x64	; 100
    19fe:	90 e0       	ldi	r25, 0x00	; 0
    1a00:	ac 01       	movw	r20, r24
    1a02:	24 9f       	mul	r18, r20
    1a04:	c0 01       	movw	r24, r0
    1a06:	25 9f       	mul	r18, r21
    1a08:	90 0d       	add	r25, r0
    1a0a:	34 9f       	mul	r19, r20
    1a0c:	90 0d       	add	r25, r0
    1a0e:	11 24       	eor	r1, r1
    1a10:	20 91 ac 00 	lds	r18, 0x00AC
    1a14:	30 91 ad 00 	lds	r19, 0x00AD
    1a18:	b9 01       	movw	r22, r18
    1a1a:	0e 94 97 18 	call	0x312e	; 0x312e <__udivmodhi4>
    1a1e:	cb 01       	movw	r24, r22
    1a20:	90 93 af 00 	sts	0x00AF, r25
    1a24:	80 93 ae 00 	sts	0x00AE, r24
        CLR_BIT(TCCR1B, TCCR1B_ICES1); /*Sense Falling Edge */
    1a28:	ae e4       	ldi	r26, 0x4E	; 78
    1a2a:	b0 e0       	ldi	r27, 0x00	; 0
    1a2c:	ee e4       	ldi	r30, 0x4E	; 78
    1a2e:	f0 e0       	ldi	r31, 0x00	; 0
    1a30:	80 81       	ld	r24, Z
    1a32:	8f 7b       	andi	r24, 0xBF	; 191
    1a34:	8c 93       	st	X, r24
    1a36:	11 c0       	rjmp	.+34     	; 0x1a5a <__vector_6+0xf0>
    }
    else
    {
        Local_u8Flag = 0;
    1a38:	10 92 a6 00 	sts	0x00A6, r1
        Local_u16StopTime = ICR1;
    1a3c:	e6 e4       	ldi	r30, 0x46	; 70
    1a3e:	f0 e0       	ldi	r31, 0x00	; 0
    1a40:	80 81       	ld	r24, Z
    1a42:	91 81       	ldd	r25, Z+1	; 0x01
    1a44:	90 93 a3 00 	sts	0x00A3, r25
    1a48:	80 93 a2 00 	sts	0x00A2, r24
        SET_BIT(TCCR1B, TCCR1B_ICES1); /* Sense Raising Edge */
    1a4c:	ae e4       	ldi	r26, 0x4E	; 78
    1a4e:	b0 e0       	ldi	r27, 0x00	; 0
    1a50:	ee e4       	ldi	r30, 0x4E	; 78
    1a52:	f0 e0       	ldi	r31, 0x00	; 0
    1a54:	80 81       	ld	r24, Z
    1a56:	80 64       	ori	r24, 0x40	; 64
    1a58:	8c 93       	st	X, r24
    }
}
    1a5a:	cf 91       	pop	r28
    1a5c:	df 91       	pop	r29
    1a5e:	ff 91       	pop	r31
    1a60:	ef 91       	pop	r30
    1a62:	bf 91       	pop	r27
    1a64:	af 91       	pop	r26
    1a66:	9f 91       	pop	r25
    1a68:	8f 91       	pop	r24
    1a6a:	7f 91       	pop	r23
    1a6c:	6f 91       	pop	r22
    1a6e:	5f 91       	pop	r21
    1a70:	4f 91       	pop	r20
    1a72:	3f 91       	pop	r19
    1a74:	2f 91       	pop	r18
    1a76:	0f 90       	pop	r0
    1a78:	0f be       	out	0x3f, r0	; 63
    1a7a:	0f 90       	pop	r0
    1a7c:	1f 90       	pop	r1
    1a7e:	18 95       	reti

00001a80 <__vector_11>:

/*-----------------------------ISRs of Overflow timer interrupts----------------------------------*/

/*The ISR of Timer/Counter0 Overflow interrupt*/
void __vector_11()
{
    1a80:	1f 92       	push	r1
    1a82:	0f 92       	push	r0
    1a84:	0f b6       	in	r0, 0x3f	; 63
    1a86:	0f 92       	push	r0
    1a88:	11 24       	eor	r1, r1
    1a8a:	2f 93       	push	r18
    1a8c:	3f 93       	push	r19
    1a8e:	4f 93       	push	r20
    1a90:	5f 93       	push	r21
    1a92:	6f 93       	push	r22
    1a94:	7f 93       	push	r23
    1a96:	8f 93       	push	r24
    1a98:	9f 93       	push	r25
    1a9a:	af 93       	push	r26
    1a9c:	bf 93       	push	r27
    1a9e:	ef 93       	push	r30
    1aa0:	ff 93       	push	r31
    1aa2:	df 93       	push	r29
    1aa4:	cf 93       	push	r28
    1aa6:	cd b7       	in	r28, 0x3d	; 61
    1aa8:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER0] != NULL)
    1aaa:	80 91 9c 00 	lds	r24, 0x009C
    1aae:	90 91 9d 00 	lds	r25, 0x009D
    1ab2:	00 97       	sbiw	r24, 0x00	; 0
    1ab4:	21 f1       	breq	.+72     	; 0x1afe <__vector_11+0x7e>
    {
        TMR_u32Timer0Counter++;
    1ab6:	80 91 8c 00 	lds	r24, 0x008C
    1aba:	90 91 8d 00 	lds	r25, 0x008D
    1abe:	01 96       	adiw	r24, 0x01	; 1
    1ac0:	90 93 8d 00 	sts	0x008D, r25
    1ac4:	80 93 8c 00 	sts	0x008C, r24
        if (TMR_u32Timer0Counter == TMR_u32ReqTimer0Cntr)
    1ac8:	20 91 8c 00 	lds	r18, 0x008C
    1acc:	30 91 8d 00 	lds	r19, 0x008D
    1ad0:	80 91 98 00 	lds	r24, 0x0098
    1ad4:	90 91 99 00 	lds	r25, 0x0099
    1ad8:	28 17       	cp	r18, r24
    1ada:	39 07       	cpc	r19, r25
    1adc:	81 f4       	brne	.+32     	; 0x1afe <__vector_11+0x7e>
        {
            TMR_u32Timer0Counter = 0;
    1ade:	10 92 8d 00 	sts	0x008D, r1
    1ae2:	10 92 8c 00 	sts	0x008C, r1
            TCNT0 = TMR_u32Timer0Preload;
    1ae6:	e2 e5       	ldi	r30, 0x52	; 82
    1ae8:	f0 e0       	ldi	r31, 0x00	; 0
    1aea:	80 91 92 00 	lds	r24, 0x0092
    1aee:	90 91 93 00 	lds	r25, 0x0093
    1af2:	80 83       	st	Z, r24
            PVCallBack[TMR_TIMER0](); /*The ISR action*/
    1af4:	e0 91 9c 00 	lds	r30, 0x009C
    1af8:	f0 91 9d 00 	lds	r31, 0x009D
    1afc:	09 95       	icall
        }
    }
}
    1afe:	cf 91       	pop	r28
    1b00:	df 91       	pop	r29
    1b02:	ff 91       	pop	r31
    1b04:	ef 91       	pop	r30
    1b06:	bf 91       	pop	r27
    1b08:	af 91       	pop	r26
    1b0a:	9f 91       	pop	r25
    1b0c:	8f 91       	pop	r24
    1b0e:	7f 91       	pop	r23
    1b10:	6f 91       	pop	r22
    1b12:	5f 91       	pop	r21
    1b14:	4f 91       	pop	r20
    1b16:	3f 91       	pop	r19
    1b18:	2f 91       	pop	r18
    1b1a:	0f 90       	pop	r0
    1b1c:	0f be       	out	0x3f, r0	; 63
    1b1e:	0f 90       	pop	r0
    1b20:	1f 90       	pop	r1
    1b22:	18 95       	reti

00001b24 <__vector_9>:

/*The ISR of Timer/Counter1 Overflow interrupt*/
void __vector_9()
{
    1b24:	1f 92       	push	r1
    1b26:	0f 92       	push	r0
    1b28:	0f b6       	in	r0, 0x3f	; 63
    1b2a:	0f 92       	push	r0
    1b2c:	11 24       	eor	r1, r1
    1b2e:	2f 93       	push	r18
    1b30:	3f 93       	push	r19
    1b32:	4f 93       	push	r20
    1b34:	5f 93       	push	r21
    1b36:	6f 93       	push	r22
    1b38:	7f 93       	push	r23
    1b3a:	8f 93       	push	r24
    1b3c:	9f 93       	push	r25
    1b3e:	af 93       	push	r26
    1b40:	bf 93       	push	r27
    1b42:	ef 93       	push	r30
    1b44:	ff 93       	push	r31
    1b46:	df 93       	push	r29
    1b48:	cf 93       	push	r28
    1b4a:	cd b7       	in	r28, 0x3d	; 61
    1b4c:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER1] != NULL)
    1b4e:	80 91 9e 00 	lds	r24, 0x009E
    1b52:	90 91 9f 00 	lds	r25, 0x009F
    1b56:	00 97       	sbiw	r24, 0x00	; 0
    1b58:	69 f1       	breq	.+90     	; 0x1bb4 <__vector_9+0x90>
    {
        TMR_u32Timer1Counter++;
    1b5a:	80 91 8e 00 	lds	r24, 0x008E
    1b5e:	90 91 8f 00 	lds	r25, 0x008F
    1b62:	01 96       	adiw	r24, 0x01	; 1
    1b64:	90 93 8f 00 	sts	0x008F, r25
    1b68:	80 93 8e 00 	sts	0x008E, r24
        if (TMR_u32Timer1Counter == TMR_u32ReqTimer1Cntr)
    1b6c:	20 91 8e 00 	lds	r18, 0x008E
    1b70:	30 91 8f 00 	lds	r19, 0x008F
    1b74:	80 91 81 00 	lds	r24, 0x0081
    1b78:	90 91 82 00 	lds	r25, 0x0082
    1b7c:	28 17       	cp	r18, r24
    1b7e:	39 07       	cpc	r19, r25
    1b80:	c9 f4       	brne	.+50     	; 0x1bb4 <__vector_9+0x90>
        {
            TMR_u32Timer1Counter = 0;
    1b82:	10 92 8f 00 	sts	0x008F, r1
    1b86:	10 92 8e 00 	sts	0x008E, r1
            TCNT1H = TMR_u32Timer1Preload >> 8;
    1b8a:	ed e4       	ldi	r30, 0x4D	; 77
    1b8c:	f0 e0       	ldi	r31, 0x00	; 0
    1b8e:	80 91 94 00 	lds	r24, 0x0094
    1b92:	90 91 95 00 	lds	r25, 0x0095
    1b96:	89 2f       	mov	r24, r25
    1b98:	99 27       	eor	r25, r25
    1b9a:	80 83       	st	Z, r24
            TCNT1L = TMR_u32Timer1Preload;
    1b9c:	ec e4       	ldi	r30, 0x4C	; 76
    1b9e:	f0 e0       	ldi	r31, 0x00	; 0
    1ba0:	80 91 94 00 	lds	r24, 0x0094
    1ba4:	90 91 95 00 	lds	r25, 0x0095
    1ba8:	80 83       	st	Z, r24
            PVCallBack[TMR_TIMER1](); /*The ISR action*/
    1baa:	e0 91 9e 00 	lds	r30, 0x009E
    1bae:	f0 91 9f 00 	lds	r31, 0x009F
    1bb2:	09 95       	icall
        }
    }
    return;
}
    1bb4:	cf 91       	pop	r28
    1bb6:	df 91       	pop	r29
    1bb8:	ff 91       	pop	r31
    1bba:	ef 91       	pop	r30
    1bbc:	bf 91       	pop	r27
    1bbe:	af 91       	pop	r26
    1bc0:	9f 91       	pop	r25
    1bc2:	8f 91       	pop	r24
    1bc4:	7f 91       	pop	r23
    1bc6:	6f 91       	pop	r22
    1bc8:	5f 91       	pop	r21
    1bca:	4f 91       	pop	r20
    1bcc:	3f 91       	pop	r19
    1bce:	2f 91       	pop	r18
    1bd0:	0f 90       	pop	r0
    1bd2:	0f be       	out	0x3f, r0	; 63
    1bd4:	0f 90       	pop	r0
    1bd6:	1f 90       	pop	r1
    1bd8:	18 95       	reti

00001bda <__vector_5>:

/*The ISR of Timer/Counter2 Overflow interrupt*/
void __vector_5()
{
    1bda:	1f 92       	push	r1
    1bdc:	0f 92       	push	r0
    1bde:	0f b6       	in	r0, 0x3f	; 63
    1be0:	0f 92       	push	r0
    1be2:	11 24       	eor	r1, r1
    1be4:	2f 93       	push	r18
    1be6:	3f 93       	push	r19
    1be8:	4f 93       	push	r20
    1bea:	5f 93       	push	r21
    1bec:	6f 93       	push	r22
    1bee:	7f 93       	push	r23
    1bf0:	8f 93       	push	r24
    1bf2:	9f 93       	push	r25
    1bf4:	af 93       	push	r26
    1bf6:	bf 93       	push	r27
    1bf8:	ef 93       	push	r30
    1bfa:	ff 93       	push	r31
    1bfc:	df 93       	push	r29
    1bfe:	cf 93       	push	r28
    1c00:	cd b7       	in	r28, 0x3d	; 61
    1c02:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER2] != NULL)
    1c04:	80 91 a0 00 	lds	r24, 0x00A0
    1c08:	90 91 a1 00 	lds	r25, 0x00A1
    1c0c:	00 97       	sbiw	r24, 0x00	; 0
    1c0e:	21 f1       	breq	.+72     	; 0x1c58 <__vector_5+0x7e>
    {
        TMR_u32Timer2Counter++;
    1c10:	80 91 90 00 	lds	r24, 0x0090
    1c14:	90 91 91 00 	lds	r25, 0x0091
    1c18:	01 96       	adiw	r24, 0x01	; 1
    1c1a:	90 93 91 00 	sts	0x0091, r25
    1c1e:	80 93 90 00 	sts	0x0090, r24
        if (TMR_u32Timer2Counter == TMR_u32ReqTimer2Cntr)
    1c22:	20 91 90 00 	lds	r18, 0x0090
    1c26:	30 91 91 00 	lds	r19, 0x0091
    1c2a:	80 91 9a 00 	lds	r24, 0x009A
    1c2e:	90 91 9b 00 	lds	r25, 0x009B
    1c32:	28 17       	cp	r18, r24
    1c34:	39 07       	cpc	r19, r25
    1c36:	81 f4       	brne	.+32     	; 0x1c58 <__vector_5+0x7e>
        {
            TMR_u32Timer2Counter = 0;
    1c38:	10 92 91 00 	sts	0x0091, r1
    1c3c:	10 92 90 00 	sts	0x0090, r1
            TCNT2 = TMR_u32Timer2Preload;
    1c40:	e4 e4       	ldi	r30, 0x44	; 68
    1c42:	f0 e0       	ldi	r31, 0x00	; 0
    1c44:	80 91 96 00 	lds	r24, 0x0096
    1c48:	90 91 97 00 	lds	r25, 0x0097
    1c4c:	80 83       	st	Z, r24
            PVCallBack[TMR_TIMER2](); /*The ISR action*/
    1c4e:	e0 91 a0 00 	lds	r30, 0x00A0
    1c52:	f0 91 a1 00 	lds	r31, 0x00A1
    1c56:	09 95       	icall
        }
    }
    return;
}
    1c58:	cf 91       	pop	r28
    1c5a:	df 91       	pop	r29
    1c5c:	ff 91       	pop	r31
    1c5e:	ef 91       	pop	r30
    1c60:	bf 91       	pop	r27
    1c62:	af 91       	pop	r26
    1c64:	9f 91       	pop	r25
    1c66:	8f 91       	pop	r24
    1c68:	7f 91       	pop	r23
    1c6a:	6f 91       	pop	r22
    1c6c:	5f 91       	pop	r21
    1c6e:	4f 91       	pop	r20
    1c70:	3f 91       	pop	r19
    1c72:	2f 91       	pop	r18
    1c74:	0f 90       	pop	r0
    1c76:	0f be       	out	0x3f, r0	; 63
    1c78:	0f 90       	pop	r0
    1c7a:	1f 90       	pop	r1
    1c7c:	18 95       	reti

00001c7e <__vector_10>:

/*-----------------------------ISRs of Compare Match timer interrupts----------------------------------*/

/*The ISR of Timer/Counter0 Compare Match interrupt*/
void __vector_10()
{
    1c7e:	1f 92       	push	r1
    1c80:	0f 92       	push	r0
    1c82:	0f b6       	in	r0, 0x3f	; 63
    1c84:	0f 92       	push	r0
    1c86:	11 24       	eor	r1, r1
    1c88:	2f 93       	push	r18
    1c8a:	3f 93       	push	r19
    1c8c:	4f 93       	push	r20
    1c8e:	5f 93       	push	r21
    1c90:	6f 93       	push	r22
    1c92:	7f 93       	push	r23
    1c94:	8f 93       	push	r24
    1c96:	9f 93       	push	r25
    1c98:	af 93       	push	r26
    1c9a:	bf 93       	push	r27
    1c9c:	ef 93       	push	r30
    1c9e:	ff 93       	push	r31
    1ca0:	df 93       	push	r29
    1ca2:	cf 93       	push	r28
    1ca4:	cd b7       	in	r28, 0x3d	; 61
    1ca6:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER0] != NULL)
    1ca8:	80 91 9c 00 	lds	r24, 0x009C
    1cac:	90 91 9d 00 	lds	r25, 0x009D
    1cb0:	00 97       	sbiw	r24, 0x00	; 0
    1cb2:	e9 f0       	breq	.+58     	; 0x1cee <__vector_10+0x70>
    {
        TMR_u32Timer0Counter++;
    1cb4:	80 91 8c 00 	lds	r24, 0x008C
    1cb8:	90 91 8d 00 	lds	r25, 0x008D
    1cbc:	01 96       	adiw	r24, 0x01	; 1
    1cbe:	90 93 8d 00 	sts	0x008D, r25
    1cc2:	80 93 8c 00 	sts	0x008C, r24
        if (TMR_u32Timer0Counter == TMR_u32ReqTimer0Cntr)
    1cc6:	20 91 8c 00 	lds	r18, 0x008C
    1cca:	30 91 8d 00 	lds	r19, 0x008D
    1cce:	80 91 98 00 	lds	r24, 0x0098
    1cd2:	90 91 99 00 	lds	r25, 0x0099
    1cd6:	28 17       	cp	r18, r24
    1cd8:	39 07       	cpc	r19, r25
    1cda:	49 f4       	brne	.+18     	; 0x1cee <__vector_10+0x70>
        {
            TMR_u32Timer0Counter = 0;
    1cdc:	10 92 8d 00 	sts	0x008D, r1
    1ce0:	10 92 8c 00 	sts	0x008C, r1
            PVCallBack[TMR_TIMER0](); /*The ISR action*/
    1ce4:	e0 91 9c 00 	lds	r30, 0x009C
    1ce8:	f0 91 9d 00 	lds	r31, 0x009D
    1cec:	09 95       	icall
        }
    }
}
    1cee:	cf 91       	pop	r28
    1cf0:	df 91       	pop	r29
    1cf2:	ff 91       	pop	r31
    1cf4:	ef 91       	pop	r30
    1cf6:	bf 91       	pop	r27
    1cf8:	af 91       	pop	r26
    1cfa:	9f 91       	pop	r25
    1cfc:	8f 91       	pop	r24
    1cfe:	7f 91       	pop	r23
    1d00:	6f 91       	pop	r22
    1d02:	5f 91       	pop	r21
    1d04:	4f 91       	pop	r20
    1d06:	3f 91       	pop	r19
    1d08:	2f 91       	pop	r18
    1d0a:	0f 90       	pop	r0
    1d0c:	0f be       	out	0x3f, r0	; 63
    1d0e:	0f 90       	pop	r0
    1d10:	1f 90       	pop	r1
    1d12:	18 95       	reti

00001d14 <__vector_7>:

/*The ISR of Timer/Counter1 Compare Match A interrupt*/
void __vector_7()
{
    1d14:	1f 92       	push	r1
    1d16:	0f 92       	push	r0
    1d18:	0f b6       	in	r0, 0x3f	; 63
    1d1a:	0f 92       	push	r0
    1d1c:	11 24       	eor	r1, r1
    1d1e:	2f 93       	push	r18
    1d20:	3f 93       	push	r19
    1d22:	4f 93       	push	r20
    1d24:	5f 93       	push	r21
    1d26:	6f 93       	push	r22
    1d28:	7f 93       	push	r23
    1d2a:	8f 93       	push	r24
    1d2c:	9f 93       	push	r25
    1d2e:	af 93       	push	r26
    1d30:	bf 93       	push	r27
    1d32:	ef 93       	push	r30
    1d34:	ff 93       	push	r31
    1d36:	df 93       	push	r29
    1d38:	cf 93       	push	r28
    1d3a:	cd b7       	in	r28, 0x3d	; 61
    1d3c:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER1] != NULL)
    1d3e:	80 91 9e 00 	lds	r24, 0x009E
    1d42:	90 91 9f 00 	lds	r25, 0x009F
    1d46:	00 97       	sbiw	r24, 0x00	; 0
    1d48:	e9 f0       	breq	.+58     	; 0x1d84 <__vector_7+0x70>
    {
        TMR_u32Timer1Counter++;
    1d4a:	80 91 8e 00 	lds	r24, 0x008E
    1d4e:	90 91 8f 00 	lds	r25, 0x008F
    1d52:	01 96       	adiw	r24, 0x01	; 1
    1d54:	90 93 8f 00 	sts	0x008F, r25
    1d58:	80 93 8e 00 	sts	0x008E, r24
        if (TMR_u32Timer1Counter == TMR_u32ReqTimer1Cntr)
    1d5c:	20 91 8e 00 	lds	r18, 0x008E
    1d60:	30 91 8f 00 	lds	r19, 0x008F
    1d64:	80 91 81 00 	lds	r24, 0x0081
    1d68:	90 91 82 00 	lds	r25, 0x0082
    1d6c:	28 17       	cp	r18, r24
    1d6e:	39 07       	cpc	r19, r25
    1d70:	49 f4       	brne	.+18     	; 0x1d84 <__vector_7+0x70>
        {
            TMR_u32Timer1Counter = 0;
    1d72:	10 92 8f 00 	sts	0x008F, r1
    1d76:	10 92 8e 00 	sts	0x008E, r1
            PVCallBack[TMR_TIMER1](); /*The ISR action*/
    1d7a:	e0 91 9e 00 	lds	r30, 0x009E
    1d7e:	f0 91 9f 00 	lds	r31, 0x009F
    1d82:	09 95       	icall
        }
    }
}
    1d84:	cf 91       	pop	r28
    1d86:	df 91       	pop	r29
    1d88:	ff 91       	pop	r31
    1d8a:	ef 91       	pop	r30
    1d8c:	bf 91       	pop	r27
    1d8e:	af 91       	pop	r26
    1d90:	9f 91       	pop	r25
    1d92:	8f 91       	pop	r24
    1d94:	7f 91       	pop	r23
    1d96:	6f 91       	pop	r22
    1d98:	5f 91       	pop	r21
    1d9a:	4f 91       	pop	r20
    1d9c:	3f 91       	pop	r19
    1d9e:	2f 91       	pop	r18
    1da0:	0f 90       	pop	r0
    1da2:	0f be       	out	0x3f, r0	; 63
    1da4:	0f 90       	pop	r0
    1da6:	1f 90       	pop	r1
    1da8:	18 95       	reti

00001daa <__vector_8>:

/*The ISR of Timer/Counter1 Compare Match B interrupt*/
void __vector_8()
{
    1daa:	1f 92       	push	r1
    1dac:	0f 92       	push	r0
    1dae:	0f b6       	in	r0, 0x3f	; 63
    1db0:	0f 92       	push	r0
    1db2:	11 24       	eor	r1, r1
    1db4:	2f 93       	push	r18
    1db6:	3f 93       	push	r19
    1db8:	4f 93       	push	r20
    1dba:	5f 93       	push	r21
    1dbc:	6f 93       	push	r22
    1dbe:	7f 93       	push	r23
    1dc0:	8f 93       	push	r24
    1dc2:	9f 93       	push	r25
    1dc4:	af 93       	push	r26
    1dc6:	bf 93       	push	r27
    1dc8:	ef 93       	push	r30
    1dca:	ff 93       	push	r31
    1dcc:	df 93       	push	r29
    1dce:	cf 93       	push	r28
    1dd0:	cd b7       	in	r28, 0x3d	; 61
    1dd2:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER1] != NULL)
    1dd4:	80 91 9e 00 	lds	r24, 0x009E
    1dd8:	90 91 9f 00 	lds	r25, 0x009F
    1ddc:	00 97       	sbiw	r24, 0x00	; 0
    1dde:	e9 f0       	breq	.+58     	; 0x1e1a <__vector_8+0x70>
    {
        TMR_u32Timer1Counter++;
    1de0:	80 91 8e 00 	lds	r24, 0x008E
    1de4:	90 91 8f 00 	lds	r25, 0x008F
    1de8:	01 96       	adiw	r24, 0x01	; 1
    1dea:	90 93 8f 00 	sts	0x008F, r25
    1dee:	80 93 8e 00 	sts	0x008E, r24
        if (TMR_u32Timer1Counter == TMR_u32ReqTimer1Cntr)
    1df2:	20 91 8e 00 	lds	r18, 0x008E
    1df6:	30 91 8f 00 	lds	r19, 0x008F
    1dfa:	80 91 81 00 	lds	r24, 0x0081
    1dfe:	90 91 82 00 	lds	r25, 0x0082
    1e02:	28 17       	cp	r18, r24
    1e04:	39 07       	cpc	r19, r25
    1e06:	49 f4       	brne	.+18     	; 0x1e1a <__vector_8+0x70>
        {
            TMR_u32Timer1Counter = 0;
    1e08:	10 92 8f 00 	sts	0x008F, r1
    1e0c:	10 92 8e 00 	sts	0x008E, r1
            PVCallBack[TMR_TIMER1](); /*The ISR action*/
    1e10:	e0 91 9e 00 	lds	r30, 0x009E
    1e14:	f0 91 9f 00 	lds	r31, 0x009F
    1e18:	09 95       	icall
        }
    }
}
    1e1a:	cf 91       	pop	r28
    1e1c:	df 91       	pop	r29
    1e1e:	ff 91       	pop	r31
    1e20:	ef 91       	pop	r30
    1e22:	bf 91       	pop	r27
    1e24:	af 91       	pop	r26
    1e26:	9f 91       	pop	r25
    1e28:	8f 91       	pop	r24
    1e2a:	7f 91       	pop	r23
    1e2c:	6f 91       	pop	r22
    1e2e:	5f 91       	pop	r21
    1e30:	4f 91       	pop	r20
    1e32:	3f 91       	pop	r19
    1e34:	2f 91       	pop	r18
    1e36:	0f 90       	pop	r0
    1e38:	0f be       	out	0x3f, r0	; 63
    1e3a:	0f 90       	pop	r0
    1e3c:	1f 90       	pop	r1
    1e3e:	18 95       	reti

00001e40 <__vector_4>:

/*The ISR of Timer/Counter2 Compare Match interrupt*/
void __vector_4()
{
    1e40:	1f 92       	push	r1
    1e42:	0f 92       	push	r0
    1e44:	0f b6       	in	r0, 0x3f	; 63
    1e46:	0f 92       	push	r0
    1e48:	11 24       	eor	r1, r1
    1e4a:	2f 93       	push	r18
    1e4c:	3f 93       	push	r19
    1e4e:	4f 93       	push	r20
    1e50:	5f 93       	push	r21
    1e52:	6f 93       	push	r22
    1e54:	7f 93       	push	r23
    1e56:	8f 93       	push	r24
    1e58:	9f 93       	push	r25
    1e5a:	af 93       	push	r26
    1e5c:	bf 93       	push	r27
    1e5e:	ef 93       	push	r30
    1e60:	ff 93       	push	r31
    1e62:	df 93       	push	r29
    1e64:	cf 93       	push	r28
    1e66:	cd b7       	in	r28, 0x3d	; 61
    1e68:	de b7       	in	r29, 0x3e	; 62
    if (PVCallBack[TMR_TIMER2] != NULL)
    1e6a:	80 91 a0 00 	lds	r24, 0x00A0
    1e6e:	90 91 a1 00 	lds	r25, 0x00A1
    1e72:	00 97       	sbiw	r24, 0x00	; 0
    1e74:	e9 f0       	breq	.+58     	; 0x1eb0 <__vector_4+0x70>
    {
        TMR_u32Timer2Counter++;
    1e76:	80 91 90 00 	lds	r24, 0x0090
    1e7a:	90 91 91 00 	lds	r25, 0x0091
    1e7e:	01 96       	adiw	r24, 0x01	; 1
    1e80:	90 93 91 00 	sts	0x0091, r25
    1e84:	80 93 90 00 	sts	0x0090, r24
        if (TMR_u32Timer2Counter == TMR_u32ReqTimer2Cntr)
    1e88:	20 91 90 00 	lds	r18, 0x0090
    1e8c:	30 91 91 00 	lds	r19, 0x0091
    1e90:	80 91 9a 00 	lds	r24, 0x009A
    1e94:	90 91 9b 00 	lds	r25, 0x009B
    1e98:	28 17       	cp	r18, r24
    1e9a:	39 07       	cpc	r19, r25
    1e9c:	49 f4       	brne	.+18     	; 0x1eb0 <__vector_4+0x70>
        {
            TMR_u32Timer2Counter = 0;
    1e9e:	10 92 91 00 	sts	0x0091, r1
    1ea2:	10 92 90 00 	sts	0x0090, r1
            PVCallBack[TMR_TIMER2](); /*The ISR action*/
    1ea6:	e0 91 a0 00 	lds	r30, 0x00A0
    1eaa:	f0 91 a1 00 	lds	r31, 0x00A1
    1eae:	09 95       	icall
        }
    }
}
    1eb0:	cf 91       	pop	r28
    1eb2:	df 91       	pop	r29
    1eb4:	ff 91       	pop	r31
    1eb6:	ef 91       	pop	r30
    1eb8:	bf 91       	pop	r27
    1eba:	af 91       	pop	r26
    1ebc:	9f 91       	pop	r25
    1ebe:	8f 91       	pop	r24
    1ec0:	7f 91       	pop	r23
    1ec2:	6f 91       	pop	r22
    1ec4:	5f 91       	pop	r21
    1ec6:	4f 91       	pop	r20
    1ec8:	3f 91       	pop	r19
    1eca:	2f 91       	pop	r18
    1ecc:	0f 90       	pop	r0
    1ece:	0f be       	out	0x3f, r0	; 63
    1ed0:	0f 90       	pop	r0
    1ed2:	1f 90       	pop	r1
    1ed4:	18 95       	reti

00001ed6 <USART_VidInit>:
#include "USART_private.h"
#include "USART_interface.h"
#include "USART_config.h"

void USART_VidInit()
{
    1ed6:	df 93       	push	r29
    1ed8:	cf 93       	push	r28
    1eda:	cd b7       	in	r28, 0x3d	; 61
    1edc:	de b7       	in	r29, 0x3e	; 62
        break;
    }

#elif (USART_MODE == USART_DBL_SPD_MODE)

    SET_BIT(UCSRA, UCSRA_U2X);
    1ede:	ab e2       	ldi	r26, 0x2B	; 43
    1ee0:	b0 e0       	ldi	r27, 0x00	; 0
    1ee2:	eb e2       	ldi	r30, 0x2B	; 43
    1ee4:	f0 e0       	ldi	r31, 0x00	; 0
    1ee6:	80 81       	ld	r24, Z
    1ee8:	82 60       	ori	r24, 0x02	; 2
    1eea:	8c 93       	st	X, r24

    UBRRL = UBRR_Value2X;
    1eec:	e9 e2       	ldi	r30, 0x29	; 41
    1eee:	f0 e0       	ldi	r31, 0x00	; 0
    1ef0:	87 e6       	ldi	r24, 0x67	; 103
    1ef2:	80 83       	st	Z, r24
    UBRRH = (UBRR_Value2X >> 8);
    1ef4:	e0 e4       	ldi	r30, 0x40	; 64
    1ef6:	f0 e0       	ldi	r31, 0x00	; 0
    1ef8:	10 82       	st	Z, r1

    /* Checking the transmitter state */
    if (USART_TX_STATE == USART_ENABLE)
        SET_BIT(UCSRB, UCSRB_TXEN);
    1efa:	aa e2       	ldi	r26, 0x2A	; 42
    1efc:	b0 e0       	ldi	r27, 0x00	; 0
    1efe:	ea e2       	ldi	r30, 0x2A	; 42
    1f00:	f0 e0       	ldi	r31, 0x00	; 0
    1f02:	80 81       	ld	r24, Z
    1f04:	88 60       	ori	r24, 0x08	; 8
    1f06:	8c 93       	st	X, r24

    /* Checking the receiver state */
    if (USART_RX_STATE == USART_ENABLE)
        SET_BIT(UCSRB, UCSRB_RXEN);
    1f08:	aa e2       	ldi	r26, 0x2A	; 42
    1f0a:	b0 e0       	ldi	r27, 0x00	; 0
    1f0c:	ea e2       	ldi	r30, 0x2A	; 42
    1f0e:	f0 e0       	ldi	r31, 0x00	; 0
    1f10:	80 81       	ld	r24, Z
    1f12:	80 61       	ori	r24, 0x10	; 16
    1f14:	8c 93       	st	X, r24

        break;

    case USART_EIGHT_BITS:

        UCSRC |= (1 << UCSRC_URSEL) | (1 << UCSRC_UCSZ1) | (1 << UCSRC_UCSZ0);
    1f16:	a0 e4       	ldi	r26, 0x40	; 64
    1f18:	b0 e0       	ldi	r27, 0x00	; 0
    1f1a:	e0 e4       	ldi	r30, 0x40	; 64
    1f1c:	f0 e0       	ldi	r31, 0x00	; 0
    1f1e:	80 81       	ld	r24, Z
    1f20:	86 68       	ori	r24, 0x86	; 134
    1f22:	8c 93       	st	X, r24
        SET_BIT(UCSRB, UCSRB_UCSZ2);

        break;
    }
#endif
}
    1f24:	cf 91       	pop	r28
    1f26:	df 91       	pop	r29
    1f28:	08 95       	ret

00001f2a <USART_VidSendByte>:

void USART_VidSendByte(u8 Copy_u8Data)
{
    1f2a:	df 93       	push	r29
    1f2c:	cf 93       	push	r28
    1f2e:	0f 92       	push	r0
    1f30:	cd b7       	in	r28, 0x3d	; 61
    1f32:	de b7       	in	r29, 0x3e	; 62
    1f34:	89 83       	std	Y+1, r24	; 0x01
    /* Put data into buffer, sends the data */
    UDR = Copy_u8Data;
    1f36:	ec e2       	ldi	r30, 0x2C	; 44
    1f38:	f0 e0       	ldi	r31, 0x00	; 0
    1f3a:	89 81       	ldd	r24, Y+1	; 0x01
    1f3c:	80 83       	st	Z, r24

    while (GET_BIT(UCSRA, UCSRA_UDRE) == 0)
    1f3e:	eb e2       	ldi	r30, 0x2B	; 43
    1f40:	f0 e0       	ldi	r31, 0x00	; 0
    1f42:	80 81       	ld	r24, Z
    1f44:	82 95       	swap	r24
    1f46:	86 95       	lsr	r24
    1f48:	87 70       	andi	r24, 0x07	; 7
    1f4a:	88 2f       	mov	r24, r24
    1f4c:	90 e0       	ldi	r25, 0x00	; 0
    1f4e:	81 70       	andi	r24, 0x01	; 1
    1f50:	90 70       	andi	r25, 0x00	; 0
    1f52:	00 97       	sbiw	r24, 0x00	; 0
    1f54:	a1 f3       	breq	.-24     	; 0x1f3e <USART_VidSendByte+0x14>
        ;
}
    1f56:	0f 90       	pop	r0
    1f58:	cf 91       	pop	r28
    1f5a:	df 91       	pop	r29
    1f5c:	08 95       	ret

00001f5e <USART_u8ReceiveByte>:

u8 USART_u8ReceiveByte()
{
    1f5e:	df 93       	push	r29
    1f60:	cf 93       	push	r28
    1f62:	cd b7       	in	r28, 0x3d	; 61
    1f64:	de b7       	in	r29, 0x3e	; 62
    while (GET_BIT(UCSRA, UCSRA_RXC) == 0)
    1f66:	eb e2       	ldi	r30, 0x2B	; 43
    1f68:	f0 e0       	ldi	r31, 0x00	; 0
    1f6a:	80 81       	ld	r24, Z
    1f6c:	88 23       	and	r24, r24
    1f6e:	dc f7       	brge	.-10     	; 0x1f66 <USART_u8ReceiveByte+0x8>
        ;
    return UDR;
    1f70:	ec e2       	ldi	r30, 0x2C	; 44
    1f72:	f0 e0       	ldi	r31, 0x00	; 0
    1f74:	80 81       	ld	r24, Z
}
    1f76:	cf 91       	pop	r28
    1f78:	df 91       	pop	r29
    1f7a:	08 95       	ret

00001f7c <USART_VidSendString>:

void USART_VidSendString(u8 *Copy_u8String)
{
    1f7c:	df 93       	push	r29
    1f7e:	cf 93       	push	r28
    1f80:	00 d0       	rcall	.+0      	; 0x1f82 <USART_VidSendString+0x6>
    1f82:	cd b7       	in	r28, 0x3d	; 61
    1f84:	de b7       	in	r29, 0x3e	; 62
    1f86:	9a 83       	std	Y+2, r25	; 0x02
    1f88:	89 83       	std	Y+1, r24	; 0x01
    1f8a:	0a c0       	rjmp	.+20     	; 0x1fa0 <USART_VidSendString+0x24>
    while (*Copy_u8String != '\0')
    {
        USART_VidSendByte(*Copy_u8String);
    1f8c:	e9 81       	ldd	r30, Y+1	; 0x01
    1f8e:	fa 81       	ldd	r31, Y+2	; 0x02
    1f90:	80 81       	ld	r24, Z
    1f92:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <USART_VidSendByte>
        Copy_u8String++;
    1f96:	89 81       	ldd	r24, Y+1	; 0x01
    1f98:	9a 81       	ldd	r25, Y+2	; 0x02
    1f9a:	01 96       	adiw	r24, 0x01	; 1
    1f9c:	9a 83       	std	Y+2, r25	; 0x02
    1f9e:	89 83       	std	Y+1, r24	; 0x01
    return UDR;
}

void USART_VidSendString(u8 *Copy_u8String)
{
    while (*Copy_u8String != '\0')
    1fa0:	e9 81       	ldd	r30, Y+1	; 0x01
    1fa2:	fa 81       	ldd	r31, Y+2	; 0x02
    1fa4:	80 81       	ld	r24, Z
    1fa6:	88 23       	and	r24, r24
    1fa8:	89 f7       	brne	.-30     	; 0x1f8c <USART_VidSendString+0x10>
    {
        USART_VidSendByte(*Copy_u8String);
        Copy_u8String++;
    }
}
    1faa:	0f 90       	pop	r0
    1fac:	0f 90       	pop	r0
    1fae:	cf 91       	pop	r28
    1fb0:	df 91       	pop	r29
    1fb2:	08 95       	ret

00001fb4 <USART_VidReceiveString>:

void USART_VidReceiveString(u8 *Copy_u8String)
{
    1fb4:	0f 93       	push	r16
    1fb6:	1f 93       	push	r17
    1fb8:	df 93       	push	r29
    1fba:	cf 93       	push	r28
    1fbc:	00 d0       	rcall	.+0      	; 0x1fbe <USART_VidReceiveString+0xa>
    1fbe:	0f 92       	push	r0
    1fc0:	cd b7       	in	r28, 0x3d	; 61
    1fc2:	de b7       	in	r29, 0x3e	; 62
    1fc4:	9b 83       	std	Y+3, r25	; 0x03
    1fc6:	8a 83       	std	Y+2, r24	; 0x02
    u8 i = 0;
    1fc8:	19 82       	std	Y+1, r1	; 0x01
    Copy_u8String[i] = USART_u8ReceiveByte();
    1fca:	89 81       	ldd	r24, Y+1	; 0x01
    1fcc:	28 2f       	mov	r18, r24
    1fce:	30 e0       	ldi	r19, 0x00	; 0
    1fd0:	8a 81       	ldd	r24, Y+2	; 0x02
    1fd2:	9b 81       	ldd	r25, Y+3	; 0x03
    1fd4:	8c 01       	movw	r16, r24
    1fd6:	02 0f       	add	r16, r18
    1fd8:	13 1f       	adc	r17, r19
    1fda:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <USART_u8ReceiveByte>
    1fde:	f8 01       	movw	r30, r16
    1fe0:	80 83       	st	Z, r24
    USART_VidSendByte(Copy_u8String[i]);
    1fe2:	89 81       	ldd	r24, Y+1	; 0x01
    1fe4:	28 2f       	mov	r18, r24
    1fe6:	30 e0       	ldi	r19, 0x00	; 0
    1fe8:	8a 81       	ldd	r24, Y+2	; 0x02
    1fea:	9b 81       	ldd	r25, Y+3	; 0x03
    1fec:	fc 01       	movw	r30, r24
    1fee:	e2 0f       	add	r30, r18
    1ff0:	f3 1f       	adc	r31, r19
    1ff2:	80 81       	ld	r24, Z
    1ff4:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <USART_VidSendByte>
    1ff8:	1a c0       	rjmp	.+52     	; 0x202e <USART_VidReceiveString+0x7a>
    while (Copy_u8String[i] != '\r')
    {
        i++;
    1ffa:	89 81       	ldd	r24, Y+1	; 0x01
    1ffc:	8f 5f       	subi	r24, 0xFF	; 255
    1ffe:	89 83       	std	Y+1, r24	; 0x01
        Copy_u8String[i] = USART_u8ReceiveByte();
    2000:	89 81       	ldd	r24, Y+1	; 0x01
    2002:	28 2f       	mov	r18, r24
    2004:	30 e0       	ldi	r19, 0x00	; 0
    2006:	8a 81       	ldd	r24, Y+2	; 0x02
    2008:	9b 81       	ldd	r25, Y+3	; 0x03
    200a:	8c 01       	movw	r16, r24
    200c:	02 0f       	add	r16, r18
    200e:	13 1f       	adc	r17, r19
    2010:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <USART_u8ReceiveByte>
    2014:	f8 01       	movw	r30, r16
    2016:	80 83       	st	Z, r24
        USART_VidSendByte(Copy_u8String[i]);
    2018:	89 81       	ldd	r24, Y+1	; 0x01
    201a:	28 2f       	mov	r18, r24
    201c:	30 e0       	ldi	r19, 0x00	; 0
    201e:	8a 81       	ldd	r24, Y+2	; 0x02
    2020:	9b 81       	ldd	r25, Y+3	; 0x03
    2022:	fc 01       	movw	r30, r24
    2024:	e2 0f       	add	r30, r18
    2026:	f3 1f       	adc	r31, r19
    2028:	80 81       	ld	r24, Z
    202a:	0e 94 95 0f 	call	0x1f2a	; 0x1f2a <USART_VidSendByte>
void USART_VidReceiveString(u8 *Copy_u8String)
{
    u8 i = 0;
    Copy_u8String[i] = USART_u8ReceiveByte();
    USART_VidSendByte(Copy_u8String[i]);
    while (Copy_u8String[i] != '\r')
    202e:	89 81       	ldd	r24, Y+1	; 0x01
    2030:	28 2f       	mov	r18, r24
    2032:	30 e0       	ldi	r19, 0x00	; 0
    2034:	8a 81       	ldd	r24, Y+2	; 0x02
    2036:	9b 81       	ldd	r25, Y+3	; 0x03
    2038:	fc 01       	movw	r30, r24
    203a:	e2 0f       	add	r30, r18
    203c:	f3 1f       	adc	r31, r19
    203e:	80 81       	ld	r24, Z
    2040:	8d 30       	cpi	r24, 0x0D	; 13
    2042:	d9 f6       	brne	.-74     	; 0x1ffa <USART_VidReceiveString+0x46>
    {
        i++;
        Copy_u8String[i] = USART_u8ReceiveByte();
        USART_VidSendByte(Copy_u8String[i]);
    }
    Copy_u8String[i] = '\0';
    2044:	89 81       	ldd	r24, Y+1	; 0x01
    2046:	28 2f       	mov	r18, r24
    2048:	30 e0       	ldi	r19, 0x00	; 0
    204a:	8a 81       	ldd	r24, Y+2	; 0x02
    204c:	9b 81       	ldd	r25, Y+3	; 0x03
    204e:	fc 01       	movw	r30, r24
    2050:	e2 0f       	add	r30, r18
    2052:	f3 1f       	adc	r31, r19
    2054:	10 82       	st	Z, r1
}
    2056:	0f 90       	pop	r0
    2058:	0f 90       	pop	r0
    205a:	0f 90       	pop	r0
    205c:	cf 91       	pop	r28
    205e:	df 91       	pop	r29
    2060:	1f 91       	pop	r17
    2062:	0f 91       	pop	r16
    2064:	08 95       	ret

00002066 <CLCD_VidSendCommand>:
#include "../MCAL/DIO_interface.h"
#include "CLCD_config.h"
#include <util/delay.h>

void CLCD_VidSendCommand(u8 Copy_u8Command) //Function to send commands to CLCD
{
    2066:	df 93       	push	r29
    2068:	cf 93       	push	r28
    206a:	cd b7       	in	r28, 0x3d	; 61
    206c:	de b7       	in	r29, 0x3e	; 62
    206e:	2f 97       	sbiw	r28, 0x0f	; 15
    2070:	0f b6       	in	r0, 0x3f	; 63
    2072:	f8 94       	cli
    2074:	de bf       	out	0x3e, r29	; 62
    2076:	0f be       	out	0x3f, r0	; 63
    2078:	cd bf       	out	0x3d, r28	; 61
    207a:	8f 87       	std	Y+15, r24	; 0x0f
    //Set RS pin as low
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, low);
    207c:	83 e0       	ldi	r24, 0x03	; 3
    207e:	60 e0       	ldi	r22, 0x00	; 0
    2080:	40 e0       	ldi	r20, 0x00	; 0
    2082:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinValue>

    //Set RW pin as low to write
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, low);
    2086:	83 e0       	ldi	r24, 0x03	; 3
    2088:	61 e0       	ldi	r22, 0x01	; 1
    208a:	40 e0       	ldi	r20, 0x00	; 0
    208c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinValue>

    //Send command to data port (pins 0 - 7)
    DIO_VidSetPortValue(CLCD_DATA_PORT, Copy_u8Command);
    2090:	81 e0       	ldi	r24, 0x01	; 1
    2092:	6f 85       	ldd	r22, Y+15	; 0x0f
    2094:	0e 94 d7 08 	call	0x11ae	; 0x11ae <DIO_VidSetPortValue>

    //Set Enable pin
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, high);
    2098:	83 e0       	ldi	r24, 0x03	; 3
    209a:	62 e0       	ldi	r22, 0x02	; 2
    209c:	41 e0       	ldi	r20, 0x01	; 1
    209e:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinValue>
    20a2:	80 e0       	ldi	r24, 0x00	; 0
    20a4:	90 e0       	ldi	r25, 0x00	; 0
    20a6:	a0 e0       	ldi	r26, 0x00	; 0
    20a8:	b0 e4       	ldi	r27, 0x40	; 64
    20aa:	8b 87       	std	Y+11, r24	; 0x0b
    20ac:	9c 87       	std	Y+12, r25	; 0x0c
    20ae:	ad 87       	std	Y+13, r26	; 0x0d
    20b0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    20b2:	6b 85       	ldd	r22, Y+11	; 0x0b
    20b4:	7c 85       	ldd	r23, Y+12	; 0x0c
    20b6:	8d 85       	ldd	r24, Y+13	; 0x0d
    20b8:	9e 85       	ldd	r25, Y+14	; 0x0e
    20ba:	20 e0       	ldi	r18, 0x00	; 0
    20bc:	30 e0       	ldi	r19, 0x00	; 0
    20be:	4a ef       	ldi	r20, 0xFA	; 250
    20c0:	54 e4       	ldi	r21, 0x44	; 68
    20c2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    20c6:	dc 01       	movw	r26, r24
    20c8:	cb 01       	movw	r24, r22
    20ca:	8f 83       	std	Y+7, r24	; 0x07
    20cc:	98 87       	std	Y+8, r25	; 0x08
    20ce:	a9 87       	std	Y+9, r26	; 0x09
    20d0:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    20d2:	6f 81       	ldd	r22, Y+7	; 0x07
    20d4:	78 85       	ldd	r23, Y+8	; 0x08
    20d6:	89 85       	ldd	r24, Y+9	; 0x09
    20d8:	9a 85       	ldd	r25, Y+10	; 0x0a
    20da:	20 e0       	ldi	r18, 0x00	; 0
    20dc:	30 e0       	ldi	r19, 0x00	; 0
    20de:	40 e8       	ldi	r20, 0x80	; 128
    20e0:	5f e3       	ldi	r21, 0x3F	; 63
    20e2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    20e6:	88 23       	and	r24, r24
    20e8:	2c f4       	brge	.+10     	; 0x20f4 <CLCD_VidSendCommand+0x8e>
		__ticks = 1;
    20ea:	81 e0       	ldi	r24, 0x01	; 1
    20ec:	90 e0       	ldi	r25, 0x00	; 0
    20ee:	9e 83       	std	Y+6, r25	; 0x06
    20f0:	8d 83       	std	Y+5, r24	; 0x05
    20f2:	3f c0       	rjmp	.+126    	; 0x2172 <CLCD_VidSendCommand+0x10c>
	else if (__tmp > 65535)
    20f4:	6f 81       	ldd	r22, Y+7	; 0x07
    20f6:	78 85       	ldd	r23, Y+8	; 0x08
    20f8:	89 85       	ldd	r24, Y+9	; 0x09
    20fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	3f ef       	ldi	r19, 0xFF	; 255
    2100:	4f e7       	ldi	r20, 0x7F	; 127
    2102:	57 e4       	ldi	r21, 0x47	; 71
    2104:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2108:	18 16       	cp	r1, r24
    210a:	4c f5       	brge	.+82     	; 0x215e <CLCD_VidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    210c:	6b 85       	ldd	r22, Y+11	; 0x0b
    210e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2110:	8d 85       	ldd	r24, Y+13	; 0x0d
    2112:	9e 85       	ldd	r25, Y+14	; 0x0e
    2114:	20 e0       	ldi	r18, 0x00	; 0
    2116:	30 e0       	ldi	r19, 0x00	; 0
    2118:	40 e2       	ldi	r20, 0x20	; 32
    211a:	51 e4       	ldi	r21, 0x41	; 65
    211c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2120:	dc 01       	movw	r26, r24
    2122:	cb 01       	movw	r24, r22
    2124:	bc 01       	movw	r22, r24
    2126:	cd 01       	movw	r24, r26
    2128:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    212c:	dc 01       	movw	r26, r24
    212e:	cb 01       	movw	r24, r22
    2130:	9e 83       	std	Y+6, r25	; 0x06
    2132:	8d 83       	std	Y+5, r24	; 0x05
    2134:	0f c0       	rjmp	.+30     	; 0x2154 <CLCD_VidSendCommand+0xee>
    2136:	88 ec       	ldi	r24, 0xC8	; 200
    2138:	90 e0       	ldi	r25, 0x00	; 0
    213a:	9c 83       	std	Y+4, r25	; 0x04
    213c:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    213e:	8b 81       	ldd	r24, Y+3	; 0x03
    2140:	9c 81       	ldd	r25, Y+4	; 0x04
    2142:	01 97       	sbiw	r24, 0x01	; 1
    2144:	f1 f7       	brne	.-4      	; 0x2142 <CLCD_VidSendCommand+0xdc>
    2146:	9c 83       	std	Y+4, r25	; 0x04
    2148:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214a:	8d 81       	ldd	r24, Y+5	; 0x05
    214c:	9e 81       	ldd	r25, Y+6	; 0x06
    214e:	01 97       	sbiw	r24, 0x01	; 1
    2150:	9e 83       	std	Y+6, r25	; 0x06
    2152:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2154:	8d 81       	ldd	r24, Y+5	; 0x05
    2156:	9e 81       	ldd	r25, Y+6	; 0x06
    2158:	00 97       	sbiw	r24, 0x00	; 0
    215a:	69 f7       	brne	.-38     	; 0x2136 <CLCD_VidSendCommand+0xd0>
    215c:	14 c0       	rjmp	.+40     	; 0x2186 <CLCD_VidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    215e:	6f 81       	ldd	r22, Y+7	; 0x07
    2160:	78 85       	ldd	r23, Y+8	; 0x08
    2162:	89 85       	ldd	r24, Y+9	; 0x09
    2164:	9a 85       	ldd	r25, Y+10	; 0x0a
    2166:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    216a:	dc 01       	movw	r26, r24
    216c:	cb 01       	movw	r24, r22
    216e:	9e 83       	std	Y+6, r25	; 0x06
    2170:	8d 83       	std	Y+5, r24	; 0x05
    2172:	8d 81       	ldd	r24, Y+5	; 0x05
    2174:	9e 81       	ldd	r25, Y+6	; 0x06
    2176:	9a 83       	std	Y+2, r25	; 0x02
    2178:	89 83       	std	Y+1, r24	; 0x01
    217a:	89 81       	ldd	r24, Y+1	; 0x01
    217c:	9a 81       	ldd	r25, Y+2	; 0x02
    217e:	01 97       	sbiw	r24, 0x01	; 1
    2180:	f1 f7       	brne	.-4      	; 0x217e <CLCD_VidSendCommand+0x118>
    2182:	9a 83       	std	Y+2, r25	; 0x02
    2184:	89 83       	std	Y+1, r24	; 0x01

    //Delay
    _delay_ms(2);

    //Clearing Enable pin
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, low);
    2186:	83 e0       	ldi	r24, 0x03	; 3
    2188:	62 e0       	ldi	r22, 0x02	; 2
    218a:	40 e0       	ldi	r20, 0x00	; 0
    218c:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinValue>
}
    2190:	2f 96       	adiw	r28, 0x0f	; 15
    2192:	0f b6       	in	r0, 0x3f	; 63
    2194:	f8 94       	cli
    2196:	de bf       	out	0x3e, r29	; 62
    2198:	0f be       	out	0x3f, r0	; 63
    219a:	cd bf       	out	0x3d, r28	; 61
    219c:	cf 91       	pop	r28
    219e:	df 91       	pop	r29
    21a0:	08 95       	ret

000021a2 <CLCD_VidSendData>:

void CLCD_VidSendData(u8 Copy_u8Data) //Function to send data to CLCD
{
    21a2:	df 93       	push	r29
    21a4:	cf 93       	push	r28
    21a6:	cd b7       	in	r28, 0x3d	; 61
    21a8:	de b7       	in	r29, 0x3e	; 62
    21aa:	2f 97       	sbiw	r28, 0x0f	; 15
    21ac:	0f b6       	in	r0, 0x3f	; 63
    21ae:	f8 94       	cli
    21b0:	de bf       	out	0x3e, r29	; 62
    21b2:	0f be       	out	0x3f, r0	; 63
    21b4:	cd bf       	out	0x3d, r28	; 61
    21b6:	8f 87       	std	Y+15, r24	; 0x0f
    //Set RS pin as high
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RS_PIN, high);
    21b8:	83 e0       	ldi	r24, 0x03	; 3
    21ba:	60 e0       	ldi	r22, 0x00	; 0
    21bc:	41 e0       	ldi	r20, 0x01	; 1
    21be:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinValue>

    //Set RW pin as low to write
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_RW_PIN, low);
    21c2:	83 e0       	ldi	r24, 0x03	; 3
    21c4:	61 e0       	ldi	r22, 0x01	; 1
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinValue>

    //Send data to data port (pins 0 - 7)
    DIO_VidSetPortValue(CLCD_DATA_PORT, Copy_u8Data);
    21cc:	81 e0       	ldi	r24, 0x01	; 1
    21ce:	6f 85       	ldd	r22, Y+15	; 0x0f
    21d0:	0e 94 d7 08 	call	0x11ae	; 0x11ae <DIO_VidSetPortValue>

    //Set Enable pin
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, high);
    21d4:	83 e0       	ldi	r24, 0x03	; 3
    21d6:	62 e0       	ldi	r22, 0x02	; 2
    21d8:	41 e0       	ldi	r20, 0x01	; 1
    21da:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinValue>
    21de:	80 e0       	ldi	r24, 0x00	; 0
    21e0:	90 e0       	ldi	r25, 0x00	; 0
    21e2:	a0 e0       	ldi	r26, 0x00	; 0
    21e4:	b0 e4       	ldi	r27, 0x40	; 64
    21e6:	8b 87       	std	Y+11, r24	; 0x0b
    21e8:	9c 87       	std	Y+12, r25	; 0x0c
    21ea:	ad 87       	std	Y+13, r26	; 0x0d
    21ec:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21ee:	6b 85       	ldd	r22, Y+11	; 0x0b
    21f0:	7c 85       	ldd	r23, Y+12	; 0x0c
    21f2:	8d 85       	ldd	r24, Y+13	; 0x0d
    21f4:	9e 85       	ldd	r25, Y+14	; 0x0e
    21f6:	20 e0       	ldi	r18, 0x00	; 0
    21f8:	30 e0       	ldi	r19, 0x00	; 0
    21fa:	4a ef       	ldi	r20, 0xFA	; 250
    21fc:	54 e4       	ldi	r21, 0x44	; 68
    21fe:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2202:	dc 01       	movw	r26, r24
    2204:	cb 01       	movw	r24, r22
    2206:	8f 83       	std	Y+7, r24	; 0x07
    2208:	98 87       	std	Y+8, r25	; 0x08
    220a:	a9 87       	std	Y+9, r26	; 0x09
    220c:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    220e:	6f 81       	ldd	r22, Y+7	; 0x07
    2210:	78 85       	ldd	r23, Y+8	; 0x08
    2212:	89 85       	ldd	r24, Y+9	; 0x09
    2214:	9a 85       	ldd	r25, Y+10	; 0x0a
    2216:	20 e0       	ldi	r18, 0x00	; 0
    2218:	30 e0       	ldi	r19, 0x00	; 0
    221a:	40 e8       	ldi	r20, 0x80	; 128
    221c:	5f e3       	ldi	r21, 0x3F	; 63
    221e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2222:	88 23       	and	r24, r24
    2224:	2c f4       	brge	.+10     	; 0x2230 <CLCD_VidSendData+0x8e>
		__ticks = 1;
    2226:	81 e0       	ldi	r24, 0x01	; 1
    2228:	90 e0       	ldi	r25, 0x00	; 0
    222a:	9e 83       	std	Y+6, r25	; 0x06
    222c:	8d 83       	std	Y+5, r24	; 0x05
    222e:	3f c0       	rjmp	.+126    	; 0x22ae <CLCD_VidSendData+0x10c>
	else if (__tmp > 65535)
    2230:	6f 81       	ldd	r22, Y+7	; 0x07
    2232:	78 85       	ldd	r23, Y+8	; 0x08
    2234:	89 85       	ldd	r24, Y+9	; 0x09
    2236:	9a 85       	ldd	r25, Y+10	; 0x0a
    2238:	20 e0       	ldi	r18, 0x00	; 0
    223a:	3f ef       	ldi	r19, 0xFF	; 255
    223c:	4f e7       	ldi	r20, 0x7F	; 127
    223e:	57 e4       	ldi	r21, 0x47	; 71
    2240:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2244:	18 16       	cp	r1, r24
    2246:	4c f5       	brge	.+82     	; 0x229a <CLCD_VidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2248:	6b 85       	ldd	r22, Y+11	; 0x0b
    224a:	7c 85       	ldd	r23, Y+12	; 0x0c
    224c:	8d 85       	ldd	r24, Y+13	; 0x0d
    224e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2250:	20 e0       	ldi	r18, 0x00	; 0
    2252:	30 e0       	ldi	r19, 0x00	; 0
    2254:	40 e2       	ldi	r20, 0x20	; 32
    2256:	51 e4       	ldi	r21, 0x41	; 65
    2258:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    225c:	dc 01       	movw	r26, r24
    225e:	cb 01       	movw	r24, r22
    2260:	bc 01       	movw	r22, r24
    2262:	cd 01       	movw	r24, r26
    2264:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2268:	dc 01       	movw	r26, r24
    226a:	cb 01       	movw	r24, r22
    226c:	9e 83       	std	Y+6, r25	; 0x06
    226e:	8d 83       	std	Y+5, r24	; 0x05
    2270:	0f c0       	rjmp	.+30     	; 0x2290 <CLCD_VidSendData+0xee>
    2272:	88 ec       	ldi	r24, 0xC8	; 200
    2274:	90 e0       	ldi	r25, 0x00	; 0
    2276:	9c 83       	std	Y+4, r25	; 0x04
    2278:	8b 83       	std	Y+3, r24	; 0x03
    227a:	8b 81       	ldd	r24, Y+3	; 0x03
    227c:	9c 81       	ldd	r25, Y+4	; 0x04
    227e:	01 97       	sbiw	r24, 0x01	; 1
    2280:	f1 f7       	brne	.-4      	; 0x227e <CLCD_VidSendData+0xdc>
    2282:	9c 83       	std	Y+4, r25	; 0x04
    2284:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2286:	8d 81       	ldd	r24, Y+5	; 0x05
    2288:	9e 81       	ldd	r25, Y+6	; 0x06
    228a:	01 97       	sbiw	r24, 0x01	; 1
    228c:	9e 83       	std	Y+6, r25	; 0x06
    228e:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2290:	8d 81       	ldd	r24, Y+5	; 0x05
    2292:	9e 81       	ldd	r25, Y+6	; 0x06
    2294:	00 97       	sbiw	r24, 0x00	; 0
    2296:	69 f7       	brne	.-38     	; 0x2272 <CLCD_VidSendData+0xd0>
    2298:	14 c0       	rjmp	.+40     	; 0x22c2 <CLCD_VidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    229a:	6f 81       	ldd	r22, Y+7	; 0x07
    229c:	78 85       	ldd	r23, Y+8	; 0x08
    229e:	89 85       	ldd	r24, Y+9	; 0x09
    22a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    22a2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a6:	dc 01       	movw	r26, r24
    22a8:	cb 01       	movw	r24, r22
    22aa:	9e 83       	std	Y+6, r25	; 0x06
    22ac:	8d 83       	std	Y+5, r24	; 0x05
    22ae:	8d 81       	ldd	r24, Y+5	; 0x05
    22b0:	9e 81       	ldd	r25, Y+6	; 0x06
    22b2:	9a 83       	std	Y+2, r25	; 0x02
    22b4:	89 83       	std	Y+1, r24	; 0x01
    22b6:	89 81       	ldd	r24, Y+1	; 0x01
    22b8:	9a 81       	ldd	r25, Y+2	; 0x02
    22ba:	01 97       	sbiw	r24, 0x01	; 1
    22bc:	f1 f7       	brne	.-4      	; 0x22ba <CLCD_VidSendData+0x118>
    22be:	9a 83       	std	Y+2, r25	; 0x02
    22c0:	89 83       	std	Y+1, r24	; 0x01

    //Delay
    _delay_ms(2);

    //Clearing Enable pin
    DIO_VidSetPinValue(CLCD_CTRL_PORT, CLCD_EN_PIN, low);
    22c2:	83 e0       	ldi	r24, 0x03	; 3
    22c4:	62 e0       	ldi	r22, 0x02	; 2
    22c6:	40 e0       	ldi	r20, 0x00	; 0
    22c8:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinValue>
}
    22cc:	2f 96       	adiw	r28, 0x0f	; 15
    22ce:	0f b6       	in	r0, 0x3f	; 63
    22d0:	f8 94       	cli
    22d2:	de bf       	out	0x3e, r29	; 62
    22d4:	0f be       	out	0x3f, r0	; 63
    22d6:	cd bf       	out	0x3d, r28	; 61
    22d8:	cf 91       	pop	r28
    22da:	df 91       	pop	r29
    22dc:	08 95       	ret

000022de <CLCD_VidInit>:

void CLCD_VidInit() //Function to initialize CLCD
{
    22de:	0f 93       	push	r16
    22e0:	1f 93       	push	r17
    22e2:	df 93       	push	r29
    22e4:	cf 93       	push	r28
    22e6:	cd b7       	in	r28, 0x3d	; 61
    22e8:	de b7       	in	r29, 0x3e	; 62
    22ea:	cc 54       	subi	r28, 0x4C	; 76
    22ec:	d0 40       	sbci	r29, 0x00	; 0
    22ee:	0f b6       	in	r0, 0x3f	; 63
    22f0:	f8 94       	cli
    22f2:	de bf       	out	0x3e, r29	; 62
    22f4:	0f be       	out	0x3f, r0	; 63
    22f6:	cd bf       	out	0x3d, r28	; 61
    22f8:	fe 01       	movw	r30, r28
    22fa:	e7 5b       	subi	r30, 0xB7	; 183
    22fc:	ff 4f       	sbci	r31, 0xFF	; 255
    22fe:	80 e0       	ldi	r24, 0x00	; 0
    2300:	90 e0       	ldi	r25, 0x00	; 0
    2302:	a0 e2       	ldi	r26, 0x20	; 32
    2304:	b2 e4       	ldi	r27, 0x42	; 66
    2306:	80 83       	st	Z, r24
    2308:	91 83       	std	Z+1, r25	; 0x01
    230a:	a2 83       	std	Z+2, r26	; 0x02
    230c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    230e:	8e 01       	movw	r16, r28
    2310:	0b 5b       	subi	r16, 0xBB	; 187
    2312:	1f 4f       	sbci	r17, 0xFF	; 255
    2314:	fe 01       	movw	r30, r28
    2316:	e7 5b       	subi	r30, 0xB7	; 183
    2318:	ff 4f       	sbci	r31, 0xFF	; 255
    231a:	60 81       	ld	r22, Z
    231c:	71 81       	ldd	r23, Z+1	; 0x01
    231e:	82 81       	ldd	r24, Z+2	; 0x02
    2320:	93 81       	ldd	r25, Z+3	; 0x03
    2322:	20 e0       	ldi	r18, 0x00	; 0
    2324:	30 e0       	ldi	r19, 0x00	; 0
    2326:	4a ef       	ldi	r20, 0xFA	; 250
    2328:	54 e4       	ldi	r21, 0x44	; 68
    232a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    232e:	dc 01       	movw	r26, r24
    2330:	cb 01       	movw	r24, r22
    2332:	f8 01       	movw	r30, r16
    2334:	80 83       	st	Z, r24
    2336:	91 83       	std	Z+1, r25	; 0x01
    2338:	a2 83       	std	Z+2, r26	; 0x02
    233a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    233c:	fe 01       	movw	r30, r28
    233e:	eb 5b       	subi	r30, 0xBB	; 187
    2340:	ff 4f       	sbci	r31, 0xFF	; 255
    2342:	60 81       	ld	r22, Z
    2344:	71 81       	ldd	r23, Z+1	; 0x01
    2346:	82 81       	ldd	r24, Z+2	; 0x02
    2348:	93 81       	ldd	r25, Z+3	; 0x03
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	30 e0       	ldi	r19, 0x00	; 0
    234e:	40 e8       	ldi	r20, 0x80	; 128
    2350:	5f e3       	ldi	r21, 0x3F	; 63
    2352:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2356:	88 23       	and	r24, r24
    2358:	44 f4       	brge	.+16     	; 0x236a <CLCD_VidInit+0x8c>
		__ticks = 1;
    235a:	fe 01       	movw	r30, r28
    235c:	ed 5b       	subi	r30, 0xBD	; 189
    235e:	ff 4f       	sbci	r31, 0xFF	; 255
    2360:	81 e0       	ldi	r24, 0x01	; 1
    2362:	90 e0       	ldi	r25, 0x00	; 0
    2364:	91 83       	std	Z+1, r25	; 0x01
    2366:	80 83       	st	Z, r24
    2368:	64 c0       	rjmp	.+200    	; 0x2432 <CLCD_VidInit+0x154>
	else if (__tmp > 65535)
    236a:	fe 01       	movw	r30, r28
    236c:	eb 5b       	subi	r30, 0xBB	; 187
    236e:	ff 4f       	sbci	r31, 0xFF	; 255
    2370:	60 81       	ld	r22, Z
    2372:	71 81       	ldd	r23, Z+1	; 0x01
    2374:	82 81       	ldd	r24, Z+2	; 0x02
    2376:	93 81       	ldd	r25, Z+3	; 0x03
    2378:	20 e0       	ldi	r18, 0x00	; 0
    237a:	3f ef       	ldi	r19, 0xFF	; 255
    237c:	4f e7       	ldi	r20, 0x7F	; 127
    237e:	57 e4       	ldi	r21, 0x47	; 71
    2380:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2384:	18 16       	cp	r1, r24
    2386:	0c f0       	brlt	.+2      	; 0x238a <CLCD_VidInit+0xac>
    2388:	43 c0       	rjmp	.+134    	; 0x2410 <CLCD_VidInit+0x132>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    238a:	fe 01       	movw	r30, r28
    238c:	e7 5b       	subi	r30, 0xB7	; 183
    238e:	ff 4f       	sbci	r31, 0xFF	; 255
    2390:	60 81       	ld	r22, Z
    2392:	71 81       	ldd	r23, Z+1	; 0x01
    2394:	82 81       	ldd	r24, Z+2	; 0x02
    2396:	93 81       	ldd	r25, Z+3	; 0x03
    2398:	20 e0       	ldi	r18, 0x00	; 0
    239a:	30 e0       	ldi	r19, 0x00	; 0
    239c:	40 e2       	ldi	r20, 0x20	; 32
    239e:	51 e4       	ldi	r21, 0x41	; 65
    23a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23a4:	dc 01       	movw	r26, r24
    23a6:	cb 01       	movw	r24, r22
    23a8:	8e 01       	movw	r16, r28
    23aa:	0d 5b       	subi	r16, 0xBD	; 189
    23ac:	1f 4f       	sbci	r17, 0xFF	; 255
    23ae:	bc 01       	movw	r22, r24
    23b0:	cd 01       	movw	r24, r26
    23b2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    23b6:	dc 01       	movw	r26, r24
    23b8:	cb 01       	movw	r24, r22
    23ba:	f8 01       	movw	r30, r16
    23bc:	91 83       	std	Z+1, r25	; 0x01
    23be:	80 83       	st	Z, r24
    23c0:	1f c0       	rjmp	.+62     	; 0x2400 <CLCD_VidInit+0x122>
    23c2:	fe 01       	movw	r30, r28
    23c4:	ef 5b       	subi	r30, 0xBF	; 191
    23c6:	ff 4f       	sbci	r31, 0xFF	; 255
    23c8:	88 ec       	ldi	r24, 0xC8	; 200
    23ca:	90 e0       	ldi	r25, 0x00	; 0
    23cc:	91 83       	std	Z+1, r25	; 0x01
    23ce:	80 83       	st	Z, r24
    23d0:	fe 01       	movw	r30, r28
    23d2:	ef 5b       	subi	r30, 0xBF	; 191
    23d4:	ff 4f       	sbci	r31, 0xFF	; 255
    23d6:	80 81       	ld	r24, Z
    23d8:	91 81       	ldd	r25, Z+1	; 0x01
    23da:	01 97       	sbiw	r24, 0x01	; 1
    23dc:	f1 f7       	brne	.-4      	; 0x23da <CLCD_VidInit+0xfc>
    23de:	fe 01       	movw	r30, r28
    23e0:	ef 5b       	subi	r30, 0xBF	; 191
    23e2:	ff 4f       	sbci	r31, 0xFF	; 255
    23e4:	91 83       	std	Z+1, r25	; 0x01
    23e6:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    23e8:	de 01       	movw	r26, r28
    23ea:	ad 5b       	subi	r26, 0xBD	; 189
    23ec:	bf 4f       	sbci	r27, 0xFF	; 255
    23ee:	fe 01       	movw	r30, r28
    23f0:	ed 5b       	subi	r30, 0xBD	; 189
    23f2:	ff 4f       	sbci	r31, 0xFF	; 255
    23f4:	80 81       	ld	r24, Z
    23f6:	91 81       	ldd	r25, Z+1	; 0x01
    23f8:	01 97       	sbiw	r24, 0x01	; 1
    23fa:	11 96       	adiw	r26, 0x01	; 1
    23fc:	9c 93       	st	X, r25
    23fe:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2400:	fe 01       	movw	r30, r28
    2402:	ed 5b       	subi	r30, 0xBD	; 189
    2404:	ff 4f       	sbci	r31, 0xFF	; 255
    2406:	80 81       	ld	r24, Z
    2408:	91 81       	ldd	r25, Z+1	; 0x01
    240a:	00 97       	sbiw	r24, 0x00	; 0
    240c:	d1 f6       	brne	.-76     	; 0x23c2 <CLCD_VidInit+0xe4>
    240e:	24 c0       	rjmp	.+72     	; 0x2458 <CLCD_VidInit+0x17a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2410:	8e 01       	movw	r16, r28
    2412:	0d 5b       	subi	r16, 0xBD	; 189
    2414:	1f 4f       	sbci	r17, 0xFF	; 255
    2416:	fe 01       	movw	r30, r28
    2418:	eb 5b       	subi	r30, 0xBB	; 187
    241a:	ff 4f       	sbci	r31, 0xFF	; 255
    241c:	60 81       	ld	r22, Z
    241e:	71 81       	ldd	r23, Z+1	; 0x01
    2420:	82 81       	ldd	r24, Z+2	; 0x02
    2422:	93 81       	ldd	r25, Z+3	; 0x03
    2424:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2428:	dc 01       	movw	r26, r24
    242a:	cb 01       	movw	r24, r22
    242c:	f8 01       	movw	r30, r16
    242e:	91 83       	std	Z+1, r25	; 0x01
    2430:	80 83       	st	Z, r24
    2432:	fe 01       	movw	r30, r28
    2434:	ed 5b       	subi	r30, 0xBD	; 189
    2436:	ff 4f       	sbci	r31, 0xFF	; 255
    2438:	80 81       	ld	r24, Z
    243a:	91 81       	ldd	r25, Z+1	; 0x01
    243c:	fe 01       	movw	r30, r28
    243e:	ff 96       	adiw	r30, 0x3f	; 63
    2440:	91 83       	std	Z+1, r25	; 0x01
    2442:	80 83       	st	Z, r24
    2444:	fe 01       	movw	r30, r28
    2446:	ff 96       	adiw	r30, 0x3f	; 63
    2448:	80 81       	ld	r24, Z
    244a:	91 81       	ldd	r25, Z+1	; 0x01
    244c:	01 97       	sbiw	r24, 0x01	; 1
    244e:	f1 f7       	brne	.-4      	; 0x244c <CLCD_VidInit+0x16e>
    2450:	fe 01       	movw	r30, r28
    2452:	ff 96       	adiw	r30, 0x3f	; 63
    2454:	91 83       	std	Z+1, r25	; 0x01
    2456:	80 83       	st	Z, r24
    //Delay
    _delay_ms(40);

    //Function Set
    CLCD_VidSendCommand(0b00111111);
    2458:	8f e3       	ldi	r24, 0x3F	; 63
    245a:	0e 94 33 10 	call	0x2066	; 0x2066 <CLCD_VidSendCommand>
    245e:	80 e0       	ldi	r24, 0x00	; 0
    2460:	90 e0       	ldi	r25, 0x00	; 0
    2462:	a4 e4       	ldi	r26, 0x44	; 68
    2464:	b2 e4       	ldi	r27, 0x42	; 66
    2466:	8b af       	std	Y+59, r24	; 0x3b
    2468:	9c af       	std	Y+60, r25	; 0x3c
    246a:	ad af       	std	Y+61, r26	; 0x3d
    246c:	be af       	std	Y+62, r27	; 0x3e
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    246e:	6b ad       	ldd	r22, Y+59	; 0x3b
    2470:	7c ad       	ldd	r23, Y+60	; 0x3c
    2472:	8d ad       	ldd	r24, Y+61	; 0x3d
    2474:	9e ad       	ldd	r25, Y+62	; 0x3e
    2476:	2b ea       	ldi	r18, 0xAB	; 171
    2478:	3a ea       	ldi	r19, 0xAA	; 170
    247a:	4a e2       	ldi	r20, 0x2A	; 42
    247c:	50 e4       	ldi	r21, 0x40	; 64
    247e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2482:	dc 01       	movw	r26, r24
    2484:	cb 01       	movw	r24, r22
    2486:	8f ab       	std	Y+55, r24	; 0x37
    2488:	98 af       	std	Y+56, r25	; 0x38
    248a:	a9 af       	std	Y+57, r26	; 0x39
    248c:	ba af       	std	Y+58, r27	; 0x3a
	if (__tmp < 1.0)
    248e:	6f a9       	ldd	r22, Y+55	; 0x37
    2490:	78 ad       	ldd	r23, Y+56	; 0x38
    2492:	89 ad       	ldd	r24, Y+57	; 0x39
    2494:	9a ad       	ldd	r25, Y+58	; 0x3a
    2496:	20 e0       	ldi	r18, 0x00	; 0
    2498:	30 e0       	ldi	r19, 0x00	; 0
    249a:	40 e8       	ldi	r20, 0x80	; 128
    249c:	5f e3       	ldi	r21, 0x3F	; 63
    249e:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    24a2:	88 23       	and	r24, r24
    24a4:	1c f4       	brge	.+6      	; 0x24ac <CLCD_VidInit+0x1ce>
		__ticks = 1;
    24a6:	81 e0       	ldi	r24, 0x01	; 1
    24a8:	8e ab       	std	Y+54, r24	; 0x36
    24aa:	91 c0       	rjmp	.+290    	; 0x25ce <CLCD_VidInit+0x2f0>
	else if (__tmp > 255)
    24ac:	6f a9       	ldd	r22, Y+55	; 0x37
    24ae:	78 ad       	ldd	r23, Y+56	; 0x38
    24b0:	89 ad       	ldd	r24, Y+57	; 0x39
    24b2:	9a ad       	ldd	r25, Y+58	; 0x3a
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	30 e0       	ldi	r19, 0x00	; 0
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	53 e4       	ldi	r21, 0x43	; 67
    24bc:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	0c f0       	brlt	.+2      	; 0x24c6 <CLCD_VidInit+0x1e8>
    24c4:	7b c0       	rjmp	.+246    	; 0x25bc <CLCD_VidInit+0x2de>
	{
		_delay_ms(__us / 1000.0);
    24c6:	6b ad       	ldd	r22, Y+59	; 0x3b
    24c8:	7c ad       	ldd	r23, Y+60	; 0x3c
    24ca:	8d ad       	ldd	r24, Y+61	; 0x3d
    24cc:	9e ad       	ldd	r25, Y+62	; 0x3e
    24ce:	20 e0       	ldi	r18, 0x00	; 0
    24d0:	30 e0       	ldi	r19, 0x00	; 0
    24d2:	4a e7       	ldi	r20, 0x7A	; 122
    24d4:	54 e4       	ldi	r21, 0x44	; 68
    24d6:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    24da:	dc 01       	movw	r26, r24
    24dc:	cb 01       	movw	r24, r22
    24de:	8a ab       	std	Y+50, r24	; 0x32
    24e0:	9b ab       	std	Y+51, r25	; 0x33
    24e2:	ac ab       	std	Y+52, r26	; 0x34
    24e4:	bd ab       	std	Y+53, r27	; 0x35
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24e6:	6a a9       	ldd	r22, Y+50	; 0x32
    24e8:	7b a9       	ldd	r23, Y+51	; 0x33
    24ea:	8c a9       	ldd	r24, Y+52	; 0x34
    24ec:	9d a9       	ldd	r25, Y+53	; 0x35
    24ee:	20 e0       	ldi	r18, 0x00	; 0
    24f0:	30 e0       	ldi	r19, 0x00	; 0
    24f2:	4a ef       	ldi	r20, 0xFA	; 250
    24f4:	54 e4       	ldi	r21, 0x44	; 68
    24f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    24fa:	dc 01       	movw	r26, r24
    24fc:	cb 01       	movw	r24, r22
    24fe:	8e a7       	std	Y+46, r24	; 0x2e
    2500:	9f a7       	std	Y+47, r25	; 0x2f
    2502:	a8 ab       	std	Y+48, r26	; 0x30
    2504:	b9 ab       	std	Y+49, r27	; 0x31
	if (__tmp < 1.0)
    2506:	6e a5       	ldd	r22, Y+46	; 0x2e
    2508:	7f a5       	ldd	r23, Y+47	; 0x2f
    250a:	88 a9       	ldd	r24, Y+48	; 0x30
    250c:	99 a9       	ldd	r25, Y+49	; 0x31
    250e:	20 e0       	ldi	r18, 0x00	; 0
    2510:	30 e0       	ldi	r19, 0x00	; 0
    2512:	40 e8       	ldi	r20, 0x80	; 128
    2514:	5f e3       	ldi	r21, 0x3F	; 63
    2516:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    251a:	88 23       	and	r24, r24
    251c:	2c f4       	brge	.+10     	; 0x2528 <CLCD_VidInit+0x24a>
		__ticks = 1;
    251e:	81 e0       	ldi	r24, 0x01	; 1
    2520:	90 e0       	ldi	r25, 0x00	; 0
    2522:	9d a7       	std	Y+45, r25	; 0x2d
    2524:	8c a7       	std	Y+44, r24	; 0x2c
    2526:	3f c0       	rjmp	.+126    	; 0x25a6 <CLCD_VidInit+0x2c8>
	else if (__tmp > 65535)
    2528:	6e a5       	ldd	r22, Y+46	; 0x2e
    252a:	7f a5       	ldd	r23, Y+47	; 0x2f
    252c:	88 a9       	ldd	r24, Y+48	; 0x30
    252e:	99 a9       	ldd	r25, Y+49	; 0x31
    2530:	20 e0       	ldi	r18, 0x00	; 0
    2532:	3f ef       	ldi	r19, 0xFF	; 255
    2534:	4f e7       	ldi	r20, 0x7F	; 127
    2536:	57 e4       	ldi	r21, 0x47	; 71
    2538:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    253c:	18 16       	cp	r1, r24
    253e:	4c f5       	brge	.+82     	; 0x2592 <CLCD_VidInit+0x2b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2540:	6a a9       	ldd	r22, Y+50	; 0x32
    2542:	7b a9       	ldd	r23, Y+51	; 0x33
    2544:	8c a9       	ldd	r24, Y+52	; 0x34
    2546:	9d a9       	ldd	r25, Y+53	; 0x35
    2548:	20 e0       	ldi	r18, 0x00	; 0
    254a:	30 e0       	ldi	r19, 0x00	; 0
    254c:	40 e2       	ldi	r20, 0x20	; 32
    254e:	51 e4       	ldi	r21, 0x41	; 65
    2550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2554:	dc 01       	movw	r26, r24
    2556:	cb 01       	movw	r24, r22
    2558:	bc 01       	movw	r22, r24
    255a:	cd 01       	movw	r24, r26
    255c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2560:	dc 01       	movw	r26, r24
    2562:	cb 01       	movw	r24, r22
    2564:	9d a7       	std	Y+45, r25	; 0x2d
    2566:	8c a7       	std	Y+44, r24	; 0x2c
    2568:	0f c0       	rjmp	.+30     	; 0x2588 <CLCD_VidInit+0x2aa>
    256a:	88 ec       	ldi	r24, 0xC8	; 200
    256c:	90 e0       	ldi	r25, 0x00	; 0
    256e:	9b a7       	std	Y+43, r25	; 0x2b
    2570:	8a a7       	std	Y+42, r24	; 0x2a
    2572:	8a a5       	ldd	r24, Y+42	; 0x2a
    2574:	9b a5       	ldd	r25, Y+43	; 0x2b
    2576:	01 97       	sbiw	r24, 0x01	; 1
    2578:	f1 f7       	brne	.-4      	; 0x2576 <CLCD_VidInit+0x298>
    257a:	9b a7       	std	Y+43, r25	; 0x2b
    257c:	8a a7       	std	Y+42, r24	; 0x2a
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    257e:	8c a5       	ldd	r24, Y+44	; 0x2c
    2580:	9d a5       	ldd	r25, Y+45	; 0x2d
    2582:	01 97       	sbiw	r24, 0x01	; 1
    2584:	9d a7       	std	Y+45, r25	; 0x2d
    2586:	8c a7       	std	Y+44, r24	; 0x2c
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2588:	8c a5       	ldd	r24, Y+44	; 0x2c
    258a:	9d a5       	ldd	r25, Y+45	; 0x2d
    258c:	00 97       	sbiw	r24, 0x00	; 0
    258e:	69 f7       	brne	.-38     	; 0x256a <CLCD_VidInit+0x28c>
    2590:	24 c0       	rjmp	.+72     	; 0x25da <CLCD_VidInit+0x2fc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2592:	6e a5       	ldd	r22, Y+46	; 0x2e
    2594:	7f a5       	ldd	r23, Y+47	; 0x2f
    2596:	88 a9       	ldd	r24, Y+48	; 0x30
    2598:	99 a9       	ldd	r25, Y+49	; 0x31
    259a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    259e:	dc 01       	movw	r26, r24
    25a0:	cb 01       	movw	r24, r22
    25a2:	9d a7       	std	Y+45, r25	; 0x2d
    25a4:	8c a7       	std	Y+44, r24	; 0x2c
    25a6:	8c a5       	ldd	r24, Y+44	; 0x2c
    25a8:	9d a5       	ldd	r25, Y+45	; 0x2d
    25aa:	99 a7       	std	Y+41, r25	; 0x29
    25ac:	88 a7       	std	Y+40, r24	; 0x28
    25ae:	88 a5       	ldd	r24, Y+40	; 0x28
    25b0:	99 a5       	ldd	r25, Y+41	; 0x29
    25b2:	01 97       	sbiw	r24, 0x01	; 1
    25b4:	f1 f7       	brne	.-4      	; 0x25b2 <CLCD_VidInit+0x2d4>
    25b6:	99 a7       	std	Y+41, r25	; 0x29
    25b8:	88 a7       	std	Y+40, r24	; 0x28
    25ba:	0f c0       	rjmp	.+30     	; 0x25da <CLCD_VidInit+0x2fc>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    25bc:	6f a9       	ldd	r22, Y+55	; 0x37
    25be:	78 ad       	ldd	r23, Y+56	; 0x38
    25c0:	89 ad       	ldd	r24, Y+57	; 0x39
    25c2:	9a ad       	ldd	r25, Y+58	; 0x3a
    25c4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25c8:	dc 01       	movw	r26, r24
    25ca:	cb 01       	movw	r24, r22
    25cc:	8e ab       	std	Y+54, r24	; 0x36
    25ce:	8e a9       	ldd	r24, Y+54	; 0x36
    25d0:	8f a3       	std	Y+39, r24	; 0x27
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    25d2:	8f a1       	ldd	r24, Y+39	; 0x27
    25d4:	8a 95       	dec	r24
    25d6:	f1 f7       	brne	.-4      	; 0x25d4 <CLCD_VidInit+0x2f6>
    25d8:	8f a3       	std	Y+39, r24	; 0x27

    //Delay
    _delay_us(49);

    //Display ON/OFF Control
    CLCD_VidSendCommand(0b00001100);
    25da:	8c e0       	ldi	r24, 0x0C	; 12
    25dc:	0e 94 33 10 	call	0x2066	; 0x2066 <CLCD_VidSendCommand>
    25e0:	80 e0       	ldi	r24, 0x00	; 0
    25e2:	90 e0       	ldi	r25, 0x00	; 0
    25e4:	a4 e4       	ldi	r26, 0x44	; 68
    25e6:	b2 e4       	ldi	r27, 0x42	; 66
    25e8:	8b a3       	std	Y+35, r24	; 0x23
    25ea:	9c a3       	std	Y+36, r25	; 0x24
    25ec:	ad a3       	std	Y+37, r26	; 0x25
    25ee:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    25f0:	6b a1       	ldd	r22, Y+35	; 0x23
    25f2:	7c a1       	ldd	r23, Y+36	; 0x24
    25f4:	8d a1       	ldd	r24, Y+37	; 0x25
    25f6:	9e a1       	ldd	r25, Y+38	; 0x26
    25f8:	2b ea       	ldi	r18, 0xAB	; 171
    25fa:	3a ea       	ldi	r19, 0xAA	; 170
    25fc:	4a e2       	ldi	r20, 0x2A	; 42
    25fe:	50 e4       	ldi	r21, 0x40	; 64
    2600:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2604:	dc 01       	movw	r26, r24
    2606:	cb 01       	movw	r24, r22
    2608:	8f 8f       	std	Y+31, r24	; 0x1f
    260a:	98 a3       	std	Y+32, r25	; 0x20
    260c:	a9 a3       	std	Y+33, r26	; 0x21
    260e:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2610:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2612:	78 a1       	ldd	r23, Y+32	; 0x20
    2614:	89 a1       	ldd	r24, Y+33	; 0x21
    2616:	9a a1       	ldd	r25, Y+34	; 0x22
    2618:	20 e0       	ldi	r18, 0x00	; 0
    261a:	30 e0       	ldi	r19, 0x00	; 0
    261c:	40 e8       	ldi	r20, 0x80	; 128
    261e:	5f e3       	ldi	r21, 0x3F	; 63
    2620:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2624:	88 23       	and	r24, r24
    2626:	1c f4       	brge	.+6      	; 0x262e <CLCD_VidInit+0x350>
		__ticks = 1;
    2628:	81 e0       	ldi	r24, 0x01	; 1
    262a:	8e 8f       	std	Y+30, r24	; 0x1e
    262c:	91 c0       	rjmp	.+290    	; 0x2750 <CLCD_VidInit+0x472>
	else if (__tmp > 255)
    262e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2630:	78 a1       	ldd	r23, Y+32	; 0x20
    2632:	89 a1       	ldd	r24, Y+33	; 0x21
    2634:	9a a1       	ldd	r25, Y+34	; 0x22
    2636:	20 e0       	ldi	r18, 0x00	; 0
    2638:	30 e0       	ldi	r19, 0x00	; 0
    263a:	4f e7       	ldi	r20, 0x7F	; 127
    263c:	53 e4       	ldi	r21, 0x43	; 67
    263e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2642:	18 16       	cp	r1, r24
    2644:	0c f0       	brlt	.+2      	; 0x2648 <CLCD_VidInit+0x36a>
    2646:	7b c0       	rjmp	.+246    	; 0x273e <CLCD_VidInit+0x460>
	{
		_delay_ms(__us / 1000.0);
    2648:	6b a1       	ldd	r22, Y+35	; 0x23
    264a:	7c a1       	ldd	r23, Y+36	; 0x24
    264c:	8d a1       	ldd	r24, Y+37	; 0x25
    264e:	9e a1       	ldd	r25, Y+38	; 0x26
    2650:	20 e0       	ldi	r18, 0x00	; 0
    2652:	30 e0       	ldi	r19, 0x00	; 0
    2654:	4a e7       	ldi	r20, 0x7A	; 122
    2656:	54 e4       	ldi	r21, 0x44	; 68
    2658:	0e 94 19 03 	call	0x632	; 0x632 <__divsf3>
    265c:	dc 01       	movw	r26, r24
    265e:	cb 01       	movw	r24, r22
    2660:	8a 8f       	std	Y+26, r24	; 0x1a
    2662:	9b 8f       	std	Y+27, r25	; 0x1b
    2664:	ac 8f       	std	Y+28, r26	; 0x1c
    2666:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2668:	6a 8d       	ldd	r22, Y+26	; 0x1a
    266a:	7b 8d       	ldd	r23, Y+27	; 0x1b
    266c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    266e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2670:	20 e0       	ldi	r18, 0x00	; 0
    2672:	30 e0       	ldi	r19, 0x00	; 0
    2674:	4a ef       	ldi	r20, 0xFA	; 250
    2676:	54 e4       	ldi	r21, 0x44	; 68
    2678:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    267c:	dc 01       	movw	r26, r24
    267e:	cb 01       	movw	r24, r22
    2680:	8e 8b       	std	Y+22, r24	; 0x16
    2682:	9f 8b       	std	Y+23, r25	; 0x17
    2684:	a8 8f       	std	Y+24, r26	; 0x18
    2686:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    2688:	6e 89       	ldd	r22, Y+22	; 0x16
    268a:	7f 89       	ldd	r23, Y+23	; 0x17
    268c:	88 8d       	ldd	r24, Y+24	; 0x18
    268e:	99 8d       	ldd	r25, Y+25	; 0x19
    2690:	20 e0       	ldi	r18, 0x00	; 0
    2692:	30 e0       	ldi	r19, 0x00	; 0
    2694:	40 e8       	ldi	r20, 0x80	; 128
    2696:	5f e3       	ldi	r21, 0x3F	; 63
    2698:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    269c:	88 23       	and	r24, r24
    269e:	2c f4       	brge	.+10     	; 0x26aa <CLCD_VidInit+0x3cc>
		__ticks = 1;
    26a0:	81 e0       	ldi	r24, 0x01	; 1
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	9d 8b       	std	Y+21, r25	; 0x15
    26a6:	8c 8b       	std	Y+20, r24	; 0x14
    26a8:	3f c0       	rjmp	.+126    	; 0x2728 <CLCD_VidInit+0x44a>
	else if (__tmp > 65535)
    26aa:	6e 89       	ldd	r22, Y+22	; 0x16
    26ac:	7f 89       	ldd	r23, Y+23	; 0x17
    26ae:	88 8d       	ldd	r24, Y+24	; 0x18
    26b0:	99 8d       	ldd	r25, Y+25	; 0x19
    26b2:	20 e0       	ldi	r18, 0x00	; 0
    26b4:	3f ef       	ldi	r19, 0xFF	; 255
    26b6:	4f e7       	ldi	r20, 0x7F	; 127
    26b8:	57 e4       	ldi	r21, 0x47	; 71
    26ba:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    26be:	18 16       	cp	r1, r24
    26c0:	4c f5       	brge	.+82     	; 0x2714 <CLCD_VidInit+0x436>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    26c2:	6a 8d       	ldd	r22, Y+26	; 0x1a
    26c4:	7b 8d       	ldd	r23, Y+27	; 0x1b
    26c6:	8c 8d       	ldd	r24, Y+28	; 0x1c
    26c8:	9d 8d       	ldd	r25, Y+29	; 0x1d
    26ca:	20 e0       	ldi	r18, 0x00	; 0
    26cc:	30 e0       	ldi	r19, 0x00	; 0
    26ce:	40 e2       	ldi	r20, 0x20	; 32
    26d0:	51 e4       	ldi	r21, 0x41	; 65
    26d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    26d6:	dc 01       	movw	r26, r24
    26d8:	cb 01       	movw	r24, r22
    26da:	bc 01       	movw	r22, r24
    26dc:	cd 01       	movw	r24, r26
    26de:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26e2:	dc 01       	movw	r26, r24
    26e4:	cb 01       	movw	r24, r22
    26e6:	9d 8b       	std	Y+21, r25	; 0x15
    26e8:	8c 8b       	std	Y+20, r24	; 0x14
    26ea:	0f c0       	rjmp	.+30     	; 0x270a <CLCD_VidInit+0x42c>
    26ec:	88 ec       	ldi	r24, 0xC8	; 200
    26ee:	90 e0       	ldi	r25, 0x00	; 0
    26f0:	9b 8b       	std	Y+19, r25	; 0x13
    26f2:	8a 8b       	std	Y+18, r24	; 0x12
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    26f4:	8a 89       	ldd	r24, Y+18	; 0x12
    26f6:	9b 89       	ldd	r25, Y+19	; 0x13
    26f8:	01 97       	sbiw	r24, 0x01	; 1
    26fa:	f1 f7       	brne	.-4      	; 0x26f8 <CLCD_VidInit+0x41a>
    26fc:	9b 8b       	std	Y+19, r25	; 0x13
    26fe:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2700:	8c 89       	ldd	r24, Y+20	; 0x14
    2702:	9d 89       	ldd	r25, Y+21	; 0x15
    2704:	01 97       	sbiw	r24, 0x01	; 1
    2706:	9d 8b       	std	Y+21, r25	; 0x15
    2708:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    270a:	8c 89       	ldd	r24, Y+20	; 0x14
    270c:	9d 89       	ldd	r25, Y+21	; 0x15
    270e:	00 97       	sbiw	r24, 0x00	; 0
    2710:	69 f7       	brne	.-38     	; 0x26ec <CLCD_VidInit+0x40e>
    2712:	24 c0       	rjmp	.+72     	; 0x275c <CLCD_VidInit+0x47e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2714:	6e 89       	ldd	r22, Y+22	; 0x16
    2716:	7f 89       	ldd	r23, Y+23	; 0x17
    2718:	88 8d       	ldd	r24, Y+24	; 0x18
    271a:	99 8d       	ldd	r25, Y+25	; 0x19
    271c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2720:	dc 01       	movw	r26, r24
    2722:	cb 01       	movw	r24, r22
    2724:	9d 8b       	std	Y+21, r25	; 0x15
    2726:	8c 8b       	std	Y+20, r24	; 0x14
    2728:	8c 89       	ldd	r24, Y+20	; 0x14
    272a:	9d 89       	ldd	r25, Y+21	; 0x15
    272c:	99 8b       	std	Y+17, r25	; 0x11
    272e:	88 8b       	std	Y+16, r24	; 0x10
    2730:	88 89       	ldd	r24, Y+16	; 0x10
    2732:	99 89       	ldd	r25, Y+17	; 0x11
    2734:	01 97       	sbiw	r24, 0x01	; 1
    2736:	f1 f7       	brne	.-4      	; 0x2734 <CLCD_VidInit+0x456>
    2738:	99 8b       	std	Y+17, r25	; 0x11
    273a:	88 8b       	std	Y+16, r24	; 0x10
    273c:	0f c0       	rjmp	.+30     	; 0x275c <CLCD_VidInit+0x47e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    273e:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2740:	78 a1       	ldd	r23, Y+32	; 0x20
    2742:	89 a1       	ldd	r24, Y+33	; 0x21
    2744:	9a a1       	ldd	r25, Y+34	; 0x22
    2746:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    274a:	dc 01       	movw	r26, r24
    274c:	cb 01       	movw	r24, r22
    274e:	8e 8f       	std	Y+30, r24	; 0x1e
    2750:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2752:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2754:	8f 85       	ldd	r24, Y+15	; 0x0f
    2756:	8a 95       	dec	r24
    2758:	f1 f7       	brne	.-4      	; 0x2756 <CLCD_VidInit+0x478>
    275a:	8f 87       	std	Y+15, r24	; 0x0f

    //Delay
    _delay_us(49);

    //Display clear
    CLCD_VidSendCommand(0b00000001);
    275c:	81 e0       	ldi	r24, 0x01	; 1
    275e:	0e 94 33 10 	call	0x2066	; 0x2066 <CLCD_VidSendCommand>
    2762:	80 e0       	ldi	r24, 0x00	; 0
    2764:	90 e0       	ldi	r25, 0x00	; 0
    2766:	a0 e0       	ldi	r26, 0x00	; 0
    2768:	b0 e4       	ldi	r27, 0x40	; 64
    276a:	8b 87       	std	Y+11, r24	; 0x0b
    276c:	9c 87       	std	Y+12, r25	; 0x0c
    276e:	ad 87       	std	Y+13, r26	; 0x0d
    2770:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2772:	6b 85       	ldd	r22, Y+11	; 0x0b
    2774:	7c 85       	ldd	r23, Y+12	; 0x0c
    2776:	8d 85       	ldd	r24, Y+13	; 0x0d
    2778:	9e 85       	ldd	r25, Y+14	; 0x0e
    277a:	20 e0       	ldi	r18, 0x00	; 0
    277c:	30 e0       	ldi	r19, 0x00	; 0
    277e:	4a ef       	ldi	r20, 0xFA	; 250
    2780:	54 e4       	ldi	r21, 0x44	; 68
    2782:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2786:	dc 01       	movw	r26, r24
    2788:	cb 01       	movw	r24, r22
    278a:	8f 83       	std	Y+7, r24	; 0x07
    278c:	98 87       	std	Y+8, r25	; 0x08
    278e:	a9 87       	std	Y+9, r26	; 0x09
    2790:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2792:	6f 81       	ldd	r22, Y+7	; 0x07
    2794:	78 85       	ldd	r23, Y+8	; 0x08
    2796:	89 85       	ldd	r24, Y+9	; 0x09
    2798:	9a 85       	ldd	r25, Y+10	; 0x0a
    279a:	20 e0       	ldi	r18, 0x00	; 0
    279c:	30 e0       	ldi	r19, 0x00	; 0
    279e:	40 e8       	ldi	r20, 0x80	; 128
    27a0:	5f e3       	ldi	r21, 0x3F	; 63
    27a2:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    27a6:	88 23       	and	r24, r24
    27a8:	2c f4       	brge	.+10     	; 0x27b4 <CLCD_VidInit+0x4d6>
		__ticks = 1;
    27aa:	81 e0       	ldi	r24, 0x01	; 1
    27ac:	90 e0       	ldi	r25, 0x00	; 0
    27ae:	9e 83       	std	Y+6, r25	; 0x06
    27b0:	8d 83       	std	Y+5, r24	; 0x05
    27b2:	3f c0       	rjmp	.+126    	; 0x2832 <CLCD_VidInit+0x554>
	else if (__tmp > 65535)
    27b4:	6f 81       	ldd	r22, Y+7	; 0x07
    27b6:	78 85       	ldd	r23, Y+8	; 0x08
    27b8:	89 85       	ldd	r24, Y+9	; 0x09
    27ba:	9a 85       	ldd	r25, Y+10	; 0x0a
    27bc:	20 e0       	ldi	r18, 0x00	; 0
    27be:	3f ef       	ldi	r19, 0xFF	; 255
    27c0:	4f e7       	ldi	r20, 0x7F	; 127
    27c2:	57 e4       	ldi	r21, 0x47	; 71
    27c4:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    27c8:	18 16       	cp	r1, r24
    27ca:	4c f5       	brge	.+82     	; 0x281e <CLCD_VidInit+0x540>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27cc:	6b 85       	ldd	r22, Y+11	; 0x0b
    27ce:	7c 85       	ldd	r23, Y+12	; 0x0c
    27d0:	8d 85       	ldd	r24, Y+13	; 0x0d
    27d2:	9e 85       	ldd	r25, Y+14	; 0x0e
    27d4:	20 e0       	ldi	r18, 0x00	; 0
    27d6:	30 e0       	ldi	r19, 0x00	; 0
    27d8:	40 e2       	ldi	r20, 0x20	; 32
    27da:	51 e4       	ldi	r21, 0x41	; 65
    27dc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    27e0:	dc 01       	movw	r26, r24
    27e2:	cb 01       	movw	r24, r22
    27e4:	bc 01       	movw	r22, r24
    27e6:	cd 01       	movw	r24, r26
    27e8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27ec:	dc 01       	movw	r26, r24
    27ee:	cb 01       	movw	r24, r22
    27f0:	9e 83       	std	Y+6, r25	; 0x06
    27f2:	8d 83       	std	Y+5, r24	; 0x05
    27f4:	0f c0       	rjmp	.+30     	; 0x2814 <CLCD_VidInit+0x536>
    27f6:	88 ec       	ldi	r24, 0xC8	; 200
    27f8:	90 e0       	ldi	r25, 0x00	; 0
    27fa:	9c 83       	std	Y+4, r25	; 0x04
    27fc:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    27fe:	8b 81       	ldd	r24, Y+3	; 0x03
    2800:	9c 81       	ldd	r25, Y+4	; 0x04
    2802:	01 97       	sbiw	r24, 0x01	; 1
    2804:	f1 f7       	brne	.-4      	; 0x2802 <CLCD_VidInit+0x524>
    2806:	9c 83       	std	Y+4, r25	; 0x04
    2808:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    280a:	8d 81       	ldd	r24, Y+5	; 0x05
    280c:	9e 81       	ldd	r25, Y+6	; 0x06
    280e:	01 97       	sbiw	r24, 0x01	; 1
    2810:	9e 83       	std	Y+6, r25	; 0x06
    2812:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2814:	8d 81       	ldd	r24, Y+5	; 0x05
    2816:	9e 81       	ldd	r25, Y+6	; 0x06
    2818:	00 97       	sbiw	r24, 0x00	; 0
    281a:	69 f7       	brne	.-38     	; 0x27f6 <CLCD_VidInit+0x518>
    281c:	14 c0       	rjmp	.+40     	; 0x2846 <CLCD_VidInit+0x568>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    281e:	6f 81       	ldd	r22, Y+7	; 0x07
    2820:	78 85       	ldd	r23, Y+8	; 0x08
    2822:	89 85       	ldd	r24, Y+9	; 0x09
    2824:	9a 85       	ldd	r25, Y+10	; 0x0a
    2826:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    282a:	dc 01       	movw	r26, r24
    282c:	cb 01       	movw	r24, r22
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
    2832:	8d 81       	ldd	r24, Y+5	; 0x05
    2834:	9e 81       	ldd	r25, Y+6	; 0x06
    2836:	9a 83       	std	Y+2, r25	; 0x02
    2838:	89 83       	std	Y+1, r24	; 0x01
    283a:	89 81       	ldd	r24, Y+1	; 0x01
    283c:	9a 81       	ldd	r25, Y+2	; 0x02
    283e:	01 97       	sbiw	r24, 0x01	; 1
    2840:	f1 f7       	brne	.-4      	; 0x283e <CLCD_VidInit+0x560>
    2842:	9a 83       	std	Y+2, r25	; 0x02
    2844:	89 83       	std	Y+1, r24	; 0x01
    //Delay
    _delay_ms(2);
}
    2846:	c4 5b       	subi	r28, 0xB4	; 180
    2848:	df 4f       	sbci	r29, 0xFF	; 255
    284a:	0f b6       	in	r0, 0x3f	; 63
    284c:	f8 94       	cli
    284e:	de bf       	out	0x3e, r29	; 62
    2850:	0f be       	out	0x3f, r0	; 63
    2852:	cd bf       	out	0x3d, r28	; 61
    2854:	cf 91       	pop	r28
    2856:	df 91       	pop	r29
    2858:	1f 91       	pop	r17
    285a:	0f 91       	pop	r16
    285c:	08 95       	ret

0000285e <CLCD_VidDisplayClear>:

void CLCD_VidDisplayClear() //Function to clear display
{
    285e:	df 93       	push	r29
    2860:	cf 93       	push	r28
    2862:	cd b7       	in	r28, 0x3d	; 61
    2864:	de b7       	in	r29, 0x3e	; 62
    2866:	2e 97       	sbiw	r28, 0x0e	; 14
    2868:	0f b6       	in	r0, 0x3f	; 63
    286a:	f8 94       	cli
    286c:	de bf       	out	0x3e, r29	; 62
    286e:	0f be       	out	0x3f, r0	; 63
    2870:	cd bf       	out	0x3d, r28	; 61
    CLCD_VidSendCommand(0b00000001);
    2872:	81 e0       	ldi	r24, 0x01	; 1
    2874:	0e 94 33 10 	call	0x2066	; 0x2066 <CLCD_VidSendCommand>
    2878:	80 e0       	ldi	r24, 0x00	; 0
    287a:	90 e0       	ldi	r25, 0x00	; 0
    287c:	a0 e0       	ldi	r26, 0x00	; 0
    287e:	b0 e4       	ldi	r27, 0x40	; 64
    2880:	8b 87       	std	Y+11, r24	; 0x0b
    2882:	9c 87       	std	Y+12, r25	; 0x0c
    2884:	ad 87       	std	Y+13, r26	; 0x0d
    2886:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2888:	6b 85       	ldd	r22, Y+11	; 0x0b
    288a:	7c 85       	ldd	r23, Y+12	; 0x0c
    288c:	8d 85       	ldd	r24, Y+13	; 0x0d
    288e:	9e 85       	ldd	r25, Y+14	; 0x0e
    2890:	20 e0       	ldi	r18, 0x00	; 0
    2892:	30 e0       	ldi	r19, 0x00	; 0
    2894:	4a ef       	ldi	r20, 0xFA	; 250
    2896:	54 e4       	ldi	r21, 0x44	; 68
    2898:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    289c:	dc 01       	movw	r26, r24
    289e:	cb 01       	movw	r24, r22
    28a0:	8f 83       	std	Y+7, r24	; 0x07
    28a2:	98 87       	std	Y+8, r25	; 0x08
    28a4:	a9 87       	std	Y+9, r26	; 0x09
    28a6:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    28a8:	6f 81       	ldd	r22, Y+7	; 0x07
    28aa:	78 85       	ldd	r23, Y+8	; 0x08
    28ac:	89 85       	ldd	r24, Y+9	; 0x09
    28ae:	9a 85       	ldd	r25, Y+10	; 0x0a
    28b0:	20 e0       	ldi	r18, 0x00	; 0
    28b2:	30 e0       	ldi	r19, 0x00	; 0
    28b4:	40 e8       	ldi	r20, 0x80	; 128
    28b6:	5f e3       	ldi	r21, 0x3F	; 63
    28b8:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    28bc:	88 23       	and	r24, r24
    28be:	2c f4       	brge	.+10     	; 0x28ca <CLCD_VidDisplayClear+0x6c>
		__ticks = 1;
    28c0:	81 e0       	ldi	r24, 0x01	; 1
    28c2:	90 e0       	ldi	r25, 0x00	; 0
    28c4:	9e 83       	std	Y+6, r25	; 0x06
    28c6:	8d 83       	std	Y+5, r24	; 0x05
    28c8:	3f c0       	rjmp	.+126    	; 0x2948 <CLCD_VidDisplayClear+0xea>
	else if (__tmp > 65535)
    28ca:	6f 81       	ldd	r22, Y+7	; 0x07
    28cc:	78 85       	ldd	r23, Y+8	; 0x08
    28ce:	89 85       	ldd	r24, Y+9	; 0x09
    28d0:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d2:	20 e0       	ldi	r18, 0x00	; 0
    28d4:	3f ef       	ldi	r19, 0xFF	; 255
    28d6:	4f e7       	ldi	r20, 0x7F	; 127
    28d8:	57 e4       	ldi	r21, 0x47	; 71
    28da:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    28de:	18 16       	cp	r1, r24
    28e0:	4c f5       	brge	.+82     	; 0x2934 <CLCD_VidDisplayClear+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28e2:	6b 85       	ldd	r22, Y+11	; 0x0b
    28e4:	7c 85       	ldd	r23, Y+12	; 0x0c
    28e6:	8d 85       	ldd	r24, Y+13	; 0x0d
    28e8:	9e 85       	ldd	r25, Y+14	; 0x0e
    28ea:	20 e0       	ldi	r18, 0x00	; 0
    28ec:	30 e0       	ldi	r19, 0x00	; 0
    28ee:	40 e2       	ldi	r20, 0x20	; 32
    28f0:	51 e4       	ldi	r21, 0x41	; 65
    28f2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    28f6:	dc 01       	movw	r26, r24
    28f8:	cb 01       	movw	r24, r22
    28fa:	bc 01       	movw	r22, r24
    28fc:	cd 01       	movw	r24, r26
    28fe:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2902:	dc 01       	movw	r26, r24
    2904:	cb 01       	movw	r24, r22
    2906:	9e 83       	std	Y+6, r25	; 0x06
    2908:	8d 83       	std	Y+5, r24	; 0x05
    290a:	0f c0       	rjmp	.+30     	; 0x292a <CLCD_VidDisplayClear+0xcc>
    290c:	88 ec       	ldi	r24, 0xC8	; 200
    290e:	90 e0       	ldi	r25, 0x00	; 0
    2910:	9c 83       	std	Y+4, r25	; 0x04
    2912:	8b 83       	std	Y+3, r24	; 0x03
    2914:	8b 81       	ldd	r24, Y+3	; 0x03
    2916:	9c 81       	ldd	r25, Y+4	; 0x04
    2918:	01 97       	sbiw	r24, 0x01	; 1
    291a:	f1 f7       	brne	.-4      	; 0x2918 <CLCD_VidDisplayClear+0xba>
    291c:	9c 83       	std	Y+4, r25	; 0x04
    291e:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2920:	8d 81       	ldd	r24, Y+5	; 0x05
    2922:	9e 81       	ldd	r25, Y+6	; 0x06
    2924:	01 97       	sbiw	r24, 0x01	; 1
    2926:	9e 83       	std	Y+6, r25	; 0x06
    2928:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    292a:	8d 81       	ldd	r24, Y+5	; 0x05
    292c:	9e 81       	ldd	r25, Y+6	; 0x06
    292e:	00 97       	sbiw	r24, 0x00	; 0
    2930:	69 f7       	brne	.-38     	; 0x290c <CLCD_VidDisplayClear+0xae>
    2932:	14 c0       	rjmp	.+40     	; 0x295c <CLCD_VidDisplayClear+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2934:	6f 81       	ldd	r22, Y+7	; 0x07
    2936:	78 85       	ldd	r23, Y+8	; 0x08
    2938:	89 85       	ldd	r24, Y+9	; 0x09
    293a:	9a 85       	ldd	r25, Y+10	; 0x0a
    293c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2940:	dc 01       	movw	r26, r24
    2942:	cb 01       	movw	r24, r22
    2944:	9e 83       	std	Y+6, r25	; 0x06
    2946:	8d 83       	std	Y+5, r24	; 0x05
    2948:	8d 81       	ldd	r24, Y+5	; 0x05
    294a:	9e 81       	ldd	r25, Y+6	; 0x06
    294c:	9a 83       	std	Y+2, r25	; 0x02
    294e:	89 83       	std	Y+1, r24	; 0x01
    2950:	89 81       	ldd	r24, Y+1	; 0x01
    2952:	9a 81       	ldd	r25, Y+2	; 0x02
    2954:	01 97       	sbiw	r24, 0x01	; 1
    2956:	f1 f7       	brne	.-4      	; 0x2954 <CLCD_VidDisplayClear+0xf6>
    2958:	9a 83       	std	Y+2, r25	; 0x02
    295a:	89 83       	std	Y+1, r24	; 0x01
    //Delays
    _delay_ms(2);
}
    295c:	2e 96       	adiw	r28, 0x0e	; 14
    295e:	0f b6       	in	r0, 0x3f	; 63
    2960:	f8 94       	cli
    2962:	de bf       	out	0x3e, r29	; 62
    2964:	0f be       	out	0x3f, r0	; 63
    2966:	cd bf       	out	0x3d, r28	; 61
    2968:	cf 91       	pop	r28
    296a:	df 91       	pop	r29
    296c:	08 95       	ret

0000296e <CLCD_VidGotoXY>:

void CLCD_VidGotoXY(u8 Copy_u8XPos, u8 Copy_u8YPos) //Function to go to certain position on CLCD
{
    296e:	df 93       	push	r29
    2970:	cf 93       	push	r28
    2972:	00 d0       	rcall	.+0      	; 0x2974 <CLCD_VidGotoXY+0x6>
    2974:	0f 92       	push	r0
    2976:	cd b7       	in	r28, 0x3d	; 61
    2978:	de b7       	in	r29, 0x3e	; 62
    297a:	8a 83       	std	Y+2, r24	; 0x02
    297c:	6b 83       	std	Y+3, r22	; 0x03

    u8 Local_u8Address = 0;
    297e:	19 82       	std	Y+1, r1	; 0x01

    if (Copy_u8XPos == 0)
    2980:	8a 81       	ldd	r24, Y+2	; 0x02
    2982:	88 23       	and	r24, r24
    2984:	19 f4       	brne	.+6      	; 0x298c <CLCD_VidGotoXY+0x1e>
    {
        Local_u8Address = Copy_u8YPos;
    2986:	8b 81       	ldd	r24, Y+3	; 0x03
    2988:	89 83       	std	Y+1, r24	; 0x01
    298a:	06 c0       	rjmp	.+12     	; 0x2998 <CLCD_VidGotoXY+0x2a>
    }

    else if (Copy_u8XPos == 1)
    298c:	8a 81       	ldd	r24, Y+2	; 0x02
    298e:	81 30       	cpi	r24, 0x01	; 1
    2990:	19 f4       	brne	.+6      	; 0x2998 <CLCD_VidGotoXY+0x2a>
    {

        Local_u8Address = 0x40 + Copy_u8YPos;
    2992:	8b 81       	ldd	r24, Y+3	; 0x03
    2994:	80 5c       	subi	r24, 0xC0	; 192
    2996:	89 83       	std	Y+1, r24	; 0x01
    }

    //Send this adderess to the DDram  128 + Local_u8Address because of the 1 in bit 7 of data sheet

    CLCD_VidSendCommand(0b010000000 + Local_u8Address);
    2998:	89 81       	ldd	r24, Y+1	; 0x01
    299a:	80 58       	subi	r24, 0x80	; 128
    299c:	0e 94 33 10 	call	0x2066	; 0x2066 <CLCD_VidSendCommand>
}
    29a0:	0f 90       	pop	r0
    29a2:	0f 90       	pop	r0
    29a4:	0f 90       	pop	r0
    29a6:	cf 91       	pop	r28
    29a8:	df 91       	pop	r29
    29aa:	08 95       	ret

000029ac <CLCD_VidCreatSpecialChar>:

void CLCD_VidCreatSpecialChar(u8 *Copy_u8Pattern, u8 Copy_u8PatternNumber) //Function to write special character on CLCD
{
    29ac:	df 93       	push	r29
    29ae:	cf 93       	push	r28
    29b0:	00 d0       	rcall	.+0      	; 0x29b2 <CLCD_VidCreatSpecialChar+0x6>
    29b2:	00 d0       	rcall	.+0      	; 0x29b4 <CLCD_VidCreatSpecialChar+0x8>
    29b4:	0f 92       	push	r0
    29b6:	cd b7       	in	r28, 0x3d	; 61
    29b8:	de b7       	in	r29, 0x3e	; 62
    29ba:	9c 83       	std	Y+4, r25	; 0x04
    29bc:	8b 83       	std	Y+3, r24	; 0x03
    29be:	6d 83       	std	Y+5, r22	; 0x05

    u8 Local_u8CGRAMAddress = 0;
    29c0:	1a 82       	std	Y+2, r1	; 0x02

    //Calculate the CGRAM Address
    Local_u8CGRAMAddress = Copy_u8PatternNumber * 8;
    29c2:	8d 81       	ldd	r24, Y+5	; 0x05
    29c4:	88 2f       	mov	r24, r24
    29c6:	90 e0       	ldi	r25, 0x00	; 0
    29c8:	88 0f       	add	r24, r24
    29ca:	99 1f       	adc	r25, r25
    29cc:	88 0f       	add	r24, r24
    29ce:	99 1f       	adc	r25, r25
    29d0:	88 0f       	add	r24, r24
    29d2:	99 1f       	adc	r25, r25
    29d4:	8a 83       	std	Y+2, r24	; 0x02

    //Send CGRAM address command to LCD with setting bit 6 to 1 -----> 64
    CLCD_VidSendCommand(Local_u8CGRAMAddress + 64);
    29d6:	8a 81       	ldd	r24, Y+2	; 0x02
    29d8:	80 5c       	subi	r24, 0xC0	; 192
    29da:	0e 94 33 10 	call	0x2066	; 0x2066 <CLCD_VidSendCommand>

    //Write pattern into CGRAM
    for (u8 i = 0; i < 8; i++)
    29de:	19 82       	std	Y+1, r1	; 0x01
    29e0:	0e c0       	rjmp	.+28     	; 0x29fe <CLCD_VidCreatSpecialChar+0x52>
    {
        CLCD_VidSendData(Copy_u8Pattern[i]);
    29e2:	89 81       	ldd	r24, Y+1	; 0x01
    29e4:	28 2f       	mov	r18, r24
    29e6:	30 e0       	ldi	r19, 0x00	; 0
    29e8:	8b 81       	ldd	r24, Y+3	; 0x03
    29ea:	9c 81       	ldd	r25, Y+4	; 0x04
    29ec:	fc 01       	movw	r30, r24
    29ee:	e2 0f       	add	r30, r18
    29f0:	f3 1f       	adc	r31, r19
    29f2:	80 81       	ld	r24, Z
    29f4:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <CLCD_VidSendData>

    //Send CGRAM address command to LCD with setting bit 6 to 1 -----> 64
    CLCD_VidSendCommand(Local_u8CGRAMAddress + 64);

    //Write pattern into CGRAM
    for (u8 i = 0; i < 8; i++)
    29f8:	89 81       	ldd	r24, Y+1	; 0x01
    29fa:	8f 5f       	subi	r24, 0xFF	; 255
    29fc:	89 83       	std	Y+1, r24	; 0x01
    29fe:	89 81       	ldd	r24, Y+1	; 0x01
    2a00:	88 30       	cpi	r24, 0x08	; 8
    2a02:	78 f3       	brcs	.-34     	; 0x29e2 <CLCD_VidCreatSpecialChar+0x36>
    {
        CLCD_VidSendData(Copy_u8Pattern[i]);
    }
}
    2a04:	0f 90       	pop	r0
    2a06:	0f 90       	pop	r0
    2a08:	0f 90       	pop	r0
    2a0a:	0f 90       	pop	r0
    2a0c:	0f 90       	pop	r0
    2a0e:	cf 91       	pop	r28
    2a10:	df 91       	pop	r29
    2a12:	08 95       	ret

00002a14 <CLCD_VidSendString>:

void CLCD_VidSendString(u8 *Copy_u8Str)
{
    2a14:	df 93       	push	r29
    2a16:	cf 93       	push	r28
    2a18:	00 d0       	rcall	.+0      	; 0x2a1a <CLCD_VidSendString+0x6>
    2a1a:	cd b7       	in	r28, 0x3d	; 61
    2a1c:	de b7       	in	r29, 0x3e	; 62
    2a1e:	9a 83       	std	Y+2, r25	; 0x02
    2a20:	89 83       	std	Y+1, r24	; 0x01
    2a22:	0a c0       	rjmp	.+20     	; 0x2a38 <CLCD_VidSendString+0x24>

    while (*Copy_u8Str != '\0')
    {
        CLCD_VidSendData(*Copy_u8Str);
    2a24:	e9 81       	ldd	r30, Y+1	; 0x01
    2a26:	fa 81       	ldd	r31, Y+2	; 0x02
    2a28:	80 81       	ld	r24, Z
    2a2a:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <CLCD_VidSendData>
        Copy_u8Str++;
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	9a 81       	ldd	r25, Y+2	; 0x02
    2a32:	01 96       	adiw	r24, 0x01	; 1
    2a34:	9a 83       	std	Y+2, r25	; 0x02
    2a36:	89 83       	std	Y+1, r24	; 0x01
}

void CLCD_VidSendString(u8 *Copy_u8Str)
{

    while (*Copy_u8Str != '\0')
    2a38:	e9 81       	ldd	r30, Y+1	; 0x01
    2a3a:	fa 81       	ldd	r31, Y+2	; 0x02
    2a3c:	80 81       	ld	r24, Z
    2a3e:	88 23       	and	r24, r24
    2a40:	89 f7       	brne	.-30     	; 0x2a24 <CLCD_VidSendString+0x10>
    {
        CLCD_VidSendData(*Copy_u8Str);
        Copy_u8Str++;
    }
}
    2a42:	0f 90       	pop	r0
    2a44:	0f 90       	pop	r0
    2a46:	cf 91       	pop	r28
    2a48:	df 91       	pop	r29
    2a4a:	08 95       	ret

00002a4c <main>:

/*-------------------Global Variables----------------------*/
u8 TN1 = 0, TN2 = 0, CMD;

int main(void)
{
    2a4c:	df 93       	push	r29
    2a4e:	cf 93       	push	r28
    2a50:	cd b7       	in	r28, 0x3d	; 61
    2a52:	de b7       	in	r29, 0x3e	; 62
    2a54:	e8 97       	sbiw	r28, 0x38	; 56
    2a56:	0f b6       	in	r0, 0x3f	; 63
    2a58:	f8 94       	cli
    2a5a:	de bf       	out	0x3e, r29	; 62
    2a5c:	0f be       	out	0x3f, r0	; 63
    2a5e:	cd bf       	out	0x3d, r28	; 61
    /*-------------------Drivers Initializing----------------------*/
    /* USART init */
    USART_VidInit();
    2a60:	0e 94 6b 0f 	call	0x1ed6	; 0x1ed6 <USART_VidInit>

    /* SPI Master init */
    DIO_VidSetPinMode(Port_B, Pin_4, output);
    2a64:	82 e0       	ldi	r24, 0x02	; 2
    2a66:	64 e0       	ldi	r22, 0x04	; 4
    2a68:	41 e0       	ldi	r20, 0x01	; 1
    2a6a:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_VidSetPinMode>
    DIO_VidSetPinMode(Port_B, Pin_5, output);
    2a6e:	82 e0       	ldi	r24, 0x02	; 2
    2a70:	65 e0       	ldi	r22, 0x05	; 5
    2a72:	41 e0       	ldi	r20, 0x01	; 1
    2a74:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_VidSetPinMode>
    DIO_VidSetPinMode(Port_B, Pin_7, output);
    2a78:	82 e0       	ldi	r24, 0x02	; 2
    2a7a:	67 e0       	ldi	r22, 0x07	; 7
    2a7c:	41 e0       	ldi	r20, 0x01	; 1
    2a7e:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_VidSetPinMode>
    DIO_VidSetPinMode(Port_B, Pin_6, input);
    2a82:	82 e0       	ldi	r24, 0x02	; 2
    2a84:	66 e0       	ldi	r22, 0x06	; 6
    2a86:	40 e0       	ldi	r20, 0x00	; 0
    2a88:	0e 94 51 07 	call	0xea2	; 0xea2 <DIO_VidSetPinMode>
    DIO_VidSetPinValue(Port_B, Pin_4, high);
    2a8c:	82 e0       	ldi	r24, 0x02	; 2
    2a8e:	64 e0       	ldi	r22, 0x04	; 4
    2a90:	41 e0       	ldi	r20, 0x01	; 1
    2a92:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinValue>
    SPI_VidInit();
    2a96:	0e 94 c4 09 	call	0x1388	; 0x1388 <SPI_VidInit>

    /* Slave EN */
    DIO_VidSetPinValue(Port_B, Pin_4, low);
    2a9a:	82 e0       	ldi	r24, 0x02	; 2
    2a9c:	64 e0       	ldi	r22, 0x04	; 4
    2a9e:	40 e0       	ldi	r20, 0x00	; 0
    2aa0:	0e 94 4f 06 	call	0xc9e	; 0xc9e <DIO_VidSetPinValue>

    /* CLCD init */
    DIO_VidSetPortMode(Port_A, Port_output);
    2aa4:	81 e0       	ldi	r24, 0x01	; 1
    2aa6:	6f ef       	ldi	r22, 0xFF	; 255
    2aa8:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_VidSetPortMode>
    DIO_VidSetPortMode(Port_C, Port_output);
    2aac:	83 e0       	ldi	r24, 0x03	; 3
    2aae:	6f ef       	ldi	r22, 0xFF	; 255
    2ab0:	0e 94 19 09 	call	0x1232	; 0x1232 <DIO_VidSetPortMode>
    CLCD_VidInit();
    2ab4:	0e 94 6f 11 	call	0x22de	; 0x22de <CLCD_VidInit>

    CLCD_VidSendString("Welcome :)");
    2ab8:	80 e6       	ldi	r24, 0x60	; 96
    2aba:	90 e0       	ldi	r25, 0x00	; 0
    2abc:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_VidSendString>
    CLCD_VidGotoXY(1, 0);
    2ac0:	81 e0       	ldi	r24, 0x01	; 1
    2ac2:	60 e0       	ldi	r22, 0x00	; 0
    2ac4:	0e 94 b7 14 	call	0x296e	; 0x296e <CLCD_VidGotoXY>
    CLCD_VidSendString("Temperature: ");
    2ac8:	8b e6       	ldi	r24, 0x6B	; 107
    2aca:	90 e0       	ldi	r25, 0x00	; 0
    2acc:	0e 94 0a 15 	call	0x2a14	; 0x2a14 <CLCD_VidSendString>

    /* Timer 1 init */
    GIE_VidEnable();
    2ad0:	0e 94 a8 09 	call	0x1350	; 0x1350 <GIE_VidEnable>
    TMR_VidInit();
    2ad4:	0e 94 87 0a 	call	0x150e	; 0x150e <TMR_VidInit>
    TMR_VidSetDutyCycle(1, 12);
    2ad8:	81 e0       	ldi	r24, 0x01	; 1
    2ada:	6c e0       	ldi	r22, 0x0C	; 12
    2adc:	0e 94 96 0b 	call	0x172c	; 0x172c <TMR_VidSetDutyCycle>
    TMR_VidSetCallBack(1, TMR1_ISR);
    2ae0:	24 e6       	ldi	r18, 0x64	; 100
    2ae2:	37 e1       	ldi	r19, 0x17	; 23
    2ae4:	81 e0       	ldi	r24, 0x01	; 1
    2ae6:	b9 01       	movw	r22, r18
    2ae8:	0e 94 20 0c 	call	0x1840	; 0x1840 <TMR_VidSetCallBack>
    2aec:	80 e0       	ldi	r24, 0x00	; 0
    2aee:	90 e0       	ldi	r25, 0x00	; 0
    2af0:	a8 e4       	ldi	r26, 0x48	; 72
    2af2:	b3 e4       	ldi	r27, 0x43	; 67
    2af4:	8d ab       	std	Y+53, r24	; 0x35
    2af6:	9e ab       	std	Y+54, r25	; 0x36
    2af8:	af ab       	std	Y+55, r26	; 0x37
    2afa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2afc:	6d a9       	ldd	r22, Y+53	; 0x35
    2afe:	7e a9       	ldd	r23, Y+54	; 0x36
    2b00:	8f a9       	ldd	r24, Y+55	; 0x37
    2b02:	98 ad       	ldd	r25, Y+56	; 0x38
    2b04:	20 e0       	ldi	r18, 0x00	; 0
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	4a ef       	ldi	r20, 0xFA	; 250
    2b0a:	54 e4       	ldi	r21, 0x44	; 68
    2b0c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b10:	dc 01       	movw	r26, r24
    2b12:	cb 01       	movw	r24, r22
    2b14:	89 ab       	std	Y+49, r24	; 0x31
    2b16:	9a ab       	std	Y+50, r25	; 0x32
    2b18:	ab ab       	std	Y+51, r26	; 0x33
    2b1a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2b1c:	69 a9       	ldd	r22, Y+49	; 0x31
    2b1e:	7a a9       	ldd	r23, Y+50	; 0x32
    2b20:	8b a9       	ldd	r24, Y+51	; 0x33
    2b22:	9c a9       	ldd	r25, Y+52	; 0x34
    2b24:	20 e0       	ldi	r18, 0x00	; 0
    2b26:	30 e0       	ldi	r19, 0x00	; 0
    2b28:	40 e8       	ldi	r20, 0x80	; 128
    2b2a:	5f e3       	ldi	r21, 0x3F	; 63
    2b2c:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2b30:	88 23       	and	r24, r24
    2b32:	2c f4       	brge	.+10     	; 0x2b3e <main+0xf2>
		__ticks = 1;
    2b34:	81 e0       	ldi	r24, 0x01	; 1
    2b36:	90 e0       	ldi	r25, 0x00	; 0
    2b38:	98 ab       	std	Y+48, r25	; 0x30
    2b3a:	8f a7       	std	Y+47, r24	; 0x2f
    2b3c:	3f c0       	rjmp	.+126    	; 0x2bbc <main+0x170>
	else if (__tmp > 65535)
    2b3e:	69 a9       	ldd	r22, Y+49	; 0x31
    2b40:	7a a9       	ldd	r23, Y+50	; 0x32
    2b42:	8b a9       	ldd	r24, Y+51	; 0x33
    2b44:	9c a9       	ldd	r25, Y+52	; 0x34
    2b46:	20 e0       	ldi	r18, 0x00	; 0
    2b48:	3f ef       	ldi	r19, 0xFF	; 255
    2b4a:	4f e7       	ldi	r20, 0x7F	; 127
    2b4c:	57 e4       	ldi	r21, 0x47	; 71
    2b4e:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2b52:	18 16       	cp	r1, r24
    2b54:	4c f5       	brge	.+82     	; 0x2ba8 <main+0x15c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b56:	6d a9       	ldd	r22, Y+53	; 0x35
    2b58:	7e a9       	ldd	r23, Y+54	; 0x36
    2b5a:	8f a9       	ldd	r24, Y+55	; 0x37
    2b5c:	98 ad       	ldd	r25, Y+56	; 0x38
    2b5e:	20 e0       	ldi	r18, 0x00	; 0
    2b60:	30 e0       	ldi	r19, 0x00	; 0
    2b62:	40 e2       	ldi	r20, 0x20	; 32
    2b64:	51 e4       	ldi	r21, 0x41	; 65
    2b66:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2b6a:	dc 01       	movw	r26, r24
    2b6c:	cb 01       	movw	r24, r22
    2b6e:	bc 01       	movw	r22, r24
    2b70:	cd 01       	movw	r24, r26
    2b72:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2b76:	dc 01       	movw	r26, r24
    2b78:	cb 01       	movw	r24, r22
    2b7a:	98 ab       	std	Y+48, r25	; 0x30
    2b7c:	8f a7       	std	Y+47, r24	; 0x2f
    2b7e:	0f c0       	rjmp	.+30     	; 0x2b9e <main+0x152>
    2b80:	88 ec       	ldi	r24, 0xC8	; 200
    2b82:	90 e0       	ldi	r25, 0x00	; 0
    2b84:	9e a7       	std	Y+46, r25	; 0x2e
    2b86:	8d a7       	std	Y+45, r24	; 0x2d
    2b88:	8d a5       	ldd	r24, Y+45	; 0x2d
    2b8a:	9e a5       	ldd	r25, Y+46	; 0x2e
    2b8c:	01 97       	sbiw	r24, 0x01	; 1
    2b8e:	f1 f7       	brne	.-4      	; 0x2b8c <main+0x140>
    2b90:	9e a7       	std	Y+46, r25	; 0x2e
    2b92:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b94:	8f a5       	ldd	r24, Y+47	; 0x2f
    2b96:	98 a9       	ldd	r25, Y+48	; 0x30
    2b98:	01 97       	sbiw	r24, 0x01	; 1
    2b9a:	98 ab       	std	Y+48, r25	; 0x30
    2b9c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b9e:	8f a5       	ldd	r24, Y+47	; 0x2f
    2ba0:	98 a9       	ldd	r25, Y+48	; 0x30
    2ba2:	00 97       	sbiw	r24, 0x00	; 0
    2ba4:	69 f7       	brne	.-38     	; 0x2b80 <main+0x134>
    2ba6:	14 c0       	rjmp	.+40     	; 0x2bd0 <main+0x184>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2ba8:	69 a9       	ldd	r22, Y+49	; 0x31
    2baa:	7a a9       	ldd	r23, Y+50	; 0x32
    2bac:	8b a9       	ldd	r24, Y+51	; 0x33
    2bae:	9c a9       	ldd	r25, Y+52	; 0x34
    2bb0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2bb4:	dc 01       	movw	r26, r24
    2bb6:	cb 01       	movw	r24, r22
    2bb8:	98 ab       	std	Y+48, r25	; 0x30
    2bba:	8f a7       	std	Y+47, r24	; 0x2f
    2bbc:	8f a5       	ldd	r24, Y+47	; 0x2f
    2bbe:	98 a9       	ldd	r25, Y+48	; 0x30
    2bc0:	9c a7       	std	Y+44, r25	; 0x2c
    2bc2:	8b a7       	std	Y+43, r24	; 0x2b
    2bc4:	8b a5       	ldd	r24, Y+43	; 0x2b
    2bc6:	9c a5       	ldd	r25, Y+44	; 0x2c
    2bc8:	01 97       	sbiw	r24, 0x01	; 1
    2bca:	f1 f7       	brne	.-4      	; 0x2bc8 <main+0x17c>
    2bcc:	9c a7       	std	Y+44, r25	; 0x2c
    2bce:	8b a7       	std	Y+43, r24	; 0x2b

    /* First Temperature Read */
    _delay_ms(200);
    SPI_VidSendByte(0x44);
    2bd0:	84 e4       	ldi	r24, 0x44	; 68
    2bd2:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <SPI_VidSendByte>
    2bd6:	80 e0       	ldi	r24, 0x00	; 0
    2bd8:	90 e0       	ldi	r25, 0x00	; 0
    2bda:	a8 e4       	ldi	r26, 0x48	; 72
    2bdc:	b3 e4       	ldi	r27, 0x43	; 67
    2bde:	8f a3       	std	Y+39, r24	; 0x27
    2be0:	98 a7       	std	Y+40, r25	; 0x28
    2be2:	a9 a7       	std	Y+41, r26	; 0x29
    2be4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2be6:	6f a1       	ldd	r22, Y+39	; 0x27
    2be8:	78 a5       	ldd	r23, Y+40	; 0x28
    2bea:	89 a5       	ldd	r24, Y+41	; 0x29
    2bec:	9a a5       	ldd	r25, Y+42	; 0x2a
    2bee:	20 e0       	ldi	r18, 0x00	; 0
    2bf0:	30 e0       	ldi	r19, 0x00	; 0
    2bf2:	4a ef       	ldi	r20, 0xFA	; 250
    2bf4:	54 e4       	ldi	r21, 0x44	; 68
    2bf6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2bfa:	dc 01       	movw	r26, r24
    2bfc:	cb 01       	movw	r24, r22
    2bfe:	8b a3       	std	Y+35, r24	; 0x23
    2c00:	9c a3       	std	Y+36, r25	; 0x24
    2c02:	ad a3       	std	Y+37, r26	; 0x25
    2c04:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2c06:	6b a1       	ldd	r22, Y+35	; 0x23
    2c08:	7c a1       	ldd	r23, Y+36	; 0x24
    2c0a:	8d a1       	ldd	r24, Y+37	; 0x25
    2c0c:	9e a1       	ldd	r25, Y+38	; 0x26
    2c0e:	20 e0       	ldi	r18, 0x00	; 0
    2c10:	30 e0       	ldi	r19, 0x00	; 0
    2c12:	40 e8       	ldi	r20, 0x80	; 128
    2c14:	5f e3       	ldi	r21, 0x3F	; 63
    2c16:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2c1a:	88 23       	and	r24, r24
    2c1c:	2c f4       	brge	.+10     	; 0x2c28 <main+0x1dc>
		__ticks = 1;
    2c1e:	81 e0       	ldi	r24, 0x01	; 1
    2c20:	90 e0       	ldi	r25, 0x00	; 0
    2c22:	9a a3       	std	Y+34, r25	; 0x22
    2c24:	89 a3       	std	Y+33, r24	; 0x21
    2c26:	3f c0       	rjmp	.+126    	; 0x2ca6 <main+0x25a>
	else if (__tmp > 65535)
    2c28:	6b a1       	ldd	r22, Y+35	; 0x23
    2c2a:	7c a1       	ldd	r23, Y+36	; 0x24
    2c2c:	8d a1       	ldd	r24, Y+37	; 0x25
    2c2e:	9e a1       	ldd	r25, Y+38	; 0x26
    2c30:	20 e0       	ldi	r18, 0x00	; 0
    2c32:	3f ef       	ldi	r19, 0xFF	; 255
    2c34:	4f e7       	ldi	r20, 0x7F	; 127
    2c36:	57 e4       	ldi	r21, 0x47	; 71
    2c38:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2c3c:	18 16       	cp	r1, r24
    2c3e:	4c f5       	brge	.+82     	; 0x2c92 <main+0x246>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2c40:	6f a1       	ldd	r22, Y+39	; 0x27
    2c42:	78 a5       	ldd	r23, Y+40	; 0x28
    2c44:	89 a5       	ldd	r24, Y+41	; 0x29
    2c46:	9a a5       	ldd	r25, Y+42	; 0x2a
    2c48:	20 e0       	ldi	r18, 0x00	; 0
    2c4a:	30 e0       	ldi	r19, 0x00	; 0
    2c4c:	40 e2       	ldi	r20, 0x20	; 32
    2c4e:	51 e4       	ldi	r21, 0x41	; 65
    2c50:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	bc 01       	movw	r22, r24
    2c5a:	cd 01       	movw	r24, r26
    2c5c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c60:	dc 01       	movw	r26, r24
    2c62:	cb 01       	movw	r24, r22
    2c64:	9a a3       	std	Y+34, r25	; 0x22
    2c66:	89 a3       	std	Y+33, r24	; 0x21
    2c68:	0f c0       	rjmp	.+30     	; 0x2c88 <main+0x23c>
    2c6a:	88 ec       	ldi	r24, 0xC8	; 200
    2c6c:	90 e0       	ldi	r25, 0x00	; 0
    2c6e:	98 a3       	std	Y+32, r25	; 0x20
    2c70:	8f 8f       	std	Y+31, r24	; 0x1f
    2c72:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2c74:	98 a1       	ldd	r25, Y+32	; 0x20
    2c76:	01 97       	sbiw	r24, 0x01	; 1
    2c78:	f1 f7       	brne	.-4      	; 0x2c76 <main+0x22a>
    2c7a:	98 a3       	std	Y+32, r25	; 0x20
    2c7c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c7e:	89 a1       	ldd	r24, Y+33	; 0x21
    2c80:	9a a1       	ldd	r25, Y+34	; 0x22
    2c82:	01 97       	sbiw	r24, 0x01	; 1
    2c84:	9a a3       	std	Y+34, r25	; 0x22
    2c86:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c88:	89 a1       	ldd	r24, Y+33	; 0x21
    2c8a:	9a a1       	ldd	r25, Y+34	; 0x22
    2c8c:	00 97       	sbiw	r24, 0x00	; 0
    2c8e:	69 f7       	brne	.-38     	; 0x2c6a <main+0x21e>
    2c90:	14 c0       	rjmp	.+40     	; 0x2cba <main+0x26e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c92:	6b a1       	ldd	r22, Y+35	; 0x23
    2c94:	7c a1       	ldd	r23, Y+36	; 0x24
    2c96:	8d a1       	ldd	r24, Y+37	; 0x25
    2c98:	9e a1       	ldd	r25, Y+38	; 0x26
    2c9a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2c9e:	dc 01       	movw	r26, r24
    2ca0:	cb 01       	movw	r24, r22
    2ca2:	9a a3       	std	Y+34, r25	; 0x22
    2ca4:	89 a3       	std	Y+33, r24	; 0x21
    2ca6:	89 a1       	ldd	r24, Y+33	; 0x21
    2ca8:	9a a1       	ldd	r25, Y+34	; 0x22
    2caa:	9e 8f       	std	Y+30, r25	; 0x1e
    2cac:	8d 8f       	std	Y+29, r24	; 0x1d
    2cae:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2cb0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2cb2:	01 97       	sbiw	r24, 0x01	; 1
    2cb4:	f1 f7       	brne	.-4      	; 0x2cb2 <main+0x266>
    2cb6:	9e 8f       	std	Y+30, r25	; 0x1e
    2cb8:	8d 8f       	std	Y+29, r24	; 0x1d
    _delay_ms(200);
    TN1 = SPI_u8TranceiveByte(0x21);
    2cba:	81 e2       	ldi	r24, 0x21	; 33
    2cbc:	0e 94 02 0a 	call	0x1404	; 0x1404 <SPI_u8TranceiveByte>
    2cc0:	80 93 b0 00 	sts	0x00B0, r24
    2cc4:	80 e0       	ldi	r24, 0x00	; 0
    2cc6:	90 e0       	ldi	r25, 0x00	; 0
    2cc8:	a8 e4       	ldi	r26, 0x48	; 72
    2cca:	b3 e4       	ldi	r27, 0x43	; 67
    2ccc:	89 8f       	std	Y+25, r24	; 0x19
    2cce:	9a 8f       	std	Y+26, r25	; 0x1a
    2cd0:	ab 8f       	std	Y+27, r26	; 0x1b
    2cd2:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2cd4:	69 8d       	ldd	r22, Y+25	; 0x19
    2cd6:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2cd8:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2cda:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2cdc:	20 e0       	ldi	r18, 0x00	; 0
    2cde:	30 e0       	ldi	r19, 0x00	; 0
    2ce0:	4a ef       	ldi	r20, 0xFA	; 250
    2ce2:	54 e4       	ldi	r21, 0x44	; 68
    2ce4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ce8:	dc 01       	movw	r26, r24
    2cea:	cb 01       	movw	r24, r22
    2cec:	8d 8b       	std	Y+21, r24	; 0x15
    2cee:	9e 8b       	std	Y+22, r25	; 0x16
    2cf0:	af 8b       	std	Y+23, r26	; 0x17
    2cf2:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2cf4:	6d 89       	ldd	r22, Y+21	; 0x15
    2cf6:	7e 89       	ldd	r23, Y+22	; 0x16
    2cf8:	8f 89       	ldd	r24, Y+23	; 0x17
    2cfa:	98 8d       	ldd	r25, Y+24	; 0x18
    2cfc:	20 e0       	ldi	r18, 0x00	; 0
    2cfe:	30 e0       	ldi	r19, 0x00	; 0
    2d00:	40 e8       	ldi	r20, 0x80	; 128
    2d02:	5f e3       	ldi	r21, 0x3F	; 63
    2d04:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2d08:	88 23       	and	r24, r24
    2d0a:	2c f4       	brge	.+10     	; 0x2d16 <main+0x2ca>
		__ticks = 1;
    2d0c:	81 e0       	ldi	r24, 0x01	; 1
    2d0e:	90 e0       	ldi	r25, 0x00	; 0
    2d10:	9c 8b       	std	Y+20, r25	; 0x14
    2d12:	8b 8b       	std	Y+19, r24	; 0x13
    2d14:	3f c0       	rjmp	.+126    	; 0x2d94 <main+0x348>
	else if (__tmp > 65535)
    2d16:	6d 89       	ldd	r22, Y+21	; 0x15
    2d18:	7e 89       	ldd	r23, Y+22	; 0x16
    2d1a:	8f 89       	ldd	r24, Y+23	; 0x17
    2d1c:	98 8d       	ldd	r25, Y+24	; 0x18
    2d1e:	20 e0       	ldi	r18, 0x00	; 0
    2d20:	3f ef       	ldi	r19, 0xFF	; 255
    2d22:	4f e7       	ldi	r20, 0x7F	; 127
    2d24:	57 e4       	ldi	r21, 0x47	; 71
    2d26:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2d2a:	18 16       	cp	r1, r24
    2d2c:	4c f5       	brge	.+82     	; 0x2d80 <main+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2d2e:	69 8d       	ldd	r22, Y+25	; 0x19
    2d30:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2d32:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2d34:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2d36:	20 e0       	ldi	r18, 0x00	; 0
    2d38:	30 e0       	ldi	r19, 0x00	; 0
    2d3a:	40 e2       	ldi	r20, 0x20	; 32
    2d3c:	51 e4       	ldi	r21, 0x41	; 65
    2d3e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d42:	dc 01       	movw	r26, r24
    2d44:	cb 01       	movw	r24, r22
    2d46:	bc 01       	movw	r22, r24
    2d48:	cd 01       	movw	r24, r26
    2d4a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d4e:	dc 01       	movw	r26, r24
    2d50:	cb 01       	movw	r24, r22
    2d52:	9c 8b       	std	Y+20, r25	; 0x14
    2d54:	8b 8b       	std	Y+19, r24	; 0x13
    2d56:	0f c0       	rjmp	.+30     	; 0x2d76 <main+0x32a>
    2d58:	88 ec       	ldi	r24, 0xC8	; 200
    2d5a:	90 e0       	ldi	r25, 0x00	; 0
    2d5c:	9a 8b       	std	Y+18, r25	; 0x12
    2d5e:	89 8b       	std	Y+17, r24	; 0x11
    2d60:	89 89       	ldd	r24, Y+17	; 0x11
    2d62:	9a 89       	ldd	r25, Y+18	; 0x12
    2d64:	01 97       	sbiw	r24, 0x01	; 1
    2d66:	f1 f7       	brne	.-4      	; 0x2d64 <main+0x318>
    2d68:	9a 8b       	std	Y+18, r25	; 0x12
    2d6a:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d6c:	8b 89       	ldd	r24, Y+19	; 0x13
    2d6e:	9c 89       	ldd	r25, Y+20	; 0x14
    2d70:	01 97       	sbiw	r24, 0x01	; 1
    2d72:	9c 8b       	std	Y+20, r25	; 0x14
    2d74:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d76:	8b 89       	ldd	r24, Y+19	; 0x13
    2d78:	9c 89       	ldd	r25, Y+20	; 0x14
    2d7a:	00 97       	sbiw	r24, 0x00	; 0
    2d7c:	69 f7       	brne	.-38     	; 0x2d58 <main+0x30c>
    2d7e:	14 c0       	rjmp	.+40     	; 0x2da8 <main+0x35c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d80:	6d 89       	ldd	r22, Y+21	; 0x15
    2d82:	7e 89       	ldd	r23, Y+22	; 0x16
    2d84:	8f 89       	ldd	r24, Y+23	; 0x17
    2d86:	98 8d       	ldd	r25, Y+24	; 0x18
    2d88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2d8c:	dc 01       	movw	r26, r24
    2d8e:	cb 01       	movw	r24, r22
    2d90:	9c 8b       	std	Y+20, r25	; 0x14
    2d92:	8b 8b       	std	Y+19, r24	; 0x13
    2d94:	8b 89       	ldd	r24, Y+19	; 0x13
    2d96:	9c 89       	ldd	r25, Y+20	; 0x14
    2d98:	98 8b       	std	Y+16, r25	; 0x10
    2d9a:	8f 87       	std	Y+15, r24	; 0x0f
    2d9c:	8f 85       	ldd	r24, Y+15	; 0x0f
    2d9e:	98 89       	ldd	r25, Y+16	; 0x10
    2da0:	01 97       	sbiw	r24, 0x01	; 1
    2da2:	f1 f7       	brne	.-4      	; 0x2da0 <main+0x354>
    2da4:	98 8b       	std	Y+16, r25	; 0x10
    2da6:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(200);
    TN2 = SPI_u8TranceiveByte(0x22);
    2da8:	82 e2       	ldi	r24, 0x22	; 34
    2daa:	0e 94 02 0a 	call	0x1404	; 0x1404 <SPI_u8TranceiveByte>
    2dae:	80 93 b1 00 	sts	0x00B1, r24

    CLCD_VidGotoXY(1, 13);
    2db2:	81 e0       	ldi	r24, 0x01	; 1
    2db4:	6d e0       	ldi	r22, 0x0D	; 13
    2db6:	0e 94 b7 14 	call	0x296e	; 0x296e <CLCD_VidGotoXY>
    CLCD_VidSendData(TN1);
    2dba:	80 91 b0 00 	lds	r24, 0x00B0
    2dbe:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <CLCD_VidSendData>
    CLCD_VidGotoXY(1, 14);
    2dc2:	81 e0       	ldi	r24, 0x01	; 1
    2dc4:	6e e0       	ldi	r22, 0x0E	; 14
    2dc6:	0e 94 b7 14 	call	0x296e	; 0x296e <CLCD_VidGotoXY>
    CLCD_VidSendData(TN2);
    2dca:	80 91 b1 00 	lds	r24, 0x00B1
    2dce:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <CLCD_VidSendData>

    /*-------------------Program Loop----------------------*/

    while (1)
    {
        CMD = USART_u8ReceiveByte();
    2dd2:	0e 94 af 0f 	call	0x1f5e	; 0x1f5e <USART_u8ReceiveByte>
    2dd6:	80 93 b2 00 	sts	0x00B2, r24
        SPI_VidSendByte(CMD);
    2dda:	80 91 b2 00 	lds	r24, 0x00B2
    2dde:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <SPI_VidSendByte>
    2de2:	80 e0       	ldi	r24, 0x00	; 0
    2de4:	90 e0       	ldi	r25, 0x00	; 0
    2de6:	aa ef       	ldi	r26, 0xFA	; 250
    2de8:	b3 e4       	ldi	r27, 0x43	; 67
    2dea:	8b 87       	std	Y+11, r24	; 0x0b
    2dec:	9c 87       	std	Y+12, r25	; 0x0c
    2dee:	ad 87       	std	Y+13, r26	; 0x0d
    2df0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2df2:	6b 85       	ldd	r22, Y+11	; 0x0b
    2df4:	7c 85       	ldd	r23, Y+12	; 0x0c
    2df6:	8d 85       	ldd	r24, Y+13	; 0x0d
    2df8:	9e 85       	ldd	r25, Y+14	; 0x0e
    2dfa:	20 e0       	ldi	r18, 0x00	; 0
    2dfc:	30 e0       	ldi	r19, 0x00	; 0
    2dfe:	4a ef       	ldi	r20, 0xFA	; 250
    2e00:	54 e4       	ldi	r21, 0x44	; 68
    2e02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e06:	dc 01       	movw	r26, r24
    2e08:	cb 01       	movw	r24, r22
    2e0a:	8f 83       	std	Y+7, r24	; 0x07
    2e0c:	98 87       	std	Y+8, r25	; 0x08
    2e0e:	a9 87       	std	Y+9, r26	; 0x09
    2e10:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2e12:	6f 81       	ldd	r22, Y+7	; 0x07
    2e14:	78 85       	ldd	r23, Y+8	; 0x08
    2e16:	89 85       	ldd	r24, Y+9	; 0x09
    2e18:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e1a:	20 e0       	ldi	r18, 0x00	; 0
    2e1c:	30 e0       	ldi	r19, 0x00	; 0
    2e1e:	40 e8       	ldi	r20, 0x80	; 128
    2e20:	5f e3       	ldi	r21, 0x3F	; 63
    2e22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2e26:	88 23       	and	r24, r24
    2e28:	2c f4       	brge	.+10     	; 0x2e34 <main+0x3e8>
		__ticks = 1;
    2e2a:	81 e0       	ldi	r24, 0x01	; 1
    2e2c:	90 e0       	ldi	r25, 0x00	; 0
    2e2e:	9e 83       	std	Y+6, r25	; 0x06
    2e30:	8d 83       	std	Y+5, r24	; 0x05
    2e32:	3f c0       	rjmp	.+126    	; 0x2eb2 <main+0x466>
	else if (__tmp > 65535)
    2e34:	6f 81       	ldd	r22, Y+7	; 0x07
    2e36:	78 85       	ldd	r23, Y+8	; 0x08
    2e38:	89 85       	ldd	r24, Y+9	; 0x09
    2e3a:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e3c:	20 e0       	ldi	r18, 0x00	; 0
    2e3e:	3f ef       	ldi	r19, 0xFF	; 255
    2e40:	4f e7       	ldi	r20, 0x7F	; 127
    2e42:	57 e4       	ldi	r21, 0x47	; 71
    2e44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2e48:	18 16       	cp	r1, r24
    2e4a:	4c f5       	brge	.+82     	; 0x2e9e <main+0x452>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2e4c:	6b 85       	ldd	r22, Y+11	; 0x0b
    2e4e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2e50:	8d 85       	ldd	r24, Y+13	; 0x0d
    2e52:	9e 85       	ldd	r25, Y+14	; 0x0e
    2e54:	20 e0       	ldi	r18, 0x00	; 0
    2e56:	30 e0       	ldi	r19, 0x00	; 0
    2e58:	40 e2       	ldi	r20, 0x20	; 32
    2e5a:	51 e4       	ldi	r21, 0x41	; 65
    2e5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2e60:	dc 01       	movw	r26, r24
    2e62:	cb 01       	movw	r24, r22
    2e64:	bc 01       	movw	r22, r24
    2e66:	cd 01       	movw	r24, r26
    2e68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e6c:	dc 01       	movw	r26, r24
    2e6e:	cb 01       	movw	r24, r22
    2e70:	9e 83       	std	Y+6, r25	; 0x06
    2e72:	8d 83       	std	Y+5, r24	; 0x05
    2e74:	0f c0       	rjmp	.+30     	; 0x2e94 <main+0x448>
    2e76:	88 ec       	ldi	r24, 0xC8	; 200
    2e78:	90 e0       	ldi	r25, 0x00	; 0
    2e7a:	9c 83       	std	Y+4, r25	; 0x04
    2e7c:	8b 83       	std	Y+3, r24	; 0x03
    2e7e:	8b 81       	ldd	r24, Y+3	; 0x03
    2e80:	9c 81       	ldd	r25, Y+4	; 0x04
    2e82:	01 97       	sbiw	r24, 0x01	; 1
    2e84:	f1 f7       	brne	.-4      	; 0x2e82 <main+0x436>
    2e86:	9c 83       	std	Y+4, r25	; 0x04
    2e88:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e8a:	8d 81       	ldd	r24, Y+5	; 0x05
    2e8c:	9e 81       	ldd	r25, Y+6	; 0x06
    2e8e:	01 97       	sbiw	r24, 0x01	; 1
    2e90:	9e 83       	std	Y+6, r25	; 0x06
    2e92:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e94:	8d 81       	ldd	r24, Y+5	; 0x05
    2e96:	9e 81       	ldd	r25, Y+6	; 0x06
    2e98:	00 97       	sbiw	r24, 0x00	; 0
    2e9a:	69 f7       	brne	.-38     	; 0x2e76 <main+0x42a>
    2e9c:	9a cf       	rjmp	.-204    	; 0x2dd2 <main+0x386>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e9e:	6f 81       	ldd	r22, Y+7	; 0x07
    2ea0:	78 85       	ldd	r23, Y+8	; 0x08
    2ea2:	89 85       	ldd	r24, Y+9	; 0x09
    2ea4:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ea6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2eaa:	dc 01       	movw	r26, r24
    2eac:	cb 01       	movw	r24, r22
    2eae:	9e 83       	std	Y+6, r25	; 0x06
    2eb0:	8d 83       	std	Y+5, r24	; 0x05
    2eb2:	8d 81       	ldd	r24, Y+5	; 0x05
    2eb4:	9e 81       	ldd	r25, Y+6	; 0x06
    2eb6:	9a 83       	std	Y+2, r25	; 0x02
    2eb8:	89 83       	std	Y+1, r24	; 0x01
    2eba:	89 81       	ldd	r24, Y+1	; 0x01
    2ebc:	9a 81       	ldd	r25, Y+2	; 0x02
    2ebe:	01 97       	sbiw	r24, 0x01	; 1
    2ec0:	f1 f7       	brne	.-4      	; 0x2ebe <main+0x472>
    2ec2:	9a 83       	std	Y+2, r25	; 0x02
    2ec4:	89 83       	std	Y+1, r24	; 0x01
    2ec6:	85 cf       	rjmp	.-246    	; 0x2dd2 <main+0x386>

00002ec8 <TMR1_ISR>:
}

/*-------------------Timer 1 ISR----------------------*/

void TMR1_ISR()
{
    2ec8:	df 93       	push	r29
    2eca:	cf 93       	push	r28
    2ecc:	cd b7       	in	r28, 0x3d	; 61
    2ece:	de b7       	in	r29, 0x3e	; 62
    2ed0:	6c 97       	sbiw	r28, 0x1c	; 28
    2ed2:	0f b6       	in	r0, 0x3f	; 63
    2ed4:	f8 94       	cli
    2ed6:	de bf       	out	0x3e, r29	; 62
    2ed8:	0f be       	out	0x3f, r0	; 63
    2eda:	cd bf       	out	0x3d, r28	; 61
    /* Reading Tempretaure */
    SPI_VidSendByte(0x44);
    2edc:	84 e4       	ldi	r24, 0x44	; 68
    2ede:	0e 94 e0 09 	call	0x13c0	; 0x13c0 <SPI_VidSendByte>
    2ee2:	80 e0       	ldi	r24, 0x00	; 0
    2ee4:	90 e0       	ldi	r25, 0x00	; 0
    2ee6:	a8 e4       	ldi	r26, 0x48	; 72
    2ee8:	b3 e4       	ldi	r27, 0x43	; 67
    2eea:	89 8f       	std	Y+25, r24	; 0x19
    2eec:	9a 8f       	std	Y+26, r25	; 0x1a
    2eee:	ab 8f       	std	Y+27, r26	; 0x1b
    2ef0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ef2:	69 8d       	ldd	r22, Y+25	; 0x19
    2ef4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ef6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ef8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2efa:	20 e0       	ldi	r18, 0x00	; 0
    2efc:	30 e0       	ldi	r19, 0x00	; 0
    2efe:	4a ef       	ldi	r20, 0xFA	; 250
    2f00:	54 e4       	ldi	r21, 0x44	; 68
    2f02:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f06:	dc 01       	movw	r26, r24
    2f08:	cb 01       	movw	r24, r22
    2f0a:	8d 8b       	std	Y+21, r24	; 0x15
    2f0c:	9e 8b       	std	Y+22, r25	; 0x16
    2f0e:	af 8b       	std	Y+23, r26	; 0x17
    2f10:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2f12:	6d 89       	ldd	r22, Y+21	; 0x15
    2f14:	7e 89       	ldd	r23, Y+22	; 0x16
    2f16:	8f 89       	ldd	r24, Y+23	; 0x17
    2f18:	98 8d       	ldd	r25, Y+24	; 0x18
    2f1a:	20 e0       	ldi	r18, 0x00	; 0
    2f1c:	30 e0       	ldi	r19, 0x00	; 0
    2f1e:	40 e8       	ldi	r20, 0x80	; 128
    2f20:	5f e3       	ldi	r21, 0x3F	; 63
    2f22:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    2f26:	88 23       	and	r24, r24
    2f28:	2c f4       	brge	.+10     	; 0x2f34 <TMR1_ISR+0x6c>
		__ticks = 1;
    2f2a:	81 e0       	ldi	r24, 0x01	; 1
    2f2c:	90 e0       	ldi	r25, 0x00	; 0
    2f2e:	9c 8b       	std	Y+20, r25	; 0x14
    2f30:	8b 8b       	std	Y+19, r24	; 0x13
    2f32:	3f c0       	rjmp	.+126    	; 0x2fb2 <TMR1_ISR+0xea>
	else if (__tmp > 65535)
    2f34:	6d 89       	ldd	r22, Y+21	; 0x15
    2f36:	7e 89       	ldd	r23, Y+22	; 0x16
    2f38:	8f 89       	ldd	r24, Y+23	; 0x17
    2f3a:	98 8d       	ldd	r25, Y+24	; 0x18
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	3f ef       	ldi	r19, 0xFF	; 255
    2f40:	4f e7       	ldi	r20, 0x7F	; 127
    2f42:	57 e4       	ldi	r21, 0x47	; 71
    2f44:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    2f48:	18 16       	cp	r1, r24
    2f4a:	4c f5       	brge	.+82     	; 0x2f9e <TMR1_ISR+0xd6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f4c:	69 8d       	ldd	r22, Y+25	; 0x19
    2f4e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2f50:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2f52:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2f54:	20 e0       	ldi	r18, 0x00	; 0
    2f56:	30 e0       	ldi	r19, 0x00	; 0
    2f58:	40 e2       	ldi	r20, 0x20	; 32
    2f5a:	51 e4       	ldi	r21, 0x41	; 65
    2f5c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f60:	dc 01       	movw	r26, r24
    2f62:	cb 01       	movw	r24, r22
    2f64:	bc 01       	movw	r22, r24
    2f66:	cd 01       	movw	r24, r26
    2f68:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f6c:	dc 01       	movw	r26, r24
    2f6e:	cb 01       	movw	r24, r22
    2f70:	9c 8b       	std	Y+20, r25	; 0x14
    2f72:	8b 8b       	std	Y+19, r24	; 0x13
    2f74:	0f c0       	rjmp	.+30     	; 0x2f94 <TMR1_ISR+0xcc>
    2f76:	88 ec       	ldi	r24, 0xC8	; 200
    2f78:	90 e0       	ldi	r25, 0x00	; 0
    2f7a:	9a 8b       	std	Y+18, r25	; 0x12
    2f7c:	89 8b       	std	Y+17, r24	; 0x11
    2f7e:	89 89       	ldd	r24, Y+17	; 0x11
    2f80:	9a 89       	ldd	r25, Y+18	; 0x12
    2f82:	01 97       	sbiw	r24, 0x01	; 1
    2f84:	f1 f7       	brne	.-4      	; 0x2f82 <TMR1_ISR+0xba>
    2f86:	9a 8b       	std	Y+18, r25	; 0x12
    2f88:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f8a:	8b 89       	ldd	r24, Y+19	; 0x13
    2f8c:	9c 89       	ldd	r25, Y+20	; 0x14
    2f8e:	01 97       	sbiw	r24, 0x01	; 1
    2f90:	9c 8b       	std	Y+20, r25	; 0x14
    2f92:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f94:	8b 89       	ldd	r24, Y+19	; 0x13
    2f96:	9c 89       	ldd	r25, Y+20	; 0x14
    2f98:	00 97       	sbiw	r24, 0x00	; 0
    2f9a:	69 f7       	brne	.-38     	; 0x2f76 <TMR1_ISR+0xae>
    2f9c:	14 c0       	rjmp	.+40     	; 0x2fc6 <TMR1_ISR+0xfe>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f9e:	6d 89       	ldd	r22, Y+21	; 0x15
    2fa0:	7e 89       	ldd	r23, Y+22	; 0x16
    2fa2:	8f 89       	ldd	r24, Y+23	; 0x17
    2fa4:	98 8d       	ldd	r25, Y+24	; 0x18
    2fa6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2faa:	dc 01       	movw	r26, r24
    2fac:	cb 01       	movw	r24, r22
    2fae:	9c 8b       	std	Y+20, r25	; 0x14
    2fb0:	8b 8b       	std	Y+19, r24	; 0x13
    2fb2:	8b 89       	ldd	r24, Y+19	; 0x13
    2fb4:	9c 89       	ldd	r25, Y+20	; 0x14
    2fb6:	98 8b       	std	Y+16, r25	; 0x10
    2fb8:	8f 87       	std	Y+15, r24	; 0x0f
    2fba:	8f 85       	ldd	r24, Y+15	; 0x0f
    2fbc:	98 89       	ldd	r25, Y+16	; 0x10
    2fbe:	01 97       	sbiw	r24, 0x01	; 1
    2fc0:	f1 f7       	brne	.-4      	; 0x2fbe <TMR1_ISR+0xf6>
    2fc2:	98 8b       	std	Y+16, r25	; 0x10
    2fc4:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(200);
    TN1 = SPI_u8TranceiveByte(0x21);
    2fc6:	81 e2       	ldi	r24, 0x21	; 33
    2fc8:	0e 94 02 0a 	call	0x1404	; 0x1404 <SPI_u8TranceiveByte>
    2fcc:	80 93 b0 00 	sts	0x00B0, r24
    2fd0:	80 e0       	ldi	r24, 0x00	; 0
    2fd2:	90 e0       	ldi	r25, 0x00	; 0
    2fd4:	a8 e4       	ldi	r26, 0x48	; 72
    2fd6:	b3 e4       	ldi	r27, 0x43	; 67
    2fd8:	8b 87       	std	Y+11, r24	; 0x0b
    2fda:	9c 87       	std	Y+12, r25	; 0x0c
    2fdc:	ad 87       	std	Y+13, r26	; 0x0d
    2fde:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fe0:	6b 85       	ldd	r22, Y+11	; 0x0b
    2fe2:	7c 85       	ldd	r23, Y+12	; 0x0c
    2fe4:	8d 85       	ldd	r24, Y+13	; 0x0d
    2fe6:	9e 85       	ldd	r25, Y+14	; 0x0e
    2fe8:	20 e0       	ldi	r18, 0x00	; 0
    2fea:	30 e0       	ldi	r19, 0x00	; 0
    2fec:	4a ef       	ldi	r20, 0xFA	; 250
    2fee:	54 e4       	ldi	r21, 0x44	; 68
    2ff0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ff4:	dc 01       	movw	r26, r24
    2ff6:	cb 01       	movw	r24, r22
    2ff8:	8f 83       	std	Y+7, r24	; 0x07
    2ffa:	98 87       	std	Y+8, r25	; 0x08
    2ffc:	a9 87       	std	Y+9, r26	; 0x09
    2ffe:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3000:	6f 81       	ldd	r22, Y+7	; 0x07
    3002:	78 85       	ldd	r23, Y+8	; 0x08
    3004:	89 85       	ldd	r24, Y+9	; 0x09
    3006:	9a 85       	ldd	r25, Y+10	; 0x0a
    3008:	20 e0       	ldi	r18, 0x00	; 0
    300a:	30 e0       	ldi	r19, 0x00	; 0
    300c:	40 e8       	ldi	r20, 0x80	; 128
    300e:	5f e3       	ldi	r21, 0x3F	; 63
    3010:	0e 94 25 04 	call	0x84a	; 0x84a <__ltsf2>
    3014:	88 23       	and	r24, r24
    3016:	2c f4       	brge	.+10     	; 0x3022 <TMR1_ISR+0x15a>
		__ticks = 1;
    3018:	81 e0       	ldi	r24, 0x01	; 1
    301a:	90 e0       	ldi	r25, 0x00	; 0
    301c:	9e 83       	std	Y+6, r25	; 0x06
    301e:	8d 83       	std	Y+5, r24	; 0x05
    3020:	3f c0       	rjmp	.+126    	; 0x30a0 <TMR1_ISR+0x1d8>
	else if (__tmp > 65535)
    3022:	6f 81       	ldd	r22, Y+7	; 0x07
    3024:	78 85       	ldd	r23, Y+8	; 0x08
    3026:	89 85       	ldd	r24, Y+9	; 0x09
    3028:	9a 85       	ldd	r25, Y+10	; 0x0a
    302a:	20 e0       	ldi	r18, 0x00	; 0
    302c:	3f ef       	ldi	r19, 0xFF	; 255
    302e:	4f e7       	ldi	r20, 0x7F	; 127
    3030:	57 e4       	ldi	r21, 0x47	; 71
    3032:	0e 94 c5 03 	call	0x78a	; 0x78a <__gtsf2>
    3036:	18 16       	cp	r1, r24
    3038:	4c f5       	brge	.+82     	; 0x308c <TMR1_ISR+0x1c4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    303a:	6b 85       	ldd	r22, Y+11	; 0x0b
    303c:	7c 85       	ldd	r23, Y+12	; 0x0c
    303e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3040:	9e 85       	ldd	r25, Y+14	; 0x0e
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e2       	ldi	r20, 0x20	; 32
    3048:	51 e4       	ldi	r21, 0x41	; 65
    304a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    304e:	dc 01       	movw	r26, r24
    3050:	cb 01       	movw	r24, r22
    3052:	bc 01       	movw	r22, r24
    3054:	cd 01       	movw	r24, r26
    3056:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    305a:	dc 01       	movw	r26, r24
    305c:	cb 01       	movw	r24, r22
    305e:	9e 83       	std	Y+6, r25	; 0x06
    3060:	8d 83       	std	Y+5, r24	; 0x05
    3062:	0f c0       	rjmp	.+30     	; 0x3082 <TMR1_ISR+0x1ba>
    3064:	88 ec       	ldi	r24, 0xC8	; 200
    3066:	90 e0       	ldi	r25, 0x00	; 0
    3068:	9c 83       	std	Y+4, r25	; 0x04
    306a:	8b 83       	std	Y+3, r24	; 0x03
    306c:	8b 81       	ldd	r24, Y+3	; 0x03
    306e:	9c 81       	ldd	r25, Y+4	; 0x04
    3070:	01 97       	sbiw	r24, 0x01	; 1
    3072:	f1 f7       	brne	.-4      	; 0x3070 <TMR1_ISR+0x1a8>
    3074:	9c 83       	std	Y+4, r25	; 0x04
    3076:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3078:	8d 81       	ldd	r24, Y+5	; 0x05
    307a:	9e 81       	ldd	r25, Y+6	; 0x06
    307c:	01 97       	sbiw	r24, 0x01	; 1
    307e:	9e 83       	std	Y+6, r25	; 0x06
    3080:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3082:	8d 81       	ldd	r24, Y+5	; 0x05
    3084:	9e 81       	ldd	r25, Y+6	; 0x06
    3086:	00 97       	sbiw	r24, 0x00	; 0
    3088:	69 f7       	brne	.-38     	; 0x3064 <TMR1_ISR+0x19c>
    308a:	14 c0       	rjmp	.+40     	; 0x30b4 <TMR1_ISR+0x1ec>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    308c:	6f 81       	ldd	r22, Y+7	; 0x07
    308e:	78 85       	ldd	r23, Y+8	; 0x08
    3090:	89 85       	ldd	r24, Y+9	; 0x09
    3092:	9a 85       	ldd	r25, Y+10	; 0x0a
    3094:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3098:	dc 01       	movw	r26, r24
    309a:	cb 01       	movw	r24, r22
    309c:	9e 83       	std	Y+6, r25	; 0x06
    309e:	8d 83       	std	Y+5, r24	; 0x05
    30a0:	8d 81       	ldd	r24, Y+5	; 0x05
    30a2:	9e 81       	ldd	r25, Y+6	; 0x06
    30a4:	9a 83       	std	Y+2, r25	; 0x02
    30a6:	89 83       	std	Y+1, r24	; 0x01
    30a8:	89 81       	ldd	r24, Y+1	; 0x01
    30aa:	9a 81       	ldd	r25, Y+2	; 0x02
    30ac:	01 97       	sbiw	r24, 0x01	; 1
    30ae:	f1 f7       	brne	.-4      	; 0x30ac <TMR1_ISR+0x1e4>
    30b0:	9a 83       	std	Y+2, r25	; 0x02
    30b2:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(200);
    TN2 = SPI_u8TranceiveByte(0x22);
    30b4:	82 e2       	ldi	r24, 0x22	; 34
    30b6:	0e 94 02 0a 	call	0x1404	; 0x1404 <SPI_u8TranceiveByte>
    30ba:	80 93 b1 00 	sts	0x00B1, r24

    CLCD_VidGotoXY(1, 13);
    30be:	81 e0       	ldi	r24, 0x01	; 1
    30c0:	6d e0       	ldi	r22, 0x0D	; 13
    30c2:	0e 94 b7 14 	call	0x296e	; 0x296e <CLCD_VidGotoXY>
    CLCD_VidSendData(TN1);
    30c6:	80 91 b0 00 	lds	r24, 0x00B0
    30ca:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <CLCD_VidSendData>
    CLCD_VidGotoXY(1, 14);
    30ce:	81 e0       	ldi	r24, 0x01	; 1
    30d0:	6e e0       	ldi	r22, 0x0E	; 14
    30d2:	0e 94 b7 14 	call	0x296e	; 0x296e <CLCD_VidGotoXY>
    CLCD_VidSendData(TN2);
    30d6:	80 91 b1 00 	lds	r24, 0x00B1
    30da:	0e 94 d1 10 	call	0x21a2	; 0x21a2 <CLCD_VidSendData>
}
    30de:	6c 96       	adiw	r28, 0x1c	; 28
    30e0:	0f b6       	in	r0, 0x3f	; 63
    30e2:	f8 94       	cli
    30e4:	de bf       	out	0x3e, r29	; 62
    30e6:	0f be       	out	0x3f, r0	; 63
    30e8:	cd bf       	out	0x3d, r28	; 61
    30ea:	cf 91       	pop	r28
    30ec:	df 91       	pop	r29
    30ee:	08 95       	ret

000030f0 <__mulsi3>:
    30f0:	62 9f       	mul	r22, r18
    30f2:	d0 01       	movw	r26, r0
    30f4:	73 9f       	mul	r23, r19
    30f6:	f0 01       	movw	r30, r0
    30f8:	82 9f       	mul	r24, r18
    30fa:	e0 0d       	add	r30, r0
    30fc:	f1 1d       	adc	r31, r1
    30fe:	64 9f       	mul	r22, r20
    3100:	e0 0d       	add	r30, r0
    3102:	f1 1d       	adc	r31, r1
    3104:	92 9f       	mul	r25, r18
    3106:	f0 0d       	add	r31, r0
    3108:	83 9f       	mul	r24, r19
    310a:	f0 0d       	add	r31, r0
    310c:	74 9f       	mul	r23, r20
    310e:	f0 0d       	add	r31, r0
    3110:	65 9f       	mul	r22, r21
    3112:	f0 0d       	add	r31, r0
    3114:	99 27       	eor	r25, r25
    3116:	72 9f       	mul	r23, r18
    3118:	b0 0d       	add	r27, r0
    311a:	e1 1d       	adc	r30, r1
    311c:	f9 1f       	adc	r31, r25
    311e:	63 9f       	mul	r22, r19
    3120:	b0 0d       	add	r27, r0
    3122:	e1 1d       	adc	r30, r1
    3124:	f9 1f       	adc	r31, r25
    3126:	bd 01       	movw	r22, r26
    3128:	cf 01       	movw	r24, r30
    312a:	11 24       	eor	r1, r1
    312c:	08 95       	ret

0000312e <__udivmodhi4>:
    312e:	aa 1b       	sub	r26, r26
    3130:	bb 1b       	sub	r27, r27
    3132:	51 e1       	ldi	r21, 0x11	; 17
    3134:	07 c0       	rjmp	.+14     	; 0x3144 <__udivmodhi4_ep>

00003136 <__udivmodhi4_loop>:
    3136:	aa 1f       	adc	r26, r26
    3138:	bb 1f       	adc	r27, r27
    313a:	a6 17       	cp	r26, r22
    313c:	b7 07       	cpc	r27, r23
    313e:	10 f0       	brcs	.+4      	; 0x3144 <__udivmodhi4_ep>
    3140:	a6 1b       	sub	r26, r22
    3142:	b7 0b       	sbc	r27, r23

00003144 <__udivmodhi4_ep>:
    3144:	88 1f       	adc	r24, r24
    3146:	99 1f       	adc	r25, r25
    3148:	5a 95       	dec	r21
    314a:	a9 f7       	brne	.-22     	; 0x3136 <__udivmodhi4_loop>
    314c:	80 95       	com	r24
    314e:	90 95       	com	r25
    3150:	bc 01       	movw	r22, r24
    3152:	cd 01       	movw	r24, r26
    3154:	08 95       	ret

00003156 <__divmodhi4>:
    3156:	97 fb       	bst	r25, 7
    3158:	09 2e       	mov	r0, r25
    315a:	07 26       	eor	r0, r23
    315c:	0a d0       	rcall	.+20     	; 0x3172 <__divmodhi4_neg1>
    315e:	77 fd       	sbrc	r23, 7
    3160:	04 d0       	rcall	.+8      	; 0x316a <__divmodhi4_neg2>
    3162:	e5 df       	rcall	.-54     	; 0x312e <__udivmodhi4>
    3164:	06 d0       	rcall	.+12     	; 0x3172 <__divmodhi4_neg1>
    3166:	00 20       	and	r0, r0
    3168:	1a f4       	brpl	.+6      	; 0x3170 <__divmodhi4_exit>

0000316a <__divmodhi4_neg2>:
    316a:	70 95       	com	r23
    316c:	61 95       	neg	r22
    316e:	7f 4f       	sbci	r23, 0xFF	; 255

00003170 <__divmodhi4_exit>:
    3170:	08 95       	ret

00003172 <__divmodhi4_neg1>:
    3172:	f6 f7       	brtc	.-4      	; 0x3170 <__divmodhi4_exit>
    3174:	90 95       	com	r25
    3176:	81 95       	neg	r24
    3178:	9f 4f       	sbci	r25, 0xFF	; 255
    317a:	08 95       	ret

0000317c <__divmodsi4>:
    317c:	97 fb       	bst	r25, 7
    317e:	09 2e       	mov	r0, r25
    3180:	05 26       	eor	r0, r21
    3182:	0e d0       	rcall	.+28     	; 0x31a0 <__divmodsi4_neg1>
    3184:	57 fd       	sbrc	r21, 7
    3186:	04 d0       	rcall	.+8      	; 0x3190 <__divmodsi4_neg2>
    3188:	14 d0       	rcall	.+40     	; 0x31b2 <__udivmodsi4>
    318a:	0a d0       	rcall	.+20     	; 0x31a0 <__divmodsi4_neg1>
    318c:	00 1c       	adc	r0, r0
    318e:	38 f4       	brcc	.+14     	; 0x319e <__divmodsi4_exit>

00003190 <__divmodsi4_neg2>:
    3190:	50 95       	com	r21
    3192:	40 95       	com	r20
    3194:	30 95       	com	r19
    3196:	21 95       	neg	r18
    3198:	3f 4f       	sbci	r19, 0xFF	; 255
    319a:	4f 4f       	sbci	r20, 0xFF	; 255
    319c:	5f 4f       	sbci	r21, 0xFF	; 255

0000319e <__divmodsi4_exit>:
    319e:	08 95       	ret

000031a0 <__divmodsi4_neg1>:
    31a0:	f6 f7       	brtc	.-4      	; 0x319e <__divmodsi4_exit>
    31a2:	90 95       	com	r25
    31a4:	80 95       	com	r24
    31a6:	70 95       	com	r23
    31a8:	61 95       	neg	r22
    31aa:	7f 4f       	sbci	r23, 0xFF	; 255
    31ac:	8f 4f       	sbci	r24, 0xFF	; 255
    31ae:	9f 4f       	sbci	r25, 0xFF	; 255
    31b0:	08 95       	ret

000031b2 <__udivmodsi4>:
    31b2:	a1 e2       	ldi	r26, 0x21	; 33
    31b4:	1a 2e       	mov	r1, r26
    31b6:	aa 1b       	sub	r26, r26
    31b8:	bb 1b       	sub	r27, r27
    31ba:	fd 01       	movw	r30, r26
    31bc:	0d c0       	rjmp	.+26     	; 0x31d8 <__udivmodsi4_ep>

000031be <__udivmodsi4_loop>:
    31be:	aa 1f       	adc	r26, r26
    31c0:	bb 1f       	adc	r27, r27
    31c2:	ee 1f       	adc	r30, r30
    31c4:	ff 1f       	adc	r31, r31
    31c6:	a2 17       	cp	r26, r18
    31c8:	b3 07       	cpc	r27, r19
    31ca:	e4 07       	cpc	r30, r20
    31cc:	f5 07       	cpc	r31, r21
    31ce:	20 f0       	brcs	.+8      	; 0x31d8 <__udivmodsi4_ep>
    31d0:	a2 1b       	sub	r26, r18
    31d2:	b3 0b       	sbc	r27, r19
    31d4:	e4 0b       	sbc	r30, r20
    31d6:	f5 0b       	sbc	r31, r21

000031d8 <__udivmodsi4_ep>:
    31d8:	66 1f       	adc	r22, r22
    31da:	77 1f       	adc	r23, r23
    31dc:	88 1f       	adc	r24, r24
    31de:	99 1f       	adc	r25, r25
    31e0:	1a 94       	dec	r1
    31e2:	69 f7       	brne	.-38     	; 0x31be <__udivmodsi4_loop>
    31e4:	60 95       	com	r22
    31e6:	70 95       	com	r23
    31e8:	80 95       	com	r24
    31ea:	90 95       	com	r25
    31ec:	9b 01       	movw	r18, r22
    31ee:	ac 01       	movw	r20, r24
    31f0:	bd 01       	movw	r22, r26
    31f2:	cf 01       	movw	r24, r30
    31f4:	08 95       	ret

000031f6 <__prologue_saves__>:
    31f6:	2f 92       	push	r2
    31f8:	3f 92       	push	r3
    31fa:	4f 92       	push	r4
    31fc:	5f 92       	push	r5
    31fe:	6f 92       	push	r6
    3200:	7f 92       	push	r7
    3202:	8f 92       	push	r8
    3204:	9f 92       	push	r9
    3206:	af 92       	push	r10
    3208:	bf 92       	push	r11
    320a:	cf 92       	push	r12
    320c:	df 92       	push	r13
    320e:	ef 92       	push	r14
    3210:	ff 92       	push	r15
    3212:	0f 93       	push	r16
    3214:	1f 93       	push	r17
    3216:	cf 93       	push	r28
    3218:	df 93       	push	r29
    321a:	cd b7       	in	r28, 0x3d	; 61
    321c:	de b7       	in	r29, 0x3e	; 62
    321e:	ca 1b       	sub	r28, r26
    3220:	db 0b       	sbc	r29, r27
    3222:	0f b6       	in	r0, 0x3f	; 63
    3224:	f8 94       	cli
    3226:	de bf       	out	0x3e, r29	; 62
    3228:	0f be       	out	0x3f, r0	; 63
    322a:	cd bf       	out	0x3d, r28	; 61
    322c:	09 94       	ijmp

0000322e <__epilogue_restores__>:
    322e:	2a 88       	ldd	r2, Y+18	; 0x12
    3230:	39 88       	ldd	r3, Y+17	; 0x11
    3232:	48 88       	ldd	r4, Y+16	; 0x10
    3234:	5f 84       	ldd	r5, Y+15	; 0x0f
    3236:	6e 84       	ldd	r6, Y+14	; 0x0e
    3238:	7d 84       	ldd	r7, Y+13	; 0x0d
    323a:	8c 84       	ldd	r8, Y+12	; 0x0c
    323c:	9b 84       	ldd	r9, Y+11	; 0x0b
    323e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3240:	b9 84       	ldd	r11, Y+9	; 0x09
    3242:	c8 84       	ldd	r12, Y+8	; 0x08
    3244:	df 80       	ldd	r13, Y+7	; 0x07
    3246:	ee 80       	ldd	r14, Y+6	; 0x06
    3248:	fd 80       	ldd	r15, Y+5	; 0x05
    324a:	0c 81       	ldd	r16, Y+4	; 0x04
    324c:	1b 81       	ldd	r17, Y+3	; 0x03
    324e:	aa 81       	ldd	r26, Y+2	; 0x02
    3250:	b9 81       	ldd	r27, Y+1	; 0x01
    3252:	ce 0f       	add	r28, r30
    3254:	d1 1d       	adc	r29, r1
    3256:	0f b6       	in	r0, 0x3f	; 63
    3258:	f8 94       	cli
    325a:	de bf       	out	0x3e, r29	; 62
    325c:	0f be       	out	0x3f, r0	; 63
    325e:	cd bf       	out	0x3d, r28	; 61
    3260:	ed 01       	movw	r28, r26
    3262:	08 95       	ret

00003264 <_exit>:
    3264:	f8 94       	cli

00003266 <__stop_program>:
    3266:	ff cf       	rjmp	.-2      	; 0x3266 <__stop_program>
